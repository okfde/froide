// This file is auto-generated by @hey-api/openapi-ts

import type {
  AttachmentListResponse,
  AttachmentCreateResponse,
  AttachmentRetrieveResponse,
  AttachmentApproveCreateResponse,
  AttachmentToDocumentCreateResponse,
  AttachmentUnapproveCreateResponse,
  ConvertImagesToPdfResponse,
  CampaignListResponse,
  CampaignRetrieveResponse,
  DocumentListResponse,
  DocumentRetrieveResponse,
  DocumentPartialUpdateResponse,
  DocumentOembedRetrieveResponse,
  DocumentcollectionListResponse,
  DocumentcollectionRetrieveResponse,
  DocumentcollectionOembedRetrieveResponse,
  FollowingListResponse,
  GeoregionListResponse,
  GeoregionRetrieveResponse,
  GeoregionAutocompleteRetrieveResponse,
  GeoregionReconciliationRetrieveResponse,
  GeoregionReconciliationCreateResponse,
  GeoregionReconciliationFlyoutRetrieveResponse,
  GeoregionReconciliationFlyoutCreateResponse,
  GeoregionReconciliationProposePropertiesRetrieveResponse,
  GeoregionReconciliationProposePropertiesCreateResponse,
  GeoregionReconciliationSuggestServiceRetrieveResponse,
  GeoregionReconciliationSuggestServiceCreateResponse,
  JurisdictionListResponse,
  JurisdictionRetrieveResponse,
  LawListResponse,
  LawRetrieveResponse,
  LawAutocompleteRetrieveResponse,
  MessageListResponse,
  MessageRetrieveResponse,
  MessagePartialUpdateResponse,
  MessageUpdateResponse,
  MessagePublishCreateResponse,
  PageannotationListResponse,
  PageannotationRetrieveResponse,
  ProblemreportListResponse,
  ProblemreportRetrieveResponse,
  ProblemreportClaimCreateResponse,
  ProblemreportEscalateCreateResponse,
  ProblemreportResolveCreateResponse,
  ProblemreportUnclaimCreateResponse,
  PublicbodyListResponse,
  PublicbodyRetrieveResponse,
  PublicbodyAutocompleteRetrieveResponse,
  PublicbodyReconciliationRetrieveResponse,
  PublicbodyReconciliationCreateResponse,
  PublicbodyReconciliationFlyoutRetrieveResponse,
  PublicbodyReconciliationFlyoutCreateResponse,
  PublicbodyReconciliationProposePropertiesRetrieveResponse,
  PublicbodyReconciliationProposePropertiesCreateResponse,
  PublicbodyReconciliationSuggestServiceRetrieveResponse,
  PublicbodyReconciliationSuggestServiceCreateResponse,
  PublicbodySearchRetrieveResponse,
  RequestListResponse,
  RequestRetrieveResponse,
  RequestPartialUpdateResponse,
  RequestUpdateResponse,
  RequestSearchRetrieveResponse,
  RequestTagsAutocompleteRetrieveResponse,
  UploadCreateResponse,
  UploadPartialUpdateResponse,
  UploadUpdateResponse
} from './types.gen'

const documentSchemaResponseTransformer = (data: any) => {
  if (data.published_at) {
    data.published_at = new Date(data.published_at)
  }
  if (data.file_size) {
    data.file_size = BigInt(data.file_size.toString())
  }
  return data
}

const foiAttachmentSchemaResponseTransformer = (data: any) => {
  data.document = documentSchemaResponseTransformer(data.document)
  return data
}

const paginatedFoiAttachmentListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return foiAttachmentSchemaResponseTransformer(item)
  })
  return data
}

export const attachmentListResponseTransformer = async (
  data: any
): Promise<AttachmentListResponse> => {
  data = paginatedFoiAttachmentListSchemaResponseTransformer(data)
  return data
}

export const attachmentCreateResponseTransformer = async (
  data: any
): Promise<AttachmentCreateResponse> => {
  data = foiAttachmentSchemaResponseTransformer(data)
  return data
}

export const attachmentRetrieveResponseTransformer = async (
  data: any
): Promise<AttachmentRetrieveResponse> => {
  data = foiAttachmentSchemaResponseTransformer(data)
  return data
}

export const attachmentApproveCreateResponseTransformer = async (
  data: any
): Promise<AttachmentApproveCreateResponse> => {
  data = foiAttachmentSchemaResponseTransformer(data)
  return data
}

export const attachmentToDocumentCreateResponseTransformer = async (
  data: any
): Promise<AttachmentToDocumentCreateResponse> => {
  data = documentSchemaResponseTransformer(data)
  return data
}

export const attachmentUnapproveCreateResponseTransformer = async (
  data: any
): Promise<AttachmentUnapproveCreateResponse> => {
  data = foiAttachmentSchemaResponseTransformer(data)
  return data
}

export const convertImagesToPdfResponseTransformer = async (
  data: any
): Promise<ConvertImagesToPdfResponse> => {
  data = foiAttachmentSchemaResponseTransformer(data)
  return data
}

const campaignSchemaResponseTransformer = (data: any) => {
  if (data.start_date) {
    data.start_date = new Date(data.start_date)
  }
  return data
}

const paginatedCampaignListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return campaignSchemaResponseTransformer(item)
  })
  return data
}

export const campaignListResponseTransformer = async (
  data: any
): Promise<CampaignListResponse> => {
  data = paginatedCampaignListSchemaResponseTransformer(data)
  return data
}

export const campaignRetrieveResponseTransformer = async (
  data: any
): Promise<CampaignRetrieveResponse> => {
  data = campaignSchemaResponseTransformer(data)
  return data
}

const paginatedDocumentListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return documentSchemaResponseTransformer(item)
  })
  return data
}

export const documentListResponseTransformer = async (
  data: any
): Promise<DocumentListResponse> => {
  data = paginatedDocumentListSchemaResponseTransformer(data)
  return data
}

const documentDetailSchemaResponseTransformer = (data: any) => {
  if (data.published_at) {
    data.published_at = new Date(data.published_at)
  }
  if (data.file_size) {
    data.file_size = BigInt(data.file_size.toString())
  }
  return data
}

export const documentRetrieveResponseTransformer = async (
  data: any
): Promise<DocumentRetrieveResponse> => {
  data = documentDetailSchemaResponseTransformer(data)
  return data
}

export const documentPartialUpdateResponseTransformer = async (
  data: any
): Promise<DocumentPartialUpdateResponse> => {
  data = documentSchemaResponseTransformer(data)
  return data
}

export const documentOembedRetrieveResponseTransformer = async (
  data: any
): Promise<DocumentOembedRetrieveResponse> => {
  data = documentSchemaResponseTransformer(data)
  return data
}

const documentCollectionSchemaResponseTransformer = (data: any) => {
  if (data.created_at) {
    data.created_at = new Date(data.created_at)
  }
  if (data.updated_at) {
    data.updated_at = new Date(data.updated_at)
  }
  return data
}

const paginatedDocumentCollectionListSchemaResponseTransformer = (
  data: any
) => {
  data.results = data.results.map((item: any) => {
    return documentCollectionSchemaResponseTransformer(item)
  })
  return data
}

export const documentcollectionListResponseTransformer = async (
  data: any
): Promise<DocumentcollectionListResponse> => {
  data = paginatedDocumentCollectionListSchemaResponseTransformer(data)
  return data
}

export const documentcollectionRetrieveResponseTransformer = async (
  data: any
): Promise<DocumentcollectionRetrieveResponse> => {
  data = documentCollectionSchemaResponseTransformer(data)
  return data
}

export const documentcollectionOembedRetrieveResponseTransformer = async (
  data: any
): Promise<DocumentcollectionOembedRetrieveResponse> => {
  data = documentCollectionSchemaResponseTransformer(data)
  return data
}

const foiRequestFollowSchemaResponseTransformer = (data: any) => {
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  return data
}

const paginatedFoiRequestFollowListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return foiRequestFollowSchemaResponseTransformer(item)
  })
  return data
}

export const followingListResponseTransformer = async (
  data: any
): Promise<FollowingListResponse> => {
  data = paginatedFoiRequestFollowListSchemaResponseTransformer(data)
  return data
}

const geoRegionSchemaResponseTransformer = (data: any) => {
  if (data.valid_on) {
    data.valid_on = new Date(data.valid_on)
  }
  return data
}

const paginatedGeoRegionListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return geoRegionSchemaResponseTransformer(item)
  })
  return data
}

export const georegionListResponseTransformer = async (
  data: any
): Promise<GeoregionListResponse> => {
  data = paginatedGeoRegionListSchemaResponseTransformer(data)
  return data
}

const geoRegionDetailSchemaResponseTransformer = (data: any) => {
  if (data.valid_on) {
    data.valid_on = new Date(data.valid_on)
  }
  return data
}

export const georegionRetrieveResponseTransformer = async (
  data: any
): Promise<GeoregionRetrieveResponse> => {
  data = geoRegionDetailSchemaResponseTransformer(data)
  return data
}

export const georegionAutocompleteRetrieveResponseTransformer = async (
  data: any
): Promise<GeoregionAutocompleteRetrieveResponse> => {
  data = geoRegionSchemaResponseTransformer(data)
  return data
}

export const georegionReconciliationRetrieveResponseTransformer = async (
  data: any
): Promise<GeoregionReconciliationRetrieveResponse> => {
  data = geoRegionSchemaResponseTransformer(data)
  return data
}

export const georegionReconciliationCreateResponseTransformer = async (
  data: any
): Promise<GeoregionReconciliationCreateResponse> => {
  data = geoRegionSchemaResponseTransformer(data)
  return data
}

export const georegionReconciliationFlyoutRetrieveResponseTransformer = async (
  data: any
): Promise<GeoregionReconciliationFlyoutRetrieveResponse> => {
  data = geoRegionSchemaResponseTransformer(data)
  return data
}

export const georegionReconciliationFlyoutCreateResponseTransformer = async (
  data: any
): Promise<GeoregionReconciliationFlyoutCreateResponse> => {
  data = geoRegionSchemaResponseTransformer(data)
  return data
}

export const georegionReconciliationProposePropertiesRetrieveResponseTransformer =
  async (
    data: any
  ): Promise<GeoregionReconciliationProposePropertiesRetrieveResponse> => {
    data = geoRegionSchemaResponseTransformer(data)
    return data
  }

export const georegionReconciliationProposePropertiesCreateResponseTransformer =
  async (
    data: any
  ): Promise<GeoregionReconciliationProposePropertiesCreateResponse> => {
    data = geoRegionSchemaResponseTransformer(data)
    return data
  }

export const georegionReconciliationSuggestServiceRetrieveResponseTransformer =
  async (
    data: any
  ): Promise<GeoregionReconciliationSuggestServiceRetrieveResponse> => {
    data = geoRegionSchemaResponseTransformer(data)
    return data
  }

export const georegionReconciliationSuggestServiceCreateResponseTransformer =
  async (
    data: any
  ): Promise<GeoregionReconciliationSuggestServiceCreateResponse> => {
    data = geoRegionSchemaResponseTransformer(data)
    return data
  }

const jurisdictionSchemaResponseTransformer = (data: any) => {
  data.last_modified_at = new Date(data.last_modified_at)
  return data
}

const paginatedJurisdictionListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return jurisdictionSchemaResponseTransformer(item)
  })
  return data
}

export const jurisdictionListResponseTransformer = async (
  data: any
): Promise<JurisdictionListResponse> => {
  data = paginatedJurisdictionListSchemaResponseTransformer(data)
  return data
}

export const jurisdictionRetrieveResponseTransformer = async (
  data: any
): Promise<JurisdictionRetrieveResponse> => {
  data = jurisdictionSchemaResponseTransformer(data)
  return data
}

const foiLawSchemaResponseTransformer = (data: any) => {
  if (data.created) {
    data.created = new Date(data.created)
  }
  return data
}

const paginatedFoiLawListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return foiLawSchemaResponseTransformer(item)
  })
  return data
}

export const lawListResponseTransformer = async (
  data: any
): Promise<LawListResponse> => {
  data = paginatedFoiLawListSchemaResponseTransformer(data)
  return data
}

export const lawRetrieveResponseTransformer = async (
  data: any
): Promise<LawRetrieveResponse> => {
  data = foiLawSchemaResponseTransformer(data)
  return data
}

export const lawAutocompleteRetrieveResponseTransformer = async (
  data: any
): Promise<LawAutocompleteRetrieveResponse> => {
  data = foiLawSchemaResponseTransformer(data)
  return data
}

const foiMessageSchemaResponseTransformer = (data: any) => {
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  if (data.registered_mail_date) {
    data.registered_mail_date = new Date(data.registered_mail_date)
  }
  data.last_modified_at = new Date(data.last_modified_at)
  return data
}

const paginatedFoiMessageListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return foiMessageSchemaResponseTransformer(item)
  })
  return data
}

export const messageListResponseTransformer = async (
  data: any
): Promise<MessageListResponse> => {
  data = paginatedFoiMessageListSchemaResponseTransformer(data)
  return data
}

export const messageRetrieveResponseTransformer = async (
  data: any
): Promise<MessageRetrieveResponse> => {
  data = foiMessageSchemaResponseTransformer(data)
  return data
}

export const messagePartialUpdateResponseTransformer = async (
  data: any
): Promise<MessagePartialUpdateResponse> => {
  data = foiMessageSchemaResponseTransformer(data)
  return data
}

export const messageUpdateResponseTransformer = async (
  data: any
): Promise<MessageUpdateResponse> => {
  data = foiMessageSchemaResponseTransformer(data)
  return data
}

export const messagePublishCreateResponseTransformer = async (
  data: any
): Promise<MessagePublishCreateResponse> => {
  data = foiMessageSchemaResponseTransformer(data)
  return data
}

const pageAnnotationSchemaResponseTransformer = (data: any) => {
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  return data
}

const paginatedPageAnnotationListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return pageAnnotationSchemaResponseTransformer(item)
  })
  return data
}

export const pageannotationListResponseTransformer = async (
  data: any
): Promise<PageannotationListResponse> => {
  data = paginatedPageAnnotationListSchemaResponseTransformer(data)
  return data
}

export const pageannotationRetrieveResponseTransformer = async (
  data: any
): Promise<PageannotationRetrieveResponse> => {
  data = pageAnnotationSchemaResponseTransformer(data)
  return data
}

const problemReportSchemaResponseTransformer = (data: any) => {
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  if (data.resolution_timestamp) {
    data.resolution_timestamp = new Date(data.resolution_timestamp)
  }
  if (data.claimed) {
    data.claimed = new Date(data.claimed)
  }
  if (data.escalated) {
    data.escalated = new Date(data.escalated)
  }
  return data
}

const paginatedProblemReportListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return problemReportSchemaResponseTransformer(item)
  })
  return data
}

export const problemreportListResponseTransformer = async (
  data: any
): Promise<ProblemreportListResponse> => {
  data = paginatedProblemReportListSchemaResponseTransformer(data)
  return data
}

export const problemreportRetrieveResponseTransformer = async (
  data: any
): Promise<ProblemreportRetrieveResponse> => {
  data = problemReportSchemaResponseTransformer(data)
  return data
}

export const problemreportClaimCreateResponseTransformer = async (
  data: any
): Promise<ProblemreportClaimCreateResponse> => {
  data = problemReportSchemaResponseTransformer(data)
  return data
}

export const problemreportEscalateCreateResponseTransformer = async (
  data: any
): Promise<ProblemreportEscalateCreateResponse> => {
  data = problemReportSchemaResponseTransformer(data)
  return data
}

export const problemreportResolveCreateResponseTransformer = async (
  data: any
): Promise<ProblemreportResolveCreateResponse> => {
  data = problemReportSchemaResponseTransformer(data)
  return data
}

export const problemreportUnclaimCreateResponseTransformer = async (
  data: any
): Promise<ProblemreportUnclaimCreateResponse> => {
  data = problemReportSchemaResponseTransformer(data)
  return data
}

const publicBodyListSchemaResponseTransformer = (data: any) => {
  data.jurisdiction = jurisdictionSchemaResponseTransformer(data.jurisdiction)
  return data
}

const paginatedPublicBodyListListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return publicBodyListSchemaResponseTransformer(item)
  })
  return data
}

export const publicbodyListResponseTransformer = async (
  data: any
): Promise<PublicbodyListResponse> => {
  data = paginatedPublicBodyListListSchemaResponseTransformer(data)
  return data
}

const publicBodySchemaResponseTransformer = (data: any) => {
  data.jurisdiction = jurisdictionSchemaResponseTransformer(data.jurisdiction)
  data.laws = data.laws.map((item: any) => {
    return foiLawSchemaResponseTransformer(item)
  })
  return data
}

export const publicbodyRetrieveResponseTransformer = async (
  data: any
): Promise<PublicbodyRetrieveResponse> => {
  data = publicBodySchemaResponseTransformer(data)
  return data
}

export const publicbodyAutocompleteRetrieveResponseTransformer = async (
  data: any
): Promise<PublicbodyAutocompleteRetrieveResponse> => {
  data = publicBodyListSchemaResponseTransformer(data)
  return data
}

export const publicbodyReconciliationRetrieveResponseTransformer = async (
  data: any
): Promise<PublicbodyReconciliationRetrieveResponse> => {
  data = publicBodyListSchemaResponseTransformer(data)
  return data
}

export const publicbodyReconciliationCreateResponseTransformer = async (
  data: any
): Promise<PublicbodyReconciliationCreateResponse> => {
  data = publicBodyListSchemaResponseTransformer(data)
  return data
}

export const publicbodyReconciliationFlyoutRetrieveResponseTransformer = async (
  data: any
): Promise<PublicbodyReconciliationFlyoutRetrieveResponse> => {
  data = publicBodyListSchemaResponseTransformer(data)
  return data
}

export const publicbodyReconciliationFlyoutCreateResponseTransformer = async (
  data: any
): Promise<PublicbodyReconciliationFlyoutCreateResponse> => {
  data = publicBodyListSchemaResponseTransformer(data)
  return data
}

export const publicbodyReconciliationProposePropertiesRetrieveResponseTransformer =
  async (
    data: any
  ): Promise<PublicbodyReconciliationProposePropertiesRetrieveResponse> => {
    data = publicBodyListSchemaResponseTransformer(data)
    return data
  }

export const publicbodyReconciliationProposePropertiesCreateResponseTransformer =
  async (
    data: any
  ): Promise<PublicbodyReconciliationProposePropertiesCreateResponse> => {
    data = publicBodyListSchemaResponseTransformer(data)
    return data
  }

export const publicbodyReconciliationSuggestServiceRetrieveResponseTransformer =
  async (
    data: any
  ): Promise<PublicbodyReconciliationSuggestServiceRetrieveResponse> => {
    data = publicBodyListSchemaResponseTransformer(data)
    return data
  }

export const publicbodyReconciliationSuggestServiceCreateResponseTransformer =
  async (
    data: any
  ): Promise<PublicbodyReconciliationSuggestServiceCreateResponse> => {
    data = publicBodyListSchemaResponseTransformer(data)
    return data
  }

export const publicbodySearchRetrieveResponseTransformer = async (
  data: any
): Promise<PublicbodySearchRetrieveResponse> => {
  data = publicBodyListSchemaResponseTransformer(data)
  return data
}

const foiRequestListSchemaResponseTransformer = (data: any) => {
  if (data.due_date) {
    data.due_date = new Date(data.due_date)
  }
  if (data.resolved_on) {
    data.resolved_on = new Date(data.resolved_on)
  }
  if (data.last_message) {
    data.last_message = new Date(data.last_message)
  }
  if (data.created_at) {
    data.created_at = new Date(data.created_at)
  }
  data.last_modified_at = new Date(data.last_modified_at)
  return data
}

const paginatedFoiRequestListListSchemaResponseTransformer = (data: any) => {
  data.results = data.results.map((item: any) => {
    return foiRequestListSchemaResponseTransformer(item)
  })
  return data
}

export const requestListResponseTransformer = async (
  data: any
): Promise<RequestListResponse> => {
  data = paginatedFoiRequestListListSchemaResponseTransformer(data)
  return data
}

const foiRequestDetailSchemaResponseTransformer = (data: any) => {
  data.law = foiLawSchemaResponseTransformer(data.law)
  if (data.due_date) {
    data.due_date = new Date(data.due_date)
  }
  if (data.resolved_on) {
    data.resolved_on = new Date(data.resolved_on)
  }
  if (data.last_message) {
    data.last_message = new Date(data.last_message)
  }
  if (data.created_at) {
    data.created_at = new Date(data.created_at)
  }
  data.last_modified_at = new Date(data.last_modified_at)
  data.public_body = publicBodySchemaResponseTransformer(data.public_body)
  return data
}

export const requestRetrieveResponseTransformer = async (
  data: any
): Promise<RequestRetrieveResponse> => {
  data = foiRequestDetailSchemaResponseTransformer(data)
  return data
}

export const requestPartialUpdateResponseTransformer = async (
  data: any
): Promise<RequestPartialUpdateResponse> => {
  data = foiRequestListSchemaResponseTransformer(data)
  return data
}

export const requestUpdateResponseTransformer = async (
  data: any
): Promise<RequestUpdateResponse> => {
  data = foiRequestListSchemaResponseTransformer(data)
  return data
}

export const requestSearchRetrieveResponseTransformer = async (
  data: any
): Promise<RequestSearchRetrieveResponse> => {
  data = foiRequestListSchemaResponseTransformer(data)
  return data
}

export const requestTagsAutocompleteRetrieveResponseTransformer = async (
  data: any
): Promise<RequestTagsAutocompleteRetrieveResponse> => {
  data = foiRequestListSchemaResponseTransformer(data)
  return data
}

const uploadCreateSchemaResponseTransformer = (data: any) => {
  if (data.upload_offset) {
    data.upload_offset = BigInt(data.upload_offset.toString())
  }
  if (data.upload_length) {
    data.upload_length = BigInt(data.upload_length.toString())
  }
  if (data.expires) {
    data.expires = new Date(data.expires)
  }
  return data
}

export const uploadCreateResponseTransformer = async (
  data: any
): Promise<UploadCreateResponse> => {
  data = uploadCreateSchemaResponseTransformer(data)
  return data
}

const uploadSchemaResponseTransformer = (data: any) => {
  if (data.upload_offset) {
    data.upload_offset = BigInt(data.upload_offset.toString())
  }
  if (data.upload_length) {
    data.upload_length = BigInt(data.upload_length.toString())
  }
  if (data.expires) {
    data.expires = new Date(data.expires)
  }
  return data
}

export const uploadPartialUpdateResponseTransformer = async (
  data: any
): Promise<UploadPartialUpdateResponse> => {
  data = uploadSchemaResponseTransformer(data)
  return data
}

export const uploadUpdateResponseTransformer = async (
  data: any
): Promise<UploadUpdateResponse> => {
  data = uploadSchemaResponseTransformer(data)
  return data
}
