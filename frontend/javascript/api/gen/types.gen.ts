// This file is auto-generated by @hey-api/openapi-ts

export type Campaign = {
  readonly resource_uri?: string
  readonly id?: number
  name: string
  slug: string
  url?: string
  description?: string
  start_date?: Date | null
  active?: boolean
}

export type Category = {
  readonly id?: number
  name: string
  slug: string
  is_topic?: boolean
  depth: number
  readonly parent?: string
  readonly children?: Array<string>
}

export type Classification = {
  readonly id?: number
  name: string
  slug: string
  depth: number
  readonly parent?: string
  readonly children?: Array<string>
}

export type CreateFoiRequestFollow = {
  request: number
}

export type CreatePageAnnotation = {
  document: number
  page_number: number
  title: string
  description: string
  top?: number | null
  left?: number | null
  width?: number | null
  height?: number | null
}

export type Document = {
  readonly resource_uri?: string
  readonly id?: number
  readonly site_url?: string
  title?: string
  slug?: string
  description?: string
  published_at?: Date | null
  num_pages?: number
  public?: boolean
  listed?: boolean
  allow_annotation?: boolean
  pending?: boolean
  readonly file_url?: string
  file_size?: number | null
  cover_image: string
  page_template: string
  outline?: string
  properties?: {
    [key: string]: unknown
  }
  readonly uid?: string
  data?: {
    [key: string]: unknown
  }
  readonly pages_uri?: string
}

export type DocumentCollection = {
  readonly resource_uri?: string
  readonly id?: number
  readonly site_url?: string
  title?: string
  description?: string
  public?: boolean
  listed?: boolean
  created_at?: Date | null
  updated_at?: Date | null
  readonly document_count?: string
  readonly document_directory_count?: string
  readonly uid?: string
  cover_image: string
  readonly directories?: string
  readonly documents?: string
  readonly documents_uri?: string
  readonly pages_uri?: string
  settings?: {
    [key: string]: unknown
  }
  readonly zip_download_url?: string
}

export type DocumentDetail = {
  readonly resource_uri?: string
  readonly id?: number
  readonly site_url?: string
  title?: string
  slug?: string
  description?: string
  published_at?: Date | null
  num_pages?: number
  public?: boolean
  listed?: boolean
  allow_annotation?: boolean
  pending?: boolean
  readonly file_url?: string
  file_size?: number | null
  cover_image: string
  page_template: string
  outline?: string
  properties?: {
    [key: string]: unknown
  }
  readonly uid?: string
  data?: {
    [key: string]: unknown
  }
  readonly pages_uri?: string
  readonly original?: string
  readonly foirequest?: string
  readonly publicbody?: string
  readonly last_modified_at?: string
  readonly pages?: string
}

export type FoiAttachment = {
  readonly resource_uri?: string
  readonly id?: number
  readonly belongs_to?: string
  name: string
  filetype?: string
  size?: number | null
  readonly site_url?: string
  readonly anchor_url?: string
  readonly file_url?: string
  pending?: boolean
  is_converted?: boolean
  readonly converted?: string
  approved?: boolean
  can_approve?: boolean
  readonly redacted?: string
  is_redacted?: boolean
  readonly can_redact?: string
  readonly can_delete?: string
  readonly is_pdf?: string
  readonly is_image?: string
  readonly is_irrelevant?: string
  document: {
    readonly resource_uri?: string
    readonly id?: number
    readonly site_url?: string
    title?: string
    slug?: string
    description?: string
    published_at?: Date | null
    num_pages?: number
    public?: boolean
    listed?: boolean
    allow_annotation?: boolean
    pending?: boolean
    readonly file_url?: string
    file_size?: number | null
    cover_image: string
    page_template: string
    outline?: string
    properties?: {
      [key: string]: unknown
    }
    readonly uid?: string
    data?: {
      [key: string]: unknown
    }
    readonly pages_uri?: string
    readonly original?: string
    readonly foirequest?: string
    readonly publicbody?: string
    readonly last_modified_at?: string
  }
}

export type FoiAttachmentTus = {
  message: string
  upload: string
}

export type FoiLaw = {
  readonly resource_uri?: string
  readonly id?: number
  readonly name?: string
  readonly slug?: string
  readonly description?: string
  readonly long_description?: string
  law_type?: string
  created?: Date | null
  readonly request_note?: string
  readonly request_note_html?: string
  meta?: boolean
  readonly site_url?: string
  readonly jurisdiction?: string
  email_only?: boolean
  readonly mediator?: string
  priority?: number
  url?: string
  max_response_time?: number | null
  requires_signature?: boolean
  max_response_time_unit?: 'day' | 'working_day' | 'month_de'
  readonly letter_start?: string
  readonly letter_end?: string
  last_modified_at: string
  readonly refusal_reasons?: string
  readonly combined?: Array<string>
}

export type max_response_time_unit = 'day' | 'working_day' | 'month_de'

export const max_response_time_unit = {
  DAY: 'day',
  WORKING_DAY: 'working_day',
  MONTH_DE: 'month_de'
} as const

export type FoiMessage = {
  readonly resource_uri?: string
  readonly id?: number
  readonly url?: string
  request: string
  sent?: boolean
  is_response?: boolean
  readonly is_postal?: string
  readonly is_draft?: boolean
  kind?: 'email' | 'post' | 'fax' | 'upload' | 'phone' | 'visit' | 'import'
  is_escalation?: boolean
  content_hidden?: boolean
  readonly sender_public_body?: string
  readonly recipient_public_body?: string
  status?:
    | 'awaiting_user_confirmation'
    | 'publicbody_needed'
    | 'awaiting_publicbody_confirmation'
    | 'awaiting_response'
    | 'awaiting_classification'
    | 'asleep'
    | 'resolved'
  timestamp?: Date
  redacted?: boolean
  readonly not_publishable?: boolean
  readonly attachments?: string
  readonly subject?: string
  readonly content?: string
  readonly redacted_subject?: string
  readonly redacted_content?: string
  readonly sender?: string
  readonly status_name?: string
  readonly last_modified_at?: Date
}

export type kind =
  | 'email'
  | 'post'
  | 'fax'
  | 'upload'
  | 'phone'
  | 'visit'
  | 'import'

export const kind = {
  EMAIL: 'email',
  POST: 'post',
  FAX: 'fax',
  UPLOAD: 'upload',
  PHONE: 'phone',
  VISIT: 'visit',
  IMPORT: 'import'
} as const

export type status =
  | 'awaiting_user_confirmation'
  | 'publicbody_needed'
  | 'awaiting_publicbody_confirmation'
  | 'awaiting_response'
  | 'awaiting_classification'
  | 'asleep'
  | 'resolved'

export const status = {
  AWAITING_USER_CONFIRMATION: 'awaiting_user_confirmation',
  PUBLICBODY_NEEDED: 'publicbody_needed',
  AWAITING_PUBLICBODY_CONFIRMATION: 'awaiting_publicbody_confirmation',
  AWAITING_RESPONSE: 'awaiting_response',
  AWAITING_CLASSIFICATION: 'awaiting_classification',
  ASLEEP: 'asleep',
  RESOLVED: 'resolved'
} as const

export type FoiMessageDraft = {
  readonly resource_uri?: string
  readonly id?: number
  readonly url?: string
  request: string
  sent?: boolean
  is_response?: boolean
  readonly is_postal?: string
  readonly is_draft?: boolean
  kind?: 'email' | 'post' | 'fax' | 'upload' | 'phone' | 'visit' | 'import'
  is_escalation?: boolean
  content_hidden?: boolean
  readonly sender_public_body?: string
  readonly recipient_public_body?: string
  status?:
    | 'awaiting_user_confirmation'
    | 'publicbody_needed'
    | 'awaiting_publicbody_confirmation'
    | 'awaiting_response'
    | 'awaiting_classification'
    | 'asleep'
    | 'resolved'
  timestamp?: Date
  redacted?: boolean
  readonly not_publishable?: boolean
  readonly attachments?: string
  readonly subject?: string
  readonly content?: string
  readonly redacted_subject?: string
  readonly redacted_content?: string
  readonly sender?: string
  readonly status_name?: string
  readonly last_modified_at?: Date
}

export type FoiRequestDetail = {
  readonly resource_uri?: string
  readonly id?: number
  readonly url?: string
  readonly jurisdiction?: string
  is_foi?: boolean
  checked?: boolean
  refusal_reason?: string
  readonly costs?: string
  public?: boolean
  readonly law?: {
    readonly resource_uri?: string
    readonly id?: number
    readonly name?: string
    readonly slug?: string
    readonly description?: string
    readonly long_description?: string
    law_type?: string
    created?: Date | null
    readonly request_note?: string
    readonly request_note_html?: string
    meta?: boolean
    readonly site_url?: string
    readonly jurisdiction?: string
    email_only?: boolean
    readonly mediator?: string
    priority?: number
    url?: string
    max_response_time?: number | null
    requires_signature?: boolean
    max_response_time_unit?: 'day' | 'working_day' | 'month_de'
    readonly letter_start?: string
    readonly letter_end?: string
    last_modified_at: string
    readonly refusal_reasons?: string
    readonly combined?: Array<string>
  }
  description: string
  readonly redacted_description?: string
  summary?: string
  same_as_count?: number
  readonly same_as?: string
  due_date?: Date | null
  resolved_on?: Date | null
  last_message?: Date | null
  created_at?: Date | null
  readonly last_modified_at?: Date
  status:
    | 'awaiting_user_confirmation'
    | 'publicbody_needed'
    | 'awaiting_publicbody_confirmation'
    | 'awaiting_response'
    | 'awaiting_classification'
    | 'asleep'
    | 'resolved'
  readonly public_body?: {
    readonly resource_uri?: string
    id: number
    name: string
    slug: string
    other_names?: string
    description?: string
    url?: string | null
    readonly parent?: string
    readonly root?: string
    depth?: number
    readonly classification?: {
      readonly id?: number
      name: string
      slug: string
      depth: number
    }
    readonly categories?: Array<{
      readonly id?: number
      name: string
      slug: string
      is_topic?: boolean
      depth: number
    }>
    email?: string
    contact?: string
    address?: string
    fax?: string
    request_note?: string
    number_of_requests?: number
    site_url: string
    readonly request_note_html?: string
    readonly jurisdiction?: {
      readonly resource_uri?: string
      readonly id?: number
      name: string
      rank?: number
      description?: string
      slug: string
      site_url: string
      readonly region?: string
      readonly last_modified_at?: Date
    }
    readonly laws?: Array<{
      readonly resource_uri?: string
      readonly id?: number
      readonly name?: string
      readonly slug?: string
      readonly description?: string
      readonly long_description?: string
      law_type?: string
      created?: Date | null
      readonly request_note?: string
      readonly request_note_html?: string
      meta?: boolean
      readonly site_url?: string
      readonly jurisdiction?: string
      email_only?: boolean
      readonly mediator?: string
      priority?: number
      url?: string
      max_response_time?: number | null
      requires_signature?: boolean
      max_response_time_unit?: 'day' | 'working_day' | 'month_de'
      readonly letter_start?: string
      readonly letter_end?: string
      last_modified_at: string
      readonly refusal_reasons?: string
      readonly combined?: Array<string>
    }>
    readonly regions?: Array<string>
    source_reference?: string
    alternative_emails?: {
      [key: string]: unknown
    } | null
    wikidata_item?: string
    extra_data?: {
      [key: string]: unknown
    }
    readonly geo?: string
  }
  resolution?:
    | 'successful'
    | 'partially_successful'
    | 'not_held'
    | 'refused'
    | 'user_withdrew_costs'
    | 'user_withdrew'
  slug: string
  title: string
  reference?: string
  readonly user?: string
  readonly project?: string
  readonly campaign?: string
  tags: string
  readonly messages?: string
}

export type resolution =
  | 'successful'
  | 'partially_successful'
  | 'not_held'
  | 'refused'
  | 'user_withdrew_costs'
  | 'user_withdrew'

export const resolution = {
  SUCCESSFUL: 'successful',
  PARTIALLY_SUCCESSFUL: 'partially_successful',
  NOT_HELD: 'not_held',
  REFUSED: 'refused',
  USER_WITHDREW_COSTS: 'user_withdrew_costs',
  USER_WITHDREW: 'user_withdrew'
} as const

export type FoiRequestFollow = {
  readonly resource_uri?: string
  readonly request?: string
  readonly request_url?: string
  timestamp?: Date
  readonly follow_count?: number
  readonly follows?: boolean
  readonly can_follow?: boolean
}

export type FoiRequestList = {
  readonly resource_uri?: string
  readonly id?: number
  readonly url?: string
  readonly jurisdiction?: string
  is_foi?: boolean
  checked?: boolean
  refusal_reason?: string
  readonly costs?: string
  public?: boolean
  readonly law?: string
  description: string
  readonly redacted_description?: string
  summary?: string
  same_as_count?: number
  readonly same_as?: string
  due_date?: Date | null
  resolved_on?: Date | null
  last_message?: Date | null
  created_at?: Date | null
  readonly last_modified_at?: Date
  status:
    | 'awaiting_user_confirmation'
    | 'publicbody_needed'
    | 'awaiting_publicbody_confirmation'
    | 'awaiting_response'
    | 'awaiting_classification'
    | 'asleep'
    | 'resolved'
  readonly public_body?: {
    readonly resource_uri?: string
    id: number
    name: string
    slug: string
    other_names?: string
    description?: string
    url?: string | null
    depth?: number
    readonly classification?: string
    email?: string
    contact?: string
    address?: string
    fax?: string
    request_note?: string
    number_of_requests?: number
    site_url: string
    readonly jurisdiction?: string
    readonly request_note_html?: string
    readonly geo?: string
    last_modified_at: string
  }
  resolution?:
    | 'successful'
    | 'partially_successful'
    | 'not_held'
    | 'refused'
    | 'user_withdrew_costs'
    | 'user_withdrew'
  slug: string
  title: string
  reference?: string
  readonly user?: string
  readonly project?: string
  readonly campaign?: string
  tags: string
}

export type GeoRegion = {
  readonly resource_uri?: string
  readonly id?: number
  name: string
  slug: string
  kind:
    | 'country'
    | 'state'
    | 'admin_district'
    | 'district'
    | 'admin_cooperation'
    | 'municipality'
    | 'borough'
    | 'zipcode'
    | 'admin_court_jurisdiction'
  kind_detail?: string
  level?: number
  region_identifier?: string
  global_identifier?: string
  area?: number
  population?: number | null
  valid_on?: Date | null
  readonly part_of?: string
  readonly centroid?: string
}

export type kind2 =
  | 'country'
  | 'state'
  | 'admin_district'
  | 'district'
  | 'admin_cooperation'
  | 'municipality'
  | 'borough'
  | 'zipcode'
  | 'admin_court_jurisdiction'

export const kind2 = {
  COUNTRY: 'country',
  STATE: 'state',
  ADMIN_DISTRICT: 'admin_district',
  DISTRICT: 'district',
  ADMIN_COOPERATION: 'admin_cooperation',
  MUNICIPALITY: 'municipality',
  BOROUGH: 'borough',
  ZIPCODE: 'zipcode',
  ADMIN_COURT_JURISDICTION: 'admin_court_jurisdiction'
} as const

export type GeoRegionDetail = {
  readonly resource_uri?: string
  readonly id?: number
  name: string
  slug: string
  kind:
    | 'country'
    | 'state'
    | 'admin_district'
    | 'district'
    | 'admin_cooperation'
    | 'municipality'
    | 'borough'
    | 'zipcode'
    | 'admin_court_jurisdiction'
  kind_detail?: string
  level?: number
  region_identifier?: string
  global_identifier?: string
  area?: number
  population?: number | null
  valid_on?: Date | null
  readonly part_of?: string
  readonly centroid?: string
  readonly geom?: string
  readonly gov_seat?: string
}

export type Jurisdiction = {
  readonly resource_uri?: string
  readonly id?: number
  name: string
  rank?: number
  description?: string
  slug: string
  site_url: string
  readonly region?: string
  readonly last_modified_at?: Date
}

export type MakeRequest = {
  publicbodies: Array<number>
  subject: string
  body: string
  full_text?: boolean
  public?: boolean
  reference?: string
  tags?: Array<string>
}

export type Page = {
  readonly document?: string
  number?: number
  content?: string
  width?: number | null
  height?: number | null
  image: string
  query_highlight: string
}

export type PageAnnotation = {
  readonly id?: number
  title?: string
  description?: string
  top?: number | null
  left?: number | null
  width?: number | null
  height?: number | null
  timestamp?: Date
  readonly can_delete?: boolean
  highlight?: string
  image?: Blob | File
  readonly document?: string
  readonly number?: number
}

export type ProblemReport = {
  readonly id?: number
  readonly message_id?: string
  kind:
    | 'message_not_delivered'
    | 'attachment_broken'
    | 'redaction_needed'
    | 'foi_help_needed'
    | 'other'
    | 'not_foi'
    | 'not_nice'
    | 'info_outdated'
    | 'info_wrong'
    | 'bounce_publicbody'
    | 'mail_inauthentic'
  readonly kind_label?: string
  readonly message_subject?: string
  readonly message_url?: string
  timestamp?: Date
  auto_submitted?: boolean
  resolved?: boolean
  description?: string
  resolution?: string
  resolution_timestamp?: Date | null
  claimed?: Date | null
  readonly related_publicbody_id?: string
  escalated?: Date | null
  readonly moderator_id?: string
  readonly is_requester?: string
}

export type kind3 =
  | 'message_not_delivered'
  | 'attachment_broken'
  | 'redaction_needed'
  | 'foi_help_needed'
  | 'other'
  | 'not_foi'
  | 'not_nice'
  | 'info_outdated'
  | 'info_wrong'
  | 'bounce_publicbody'
  | 'mail_inauthentic'

export const kind3 = {
  MESSAGE_NOT_DELIVERED: 'message_not_delivered',
  ATTACHMENT_BROKEN: 'attachment_broken',
  REDACTION_NEEDED: 'redaction_needed',
  FOI_HELP_NEEDED: 'foi_help_needed',
  OTHER: 'other',
  NOT_FOI: 'not_foi',
  NOT_NICE: 'not_nice',
  INFO_OUTDATED: 'info_outdated',
  INFO_WRONG: 'info_wrong',
  BOUNCE_PUBLICBODY: 'bounce_publicbody',
  MAIL_INAUTHENTIC: 'mail_inauthentic'
} as const

export type PublicBody = {
  readonly resource_uri?: string
  id: number
  name: string
  slug: string
  other_names?: string
  description?: string
  url?: string | null
  readonly parent?: string
  readonly root?: string
  depth?: number
  readonly classification?: {
    readonly id?: number
    name: string
    slug: string
    depth: number
  }
  readonly categories?: Array<{
    readonly id?: number
    name: string
    slug: string
    is_topic?: boolean
    depth: number
  }>
  email?: string
  contact?: string
  address?: string
  fax?: string
  request_note?: string
  number_of_requests?: number
  site_url: string
  readonly request_note_html?: string
  readonly jurisdiction?: {
    readonly resource_uri?: string
    readonly id?: number
    name: string
    rank?: number
    description?: string
    slug: string
    site_url: string
    readonly region?: string
    readonly last_modified_at?: Date
  }
  readonly laws?: Array<{
    readonly resource_uri?: string
    readonly id?: number
    readonly name?: string
    readonly slug?: string
    readonly description?: string
    readonly long_description?: string
    law_type?: string
    created?: Date | null
    readonly request_note?: string
    readonly request_note_html?: string
    meta?: boolean
    readonly site_url?: string
    readonly jurisdiction?: string
    email_only?: boolean
    readonly mediator?: string
    priority?: number
    url?: string
    max_response_time?: number | null
    requires_signature?: boolean
    max_response_time_unit?: 'day' | 'working_day' | 'month_de'
    readonly letter_start?: string
    readonly letter_end?: string
    last_modified_at: string
    readonly refusal_reasons?: string
    readonly combined?: Array<string>
  }>
  readonly regions?: Array<string>
  source_reference?: string
  alternative_emails?: {
    [key: string]: unknown
  } | null
  wikidata_item?: string
  extra_data?: {
    [key: string]: unknown
  }
  readonly geo?: string
}

export type PublicBodyList = {
  readonly resource_uri?: string
  id: number
  name: string
  slug: string
  other_names?: string
  description?: string
  url?: string | null
  readonly parent?: string
  readonly root?: string
  depth?: number
  readonly classification?: {
    readonly id?: number
    name: string
    slug: string
    depth: number
  }
  readonly categories?: Array<{
    readonly id?: number
    name: string
    slug: string
    is_topic?: boolean
    depth: number
  }>
  email?: string
  contact?: string
  address?: string
  fax?: string
  request_note?: string
  number_of_requests?: number
  site_url: string
  readonly request_note_html?: string
  readonly jurisdiction?: {
    readonly resource_uri?: string
    readonly id?: number
    name: string
    rank?: number
    description?: string
    slug: string
    site_url: string
    readonly region?: string
    readonly last_modified_at?: Date
  }
  readonly laws?: Array<string>
  readonly regions?: Array<string>
  source_reference?: string
  alternative_emails?: {
    [key: string]: unknown
  } | null
  wikidata_item?: string
  extra_data?: {
    [key: string]: unknown
  }
  readonly geo?: string
}

export type UpdateDocument = {
  title?: string
  description?: string
}

export type Upload = {
  readonly id?: number
  guid: string
  state?: string
  upload_offset?: number
  upload_length?: number
  upload_metadata?: string
  filename?: string
  temporary_file_path?: string | null
  expires?: Date | null
  token?: string | null
  user?: number | null
}

export type UploadCreate = {
  readonly id?: number
  guid?: string
  state?: string
  upload_offset?: number
  upload_length?: number
  upload_metadata?: string
  filename?: string
  temporary_file_path?: string | null
  expires?: Date | null
  token?: string | null
  user?: number | null
}

export type UserPreference = {
  value: string
}

export type ListProfilesResponse = Array<unknown>

export type ListProfilesError = unknown

export type RetrieveUserPreferenceData = {
  path: {
    key: string
  }
}

export type RetrieveUserPreferenceResponse = UserPreference

export type RetrieveUserPreferenceError = unknown

export type CreateUserPreferenceData = {
  body?: UserPreference
  path: {
    key: string
  }
}

export type CreateUserPreferenceResponse = UserPreference

export type CreateUserPreferenceError = unknown

export type UpdateUserPreferenceData = {
  body?: UserPreference
  path: {
    key: string
  }
}

export type UpdateUserPreferenceResponse = UserPreference

export type UpdateUserPreferenceError = unknown

export type PartialUpdateUserPreferenceData = {
  body?: UserPreference
  path: {
    key: string
  }
}

export type PartialUpdateUserPreferenceResponse = UserPreference

export type PartialUpdateUserPreferenceError = unknown

export type ListFoiRequestListsData = {
  query?: {
    /**
     * campaign
     */
    campaign?: string
    /**
     * categories
     */
    categories?: string
    /**
     * checked
     */
    checked?: string
    /**
     * classification
     */
    classification?: string
    /**
     * costs
     */
    costs?: string
    /**
     * created_at_after
     */
    created_at_after?: string
    /**
     * created_at_before
     */
    created_at_before?: string
    /**
     * follower
     */
    follower?: string
    /**
     * has_same
     */
    has_same?: string
    /**
     * is_foi
     */
    is_foi?: string
    /**
     * jurisdiction
     */
    jurisdiction?: string
    /**
     * law
     */
    law?: string
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * project
     */
    project?: string
    /**
     * public_body
     */
    public_body?: string
    /**
     * reference
     */
    reference?: string
    /**
     * resolution
     */
    resolution?:
      | 'successful'
      | 'partially_successful'
      | 'not_held'
      | 'refused'
      | 'user_withdrew_costs'
      | 'user_withdrew'
    /**
     * slug
     */
    slug?: string
    /**
     * status
     */
    status?:
      | 'awaiting_user_confirmation'
      | 'publicbody_needed'
      | 'awaiting_publicbody_confirmation'
      | 'awaiting_response'
      | 'awaiting_classification'
      | 'asleep'
      | 'resolved'
    /**
     * tags
     */
    tags?: string
    /**
     * user
     */
    user?: string
  }
}

export type ListFoiRequestListsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiRequestList>
}

export type ListFoiRequestListsError = unknown

export type CreateMakeRequestData = {
  body?: MakeRequest
}

export type CreateMakeRequestResponse = MakeRequest

export type CreateMakeRequestError = unknown

export type SearchFoiRequestListResponse = FoiRequestList

export type SearchFoiRequestListError = unknown

export type TagsAutocompleteFoiRequestListResponse = FoiRequestList

export type TagsAutocompleteFoiRequestListError = unknown

export type RetrieveFoiRequestDetailData = {
  path: {
    id: string
  }
  query?: {
    /**
     * campaign
     */
    campaign?: string
    /**
     * categories
     */
    categories?: string
    /**
     * checked
     */
    checked?: string
    /**
     * classification
     */
    classification?: string
    /**
     * costs
     */
    costs?: string
    /**
     * created_at_after
     */
    created_at_after?: string
    /**
     * created_at_before
     */
    created_at_before?: string
    /**
     * follower
     */
    follower?: string
    /**
     * has_same
     */
    has_same?: string
    /**
     * is_foi
     */
    is_foi?: string
    /**
     * jurisdiction
     */
    jurisdiction?: string
    /**
     * law
     */
    law?: string
    /**
     * project
     */
    project?: string
    /**
     * public_body
     */
    public_body?: string
    /**
     * reference
     */
    reference?: string
    /**
     * resolution
     */
    resolution?:
      | 'successful'
      | 'partially_successful'
      | 'not_held'
      | 'refused'
      | 'user_withdrew_costs'
      | 'user_withdrew'
    /**
     * slug
     */
    slug?: string
    /**
     * status
     */
    status?:
      | 'awaiting_user_confirmation'
      | 'publicbody_needed'
      | 'awaiting_publicbody_confirmation'
      | 'awaiting_response'
      | 'awaiting_classification'
      | 'asleep'
      | 'resolved'
    /**
     * tags
     */
    tags?: string
    /**
     * user
     */
    user?: string
  }
}

export type RetrieveFoiRequestDetailResponse = FoiRequestDetail

export type RetrieveFoiRequestDetailError = unknown

export type ListFoiMessageDraftsData = {
  query?: {
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * request
     */
    request?: string
  }
}

export type ListFoiMessageDraftsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiMessageDraft>
}

export type ListFoiMessageDraftsError = unknown

export type CreateFoiMessageDraftData = {
  body?: FoiMessageDraft
}

export type CreateFoiMessageDraftResponse = FoiMessageDraft

export type CreateFoiMessageDraftError = unknown

export type RetrieveFoiMessageDraftData = {
  path: {
    id: string
  }
  query?: {
    /**
     * request
     */
    request?: string
  }
}

export type RetrieveFoiMessageDraftResponse = FoiMessageDraft

export type RetrieveFoiMessageDraftError = unknown

export type UpdateFoiMessageDraftData = {
  body?: FoiMessageDraft
  path: {
    id: string
  }
  query?: {
    /**
     * request
     */
    request?: string
  }
}

export type UpdateFoiMessageDraftResponse = FoiMessageDraft

export type UpdateFoiMessageDraftError = unknown

export type PartialUpdateFoiMessageDraftData = {
  body?: FoiMessageDraft
  path: {
    id: string
  }
  query?: {
    /**
     * request
     */
    request?: string
  }
}

export type PartialUpdateFoiMessageDraftResponse = FoiMessageDraft

export type PartialUpdateFoiMessageDraftError = unknown

export type DestroyFoiMessageDraftData = {
  path: {
    id: string
  }
  query?: {
    /**
     * request
     */
    request?: string
  }
}

export type DestroyFoiMessageDraftResponse = void

export type DestroyFoiMessageDraftError = unknown

export type ListFoiMessagesData = {
  query?: {
    /**
     * is_response
     */
    is_response?: string
    /**
     * kind
     */
    kind?: 'email' | 'post' | 'fax' | 'upload' | 'phone' | 'visit' | 'import'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * request
     */
    request?: string
  }
}

export type ListFoiMessagesResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiMessage>
}

export type ListFoiMessagesError = unknown

export type RetrieveFoiMessageData = {
  path: {
    id: string
  }
  query?: {
    /**
     * is_response
     */
    is_response?: string
    /**
     * kind
     */
    kind?: 'email' | 'post' | 'fax' | 'upload' | 'phone' | 'visit' | 'import'
    /**
     * request
     */
    request?: string
  }
}

export type RetrieveFoiMessageResponse = FoiMessage

export type RetrieveFoiMessageError = unknown

export type ListFoiAttachmentsData = {
  query?: {
    /**
     * approved
     */
    approved?: string
    /**
     * belongs_to
     */
    belongs_to?: string
    /**
     * filetype
     */
    filetype?: string
    /**
     * is_redacted
     */
    is_redacted?: string
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * name
     */
    name?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ListFoiAttachmentsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiAttachment>
}

export type ListFoiAttachmentsError = unknown

export type CreateFoiAttachmentTusData = {
  body?: FoiAttachmentTus
}

export type CreateFoiAttachmentTusResponse = FoiAttachmentTus

export type CreateFoiAttachmentTusError = unknown

export type RetrieveFoiAttachmentData = {
  path: {
    id: string
  }
  query?: {
    /**
     * approved
     */
    approved?: string
    /**
     * belongs_to
     */
    belongs_to?: string
    /**
     * filetype
     */
    filetype?: string
    /**
     * is_redacted
     */
    is_redacted?: string
    /**
     * name
     */
    name?: string
  }
}

export type RetrieveFoiAttachmentResponse = FoiAttachment

export type RetrieveFoiAttachmentError = unknown

export type ListFoiRequestFollowsData = {
  query?: {
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ListFoiRequestFollowsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiRequestFollow>
}

export type ListFoiRequestFollowsError = unknown

export type CreateCreateFoiRequestFollowData = {
  body?: CreateFoiRequestFollow
}

export type CreateCreateFoiRequestFollowResponse = CreateFoiRequestFollow

export type CreateCreateFoiRequestFollowError = unknown

export type ListGeoRegionsData = {
  query?: {
    /**
     * ancestor
     */
    ancestor?: string
    /**
     * id
     */
    id?: string
    /**
     * kind
     */
    kind?: string
    /**
     * latlng
     */
    latlng?: string
    /**
     * level
     */
    level?: string
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * name
     */
    name?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * q
     */
    q?: string
    /**
     * region_identifier
     */
    region_identifier?: string
    /**
     * slug
     */
    slug?: string
  }
}

export type ListGeoRegionsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<GeoRegion>
}

export type ListGeoRegionsError = unknown

export type AutocompleteGeoRegionResponse = GeoRegion

export type AutocompleteGeoRegionError = unknown

export type ReconciliationGeoRegionResponse = GeoRegion

export type ReconciliationGeoRegionError = unknown

export type ReconciliationGeoRegion1Data = {
  body?: GeoRegion
}

export type ReconciliationGeoRegion1Response = GeoRegion

export type ReconciliationGeoRegion1Error = unknown

export type ReconciliationFlyoutEntityGeoRegionResponse = GeoRegion

export type ReconciliationFlyoutEntityGeoRegionError = unknown

export type ReconciliationFlyoutEntityGeoRegion1Data = {
  body?: GeoRegion
}

export type ReconciliationFlyoutEntityGeoRegion1Response = GeoRegion

export type ReconciliationFlyoutEntityGeoRegion1Error = unknown

export type ReconciliationProposePropertiesGeoRegionResponse = GeoRegion

export type ReconciliationProposePropertiesGeoRegionError = unknown

export type ReconciliationProposePropertiesGeoRegion1Data = {
  body?: GeoRegion
}

export type ReconciliationProposePropertiesGeoRegion1Response = GeoRegion

export type ReconciliationProposePropertiesGeoRegion1Error = unknown

export type ReconciliationSuggestServiceGeoRegionResponse = GeoRegion

export type ReconciliationSuggestServiceGeoRegionError = unknown

export type ReconciliationSuggestServiceGeoRegion1Data = {
  body?: GeoRegion
}

export type ReconciliationSuggestServiceGeoRegion1Response = GeoRegion

export type ReconciliationSuggestServiceGeoRegion1Error = unknown

export type RetrieveGeoRegionData = {
  path: {
    /**
     * A unique integer value identifying this Geo Region.
     */
    id: string
  }
  query?: {
    /**
     * ancestor
     */
    ancestor?: string
    /**
     * id
     */
    id?: string
    /**
     * kind
     */
    kind?: string
    /**
     * latlng
     */
    latlng?: string
    /**
     * level
     */
    level?: string
    /**
     * name
     */
    name?: string
    /**
     * q
     */
    q?: string
    /**
     * region_identifier
     */
    region_identifier?: string
    /**
     * slug
     */
    slug?: string
  }
}

export type RetrieveGeoRegionResponse = GeoRegionDetail

export type RetrieveGeoRegionError = unknown

export type ListPublicBodyListsData = {
  query?: {
    /**
     * category
     */
    category?: string
    /**
     * classification
     */
    classification?: string
    /**
     * classification_id
     */
    classification_id?: string
    /**
     * jurisdiction
     */
    jurisdiction?: string
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * lnglat
     */
    lnglat?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * q
     */
    q?: string
    /**
     * regions
     */
    regions?: string
    /**
     * slug
     */
    slug?: string
  }
}

export type ListPublicBodyListsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<PublicBodyList>
}

export type ListPublicBodyListsError = unknown

export type AutocompletePublicBodyListResponse = PublicBodyList

export type AutocompletePublicBodyListError = unknown

export type ReconciliationPublicBodyListResponse = PublicBodyList

export type ReconciliationPublicBodyListError = unknown

export type ReconciliationPublicBodyList1Data = {
  body?: PublicBodyList
}

export type ReconciliationPublicBodyList1Response = PublicBodyList

export type ReconciliationPublicBodyList1Error = unknown

export type ReconciliationFlyoutEntityPublicBodyListResponse = PublicBodyList

export type ReconciliationFlyoutEntityPublicBodyListError = unknown

export type ReconciliationFlyoutEntityPublicBodyList1Data = {
  body?: PublicBodyList
}

export type ReconciliationFlyoutEntityPublicBodyList1Response = PublicBodyList

export type ReconciliationFlyoutEntityPublicBodyList1Error = unknown

export type ReconciliationProposePropertiesPublicBodyListResponse =
  PublicBodyList

export type ReconciliationProposePropertiesPublicBodyListError = unknown

export type ReconciliationProposePropertiesPublicBodyList1Data = {
  body?: PublicBodyList
}

export type ReconciliationProposePropertiesPublicBodyList1Response =
  PublicBodyList

export type ReconciliationProposePropertiesPublicBodyList1Error = unknown

export type ReconciliationSuggestServicePublicBodyListResponse = PublicBodyList

export type ReconciliationSuggestServicePublicBodyListError = unknown

export type ReconciliationSuggestServicePublicBodyList1Data = {
  body?: PublicBodyList
}

export type ReconciliationSuggestServicePublicBodyList1Response = PublicBodyList

export type ReconciliationSuggestServicePublicBodyList1Error = unknown

export type SearchPublicBodyListResponse = PublicBodyList

export type SearchPublicBodyListError = unknown

export type RetrievePublicBodyData = {
  path: {
    id: string
  }
  query?: {
    /**
     * category
     */
    category?: string
    /**
     * classification
     */
    classification?: string
    /**
     * classification_id
     */
    classification_id?: string
    /**
     * jurisdiction
     */
    jurisdiction?: string
    /**
     * lnglat
     */
    lnglat?: string
    /**
     * q
     */
    q?: string
    /**
     * regions
     */
    regions?: string
    /**
     * slug
     */
    slug?: string
  }
}

export type RetrievePublicBodyResponse = PublicBody

export type RetrievePublicBodyError = unknown

export type ListCategoriesData = {
  query?: {
    /**
     * ancestor
     */
    ancestor?: string
    /**
     * depth
     */
    depth?: string
    /**
     * is_topic
     */
    is_topic?: string
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * name
     */
    name?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * parent
     */
    parent?: string
    /**
     * q
     */
    q?: string
  }
}

export type ListCategoriesResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Category>
}

export type ListCategoriesError = unknown

export type AutocompleteCategoryResponse = Category

export type AutocompleteCategoryError = unknown

export type RetrieveCategoryData = {
  path: {
    /**
     * A unique integer value identifying this category.
     */
    id: string
  }
  query?: {
    /**
     * ancestor
     */
    ancestor?: string
    /**
     * depth
     */
    depth?: string
    /**
     * is_topic
     */
    is_topic?: string
    /**
     * name
     */
    name?: string
    /**
     * parent
     */
    parent?: string
    /**
     * q
     */
    q?: string
  }
}

export type RetrieveCategoryResponse = Category

export type RetrieveCategoryError = unknown

export type ListClassificationsData = {
  query?: {
    /**
     * ancestor
     */
    ancestor?: string
    /**
     * depth
     */
    depth?: string
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * name
     */
    name?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * parent
     */
    parent?: string
    /**
     * q
     */
    q?: string
  }
}

export type ListClassificationsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Classification>
}

export type ListClassificationsError = unknown

export type RetrieveClassificationData = {
  path: {
    /**
     * A unique integer value identifying this Classification.
     */
    id: string
  }
  query?: {
    /**
     * ancestor
     */
    ancestor?: string
    /**
     * depth
     */
    depth?: string
    /**
     * name
     */
    name?: string
    /**
     * parent
     */
    parent?: string
    /**
     * q
     */
    q?: string
  }
}

export type RetrieveClassificationResponse = Classification

export type RetrieveClassificationError = unknown

export type ListJurisdictionsData = {
  query?: {
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ListJurisdictionsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Jurisdiction>
}

export type ListJurisdictionsError = unknown

export type RetrieveJurisdictionData = {
  path: {
    /**
     * A unique integer value identifying this Jurisdiction.
     */
    id: string
  }
}

export type RetrieveJurisdictionResponse = Jurisdiction

export type RetrieveJurisdictionError = unknown

export type ListFoiLawsData = {
  query?: {
    /**
     * id
     */
    id?: string
    /**
     * jurisdiction
     */
    jurisdiction?: string
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * mediator
     */
    mediator?: string
    /**
     * meta
     */
    meta?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * q
     */
    q?: string
  }
}

export type ListFoiLawsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiLaw>
}

export type ListFoiLawsError = unknown

export type AutocompleteFoiLawResponse = FoiLaw

export type AutocompleteFoiLawError = unknown

export type RetrieveFoiLawData = {
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Law.
     */
    id: string
  }
  query?: {
    /**
     * id
     */
    id?: string
    /**
     * jurisdiction
     */
    jurisdiction?: string
    /**
     * mediator
     */
    mediator?: string
    /**
     * meta
     */
    meta?: string
    /**
     * q
     */
    q?: string
  }
}

export type RetrieveFoiLawResponse = FoiLaw

export type RetrieveFoiLawError = unknown

export type ListDocumentsData = {
  query?: {
    /**
     * collection
     */
    collection?: string
    /**
     * created_at
     */
    created_at?: string
    /**
     * directory
     */
    directory?: string
    /**
     * foirequest
     */
    foirequest?: string
    /**
     * ids
     */
    ids?: string
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    /**
     * portal
     */
    portal?: string
    /**
     * publicbody
     */
    publicbody?: string
    /**
     * tag
     */
    tag?: string
  }
}

export type ListDocumentsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Document>
}

export type ListDocumentsError = unknown

export type OembedDocumentResponse = Document

export type OembedDocumentError = unknown

export type RetrieveDocumentDetailData = {
  path: {
    id: string
  }
  query?: {
    /**
     * collection
     */
    collection?: string
    /**
     * created_at
     */
    created_at?: string
    /**
     * directory
     */
    directory?: string
    /**
     * foirequest
     */
    foirequest?: string
    /**
     * ids
     */
    ids?: string
    /**
     * portal
     */
    portal?: string
    /**
     * publicbody
     */
    publicbody?: string
    /**
     * tag
     */
    tag?: string
  }
}

export type RetrieveDocumentDetailResponse = DocumentDetail

export type RetrieveDocumentDetailError = unknown

export type UpdateUpdateDocumentData = {
  body?: UpdateDocument
  path: {
    id: string
  }
  query?: {
    /**
     * collection
     */
    collection?: string
    /**
     * created_at
     */
    created_at?: string
    /**
     * directory
     */
    directory?: string
    /**
     * foirequest
     */
    foirequest?: string
    /**
     * ids
     */
    ids?: string
    /**
     * portal
     */
    portal?: string
    /**
     * publicbody
     */
    publicbody?: string
    /**
     * tag
     */
    tag?: string
  }
}

export type UpdateUpdateDocumentResponse = UpdateDocument

export type UpdateUpdateDocumentError = unknown

export type PartialUpdateDocumentData = {
  body?: Document
  path: {
    id: string
  }
  query?: {
    /**
     * collection
     */
    collection?: string
    /**
     * created_at
     */
    created_at?: string
    /**
     * directory
     */
    directory?: string
    /**
     * foirequest
     */
    foirequest?: string
    /**
     * ids
     */
    ids?: string
    /**
     * portal
     */
    portal?: string
    /**
     * publicbody
     */
    publicbody?: string
    /**
     * tag
     */
    tag?: string
  }
}

export type PartialUpdateDocumentResponse = Document

export type PartialUpdateDocumentError = unknown

export type ListDocumentCollectionsData = {
  query?: {
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ListDocumentCollectionsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<DocumentCollection>
}

export type ListDocumentCollectionsError = unknown

export type OembedDocumentCollectionResponse = DocumentCollection

export type OembedDocumentCollectionError = unknown

export type RetrieveDocumentCollectionData = {
  path: {
    id: string
  }
}

export type RetrieveDocumentCollectionResponse = DocumentCollection

export type RetrieveDocumentCollectionError = unknown

export type ListPagesData = {
  query?: {
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ListPagesResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Page>
}

export type ListPagesError = unknown

export type ListPageAnnotationsData = {
  query?: {
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ListPageAnnotationsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<PageAnnotation>
}

export type ListPageAnnotationsError = unknown

export type CreateCreatePageAnnotationData = {
  body?: CreatePageAnnotation
}

export type CreateCreatePageAnnotationResponse = CreatePageAnnotation

export type CreateCreatePageAnnotationError = unknown

export type RetrievePageAnnotationData = {
  path: {
    id: string
  }
}

export type RetrievePageAnnotationResponse = PageAnnotation

export type RetrievePageAnnotationError = unknown

export type DestroyPageAnnotationData = {
  path: {
    id: string
  }
}

export type DestroyPageAnnotationResponse = void

export type DestroyPageAnnotationError = unknown

export type ListProblemReportsData = {
  query?: {
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ListProblemReportsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<ProblemReport>
}

export type ListProblemReportsError = unknown

export type RetrieveProblemReportData = {
  path: {
    id: string
  }
}

export type RetrieveProblemReportResponse = ProblemReport

export type RetrieveProblemReportError = unknown

export type ListCampaignsData = {
  query?: {
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ListCampaignsResponse = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Campaign>
}

export type ListCampaignsError = unknown

export type RetrieveCampaignData = {
  path: {
    /**
     * A unique integer value identifying this campaign.
     */
    id: string
  }
}

export type RetrieveCampaignResponse = Campaign

export type RetrieveCampaignError = unknown

export type ListSpectacularSwaggersResponse = Array<unknown>

export type ListSpectacularSwaggersError = unknown

export type PublishFoiMessageDraftData = {
  body?: FoiMessageDraft
  path: {
    id: string
  }
}

export type PublishFoiMessageDraftResponse = FoiMessageDraft

export type PublishFoiMessageDraftError = unknown

export type ClaimProblemReportData = {
  body?: ProblemReport
  path: {
    id: string
  }
}

export type ClaimProblemReportResponse = ProblemReport

export type ClaimProblemReportError = unknown

export type EscalateProblemReportData = {
  body?: ProblemReport
  path: {
    id: string
  }
}

export type EscalateProblemReportResponse = ProblemReport

export type EscalateProblemReportError = unknown

export type ResolveProblemReportData = {
  body?: ProblemReport
  path: {
    id: string
  }
}

export type ResolveProblemReportResponse = ProblemReport

export type ResolveProblemReportError = unknown

export type UnclaimProblemReportData = {
  body?: ProblemReport
  path: {
    id: string
  }
}

export type UnclaimProblemReportResponse = ProblemReport

export type UnclaimProblemReportError = unknown

export type CreateUploadCreateData = {
  body?: UploadCreate
}

export type CreateUploadCreateResponse = UploadCreate

export type CreateUploadCreateError = unknown

export type UpdateUploadData = {
  body?: Upload
  path: {
    guid: string
  }
}

export type UpdateUploadResponse = Upload

export type UpdateUploadError = unknown

export type PartialUpdateUploadData = {
  body?: Upload
  path: {
    guid: string
  }
}

export type PartialUpdateUploadResponse = Upload

export type PartialUpdateUploadError = unknown

export type DestroyUploadData = {
  path: {
    guid: string
  }
}

export type DestroyUploadResponse = void

export type DestroyUploadError = unknown

export type DestroyFoiRequestFollowData = {
  path: {
    id: string
  }
}

export type DestroyFoiRequestFollowResponse = void

export type DestroyFoiRequestFollowError = unknown

export type ListFoiRequestListsResponseTransformer = (
  data: any
) => Promise<ListFoiRequestListsResponse>

export type FoiRequestListModelResponseTransformer = (
  data: any
) => FoiRequestList

export const FoiRequestListModelResponseTransformer: FoiRequestListModelResponseTransformer =
  (data) => {
    if (data?.due_date) {
      data.due_date = new Date(data.due_date)
    }
    if (data?.resolved_on) {
      data.resolved_on = new Date(data.resolved_on)
    }
    if (data?.last_message) {
      data.last_message = new Date(data.last_message)
    }
    if (data?.created_at) {
      data.created_at = new Date(data.created_at)
    }
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const ListFoiRequestListsResponseTransformer: ListFoiRequestListsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiRequestListModelResponseTransformer)
    }
    return data
  }

export type SearchFoiRequestListResponseTransformer = (
  data: any
) => Promise<SearchFoiRequestListResponse>

export const SearchFoiRequestListResponseTransformer: SearchFoiRequestListResponseTransformer =
  async (data) => {
    FoiRequestListModelResponseTransformer(data)
    return data
  }

export type TagsAutocompleteFoiRequestListResponseTransformer = (
  data: any
) => Promise<TagsAutocompleteFoiRequestListResponse>

export const TagsAutocompleteFoiRequestListResponseTransformer: TagsAutocompleteFoiRequestListResponseTransformer =
  async (data) => {
    FoiRequestListModelResponseTransformer(data)
    return data
  }

export type RetrieveFoiRequestDetailResponseTransformer = (
  data: any
) => Promise<RetrieveFoiRequestDetailResponse>

export type FoiRequestDetailModelResponseTransformer = (
  data: any
) => FoiRequestDetail

export const FoiRequestDetailModelResponseTransformer: FoiRequestDetailModelResponseTransformer =
  (data) => {
    if (data?.law?.created) {
      data.law.created = new Date(data.law.created)
    }
    if (data?.due_date) {
      data.due_date = new Date(data.due_date)
    }
    if (data?.resolved_on) {
      data.resolved_on = new Date(data.resolved_on)
    }
    if (data?.last_message) {
      data.last_message = new Date(data.last_message)
    }
    if (data?.created_at) {
      data.created_at = new Date(data.created_at)
    }
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    if (data?.public_body?.jurisdiction?.last_modified_at) {
      data.public_body.jurisdiction.last_modified_at = new Date(
        data.public_body.jurisdiction.last_modified_at
      )
    }
    return data
  }

export const RetrieveFoiRequestDetailResponseTransformer: RetrieveFoiRequestDetailResponseTransformer =
  async (data) => {
    FoiRequestDetailModelResponseTransformer(data)
    return data
  }

export type ListFoiMessageDraftsResponseTransformer = (
  data: any
) => Promise<ListFoiMessageDraftsResponse>

export type FoiMessageDraftModelResponseTransformer = (
  data: any
) => FoiMessageDraft

export const FoiMessageDraftModelResponseTransformer: FoiMessageDraftModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const ListFoiMessageDraftsResponseTransformer: ListFoiMessageDraftsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiMessageDraftModelResponseTransformer)
    }
    return data
  }

export type CreateFoiMessageDraftResponseTransformer = (
  data: any
) => Promise<CreateFoiMessageDraftResponse>

export const CreateFoiMessageDraftResponseTransformer: CreateFoiMessageDraftResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type RetrieveFoiMessageDraftResponseTransformer = (
  data: any
) => Promise<RetrieveFoiMessageDraftResponse>

export const RetrieveFoiMessageDraftResponseTransformer: RetrieveFoiMessageDraftResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type UpdateFoiMessageDraftResponseTransformer = (
  data: any
) => Promise<UpdateFoiMessageDraftResponse>

export const UpdateFoiMessageDraftResponseTransformer: UpdateFoiMessageDraftResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type PartialUpdateFoiMessageDraftResponseTransformer = (
  data: any
) => Promise<PartialUpdateFoiMessageDraftResponse>

export const PartialUpdateFoiMessageDraftResponseTransformer: PartialUpdateFoiMessageDraftResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type ListFoiMessagesResponseTransformer = (
  data: any
) => Promise<ListFoiMessagesResponse>

export type FoiMessageModelResponseTransformer = (data: any) => FoiMessage

export const FoiMessageModelResponseTransformer: FoiMessageModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const ListFoiMessagesResponseTransformer: ListFoiMessagesResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiMessageModelResponseTransformer)
    }
    return data
  }

export type RetrieveFoiMessageResponseTransformer = (
  data: any
) => Promise<RetrieveFoiMessageResponse>

export const RetrieveFoiMessageResponseTransformer: RetrieveFoiMessageResponseTransformer =
  async (data) => {
    FoiMessageModelResponseTransformer(data)
    return data
  }

export type ListFoiAttachmentsResponseTransformer = (
  data: any
) => Promise<ListFoiAttachmentsResponse>

export type FoiAttachmentModelResponseTransformer = (data: any) => FoiAttachment

export const FoiAttachmentModelResponseTransformer: FoiAttachmentModelResponseTransformer =
  (data) => {
    if (data?.document?.published_at) {
      data.document.published_at = new Date(data.document.published_at)
    }
    return data
  }

export const ListFoiAttachmentsResponseTransformer: ListFoiAttachmentsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiAttachmentModelResponseTransformer)
    }
    return data
  }

export type RetrieveFoiAttachmentResponseTransformer = (
  data: any
) => Promise<RetrieveFoiAttachmentResponse>

export const RetrieveFoiAttachmentResponseTransformer: RetrieveFoiAttachmentResponseTransformer =
  async (data) => {
    FoiAttachmentModelResponseTransformer(data)
    return data
  }

export type ListFoiRequestFollowsResponseTransformer = (
  data: any
) => Promise<ListFoiRequestFollowsResponse>

export type FoiRequestFollowModelResponseTransformer = (
  data: any
) => FoiRequestFollow

export const FoiRequestFollowModelResponseTransformer: FoiRequestFollowModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    return data
  }

export const ListFoiRequestFollowsResponseTransformer: ListFoiRequestFollowsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiRequestFollowModelResponseTransformer)
    }
    return data
  }

export type ListGeoRegionsResponseTransformer = (
  data: any
) => Promise<ListGeoRegionsResponse>

export type GeoRegionModelResponseTransformer = (data: any) => GeoRegion

export const GeoRegionModelResponseTransformer: GeoRegionModelResponseTransformer =
  (data) => {
    if (data?.valid_on) {
      data.valid_on = new Date(data.valid_on)
    }
    return data
  }

export const ListGeoRegionsResponseTransformer: ListGeoRegionsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(GeoRegionModelResponseTransformer)
    }
    return data
  }

export type AutocompleteGeoRegionResponseTransformer = (
  data: any
) => Promise<AutocompleteGeoRegionResponse>

export const AutocompleteGeoRegionResponseTransformer: AutocompleteGeoRegionResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type ReconciliationGeoRegionResponseTransformer = (
  data: any
) => Promise<ReconciliationGeoRegionResponse>

export const ReconciliationGeoRegionResponseTransformer: ReconciliationGeoRegionResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type ReconciliationGeoRegion1ResponseTransformer = (
  data: any
) => Promise<ReconciliationGeoRegion1Response>

export const ReconciliationGeoRegion1ResponseTransformer: ReconciliationGeoRegion1ResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type ReconciliationFlyoutEntityGeoRegionResponseTransformer = (
  data: any
) => Promise<ReconciliationFlyoutEntityGeoRegionResponse>

export const ReconciliationFlyoutEntityGeoRegionResponseTransformer: ReconciliationFlyoutEntityGeoRegionResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type ReconciliationFlyoutEntityGeoRegion1ResponseTransformer = (
  data: any
) => Promise<ReconciliationFlyoutEntityGeoRegion1Response>

export const ReconciliationFlyoutEntityGeoRegion1ResponseTransformer: ReconciliationFlyoutEntityGeoRegion1ResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type ReconciliationProposePropertiesGeoRegionResponseTransformer = (
  data: any
) => Promise<ReconciliationProposePropertiesGeoRegionResponse>

export const ReconciliationProposePropertiesGeoRegionResponseTransformer: ReconciliationProposePropertiesGeoRegionResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type ReconciliationProposePropertiesGeoRegion1ResponseTransformer = (
  data: any
) => Promise<ReconciliationProposePropertiesGeoRegion1Response>

export const ReconciliationProposePropertiesGeoRegion1ResponseTransformer: ReconciliationProposePropertiesGeoRegion1ResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type ReconciliationSuggestServiceGeoRegionResponseTransformer = (
  data: any
) => Promise<ReconciliationSuggestServiceGeoRegionResponse>

export const ReconciliationSuggestServiceGeoRegionResponseTransformer: ReconciliationSuggestServiceGeoRegionResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type ReconciliationSuggestServiceGeoRegion1ResponseTransformer = (
  data: any
) => Promise<ReconciliationSuggestServiceGeoRegion1Response>

export const ReconciliationSuggestServiceGeoRegion1ResponseTransformer: ReconciliationSuggestServiceGeoRegion1ResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type RetrieveGeoRegionResponseTransformer = (
  data: any
) => Promise<RetrieveGeoRegionResponse>

export type GeoRegionDetailModelResponseTransformer = (
  data: any
) => GeoRegionDetail

export const GeoRegionDetailModelResponseTransformer: GeoRegionDetailModelResponseTransformer =
  (data) => {
    if (data?.valid_on) {
      data.valid_on = new Date(data.valid_on)
    }
    return data
  }

export const RetrieveGeoRegionResponseTransformer: RetrieveGeoRegionResponseTransformer =
  async (data) => {
    GeoRegionDetailModelResponseTransformer(data)
    return data
  }

export type ListPublicBodyListsResponseTransformer = (
  data: any
) => Promise<ListPublicBodyListsResponse>

export type PublicBodyListModelResponseTransformer = (
  data: any
) => PublicBodyList

export const PublicBodyListModelResponseTransformer: PublicBodyListModelResponseTransformer =
  (data) => {
    if (data?.jurisdiction?.last_modified_at) {
      data.jurisdiction.last_modified_at = new Date(
        data.jurisdiction.last_modified_at
      )
    }
    return data
  }

export const ListPublicBodyListsResponseTransformer: ListPublicBodyListsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(PublicBodyListModelResponseTransformer)
    }
    return data
  }

export type AutocompletePublicBodyListResponseTransformer = (
  data: any
) => Promise<AutocompletePublicBodyListResponse>

export const AutocompletePublicBodyListResponseTransformer: AutocompletePublicBodyListResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type ReconciliationPublicBodyListResponseTransformer = (
  data: any
) => Promise<ReconciliationPublicBodyListResponse>

export const ReconciliationPublicBodyListResponseTransformer: ReconciliationPublicBodyListResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type ReconciliationPublicBodyList1ResponseTransformer = (
  data: any
) => Promise<ReconciliationPublicBodyList1Response>

export const ReconciliationPublicBodyList1ResponseTransformer: ReconciliationPublicBodyList1ResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type ReconciliationFlyoutEntityPublicBodyListResponseTransformer = (
  data: any
) => Promise<ReconciliationFlyoutEntityPublicBodyListResponse>

export const ReconciliationFlyoutEntityPublicBodyListResponseTransformer: ReconciliationFlyoutEntityPublicBodyListResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type ReconciliationFlyoutEntityPublicBodyList1ResponseTransformer = (
  data: any
) => Promise<ReconciliationFlyoutEntityPublicBodyList1Response>

export const ReconciliationFlyoutEntityPublicBodyList1ResponseTransformer: ReconciliationFlyoutEntityPublicBodyList1ResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type ReconciliationProposePropertiesPublicBodyListResponseTransformer = (
  data: any
) => Promise<ReconciliationProposePropertiesPublicBodyListResponse>

export const ReconciliationProposePropertiesPublicBodyListResponseTransformer: ReconciliationProposePropertiesPublicBodyListResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type ReconciliationProposePropertiesPublicBodyList1ResponseTransformer =
  (data: any) => Promise<ReconciliationProposePropertiesPublicBodyList1Response>

export const ReconciliationProposePropertiesPublicBodyList1ResponseTransformer: ReconciliationProposePropertiesPublicBodyList1ResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type ReconciliationSuggestServicePublicBodyListResponseTransformer = (
  data: any
) => Promise<ReconciliationSuggestServicePublicBodyListResponse>

export const ReconciliationSuggestServicePublicBodyListResponseTransformer: ReconciliationSuggestServicePublicBodyListResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type ReconciliationSuggestServicePublicBodyList1ResponseTransformer = (
  data: any
) => Promise<ReconciliationSuggestServicePublicBodyList1Response>

export const ReconciliationSuggestServicePublicBodyList1ResponseTransformer: ReconciliationSuggestServicePublicBodyList1ResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type SearchPublicBodyListResponseTransformer = (
  data: any
) => Promise<SearchPublicBodyListResponse>

export const SearchPublicBodyListResponseTransformer: SearchPublicBodyListResponseTransformer =
  async (data) => {
    PublicBodyListModelResponseTransformer(data)
    return data
  }

export type RetrievePublicBodyResponseTransformer = (
  data: any
) => Promise<RetrievePublicBodyResponse>

export type PublicBodyModelResponseTransformer = (data: any) => PublicBody

export const PublicBodyModelResponseTransformer: PublicBodyModelResponseTransformer =
  (data) => {
    if (data?.jurisdiction?.last_modified_at) {
      data.jurisdiction.last_modified_at = new Date(
        data.jurisdiction.last_modified_at
      )
    }
    return data
  }

export const RetrievePublicBodyResponseTransformer: RetrievePublicBodyResponseTransformer =
  async (data) => {
    PublicBodyModelResponseTransformer(data)
    return data
  }

export type ListJurisdictionsResponseTransformer = (
  data: any
) => Promise<ListJurisdictionsResponse>

export type JurisdictionModelResponseTransformer = (data: any) => Jurisdiction

export const JurisdictionModelResponseTransformer: JurisdictionModelResponseTransformer =
  (data) => {
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const ListJurisdictionsResponseTransformer: ListJurisdictionsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(JurisdictionModelResponseTransformer)
    }
    return data
  }

export type RetrieveJurisdictionResponseTransformer = (
  data: any
) => Promise<RetrieveJurisdictionResponse>

export const RetrieveJurisdictionResponseTransformer: RetrieveJurisdictionResponseTransformer =
  async (data) => {
    JurisdictionModelResponseTransformer(data)
    return data
  }

export type ListFoiLawsResponseTransformer = (
  data: any
) => Promise<ListFoiLawsResponse>

export type FoiLawModelResponseTransformer = (data: any) => FoiLaw

export const FoiLawModelResponseTransformer: FoiLawModelResponseTransformer = (
  data
) => {
  if (data?.created) {
    data.created = new Date(data.created)
  }
  return data
}

export const ListFoiLawsResponseTransformer: ListFoiLawsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiLawModelResponseTransformer)
    }
    return data
  }

export type AutocompleteFoiLawResponseTransformer = (
  data: any
) => Promise<AutocompleteFoiLawResponse>

export const AutocompleteFoiLawResponseTransformer: AutocompleteFoiLawResponseTransformer =
  async (data) => {
    FoiLawModelResponseTransformer(data)
    return data
  }

export type RetrieveFoiLawResponseTransformer = (
  data: any
) => Promise<RetrieveFoiLawResponse>

export const RetrieveFoiLawResponseTransformer: RetrieveFoiLawResponseTransformer =
  async (data) => {
    FoiLawModelResponseTransformer(data)
    return data
  }

export type ListDocumentsResponseTransformer = (
  data: any
) => Promise<ListDocumentsResponse>

export type DocumentModelResponseTransformer = (data: any) => Document

export const DocumentModelResponseTransformer: DocumentModelResponseTransformer =
  (data) => {
    if (data?.published_at) {
      data.published_at = new Date(data.published_at)
    }
    return data
  }

export const ListDocumentsResponseTransformer: ListDocumentsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(DocumentModelResponseTransformer)
    }
    return data
  }

export type OembedDocumentResponseTransformer = (
  data: any
) => Promise<OembedDocumentResponse>

export const OembedDocumentResponseTransformer: OembedDocumentResponseTransformer =
  async (data) => {
    DocumentModelResponseTransformer(data)
    return data
  }

export type RetrieveDocumentDetailResponseTransformer = (
  data: any
) => Promise<RetrieveDocumentDetailResponse>

export type DocumentDetailModelResponseTransformer = (
  data: any
) => DocumentDetail

export const DocumentDetailModelResponseTransformer: DocumentDetailModelResponseTransformer =
  (data) => {
    if (data?.published_at) {
      data.published_at = new Date(data.published_at)
    }
    return data
  }

export const RetrieveDocumentDetailResponseTransformer: RetrieveDocumentDetailResponseTransformer =
  async (data) => {
    DocumentDetailModelResponseTransformer(data)
    return data
  }

export type PartialUpdateDocumentResponseTransformer = (
  data: any
) => Promise<PartialUpdateDocumentResponse>

export const PartialUpdateDocumentResponseTransformer: PartialUpdateDocumentResponseTransformer =
  async (data) => {
    DocumentModelResponseTransformer(data)
    return data
  }

export type ListDocumentCollectionsResponseTransformer = (
  data: any
) => Promise<ListDocumentCollectionsResponse>

export type DocumentCollectionModelResponseTransformer = (
  data: any
) => DocumentCollection

export const DocumentCollectionModelResponseTransformer: DocumentCollectionModelResponseTransformer =
  (data) => {
    if (data?.created_at) {
      data.created_at = new Date(data.created_at)
    }
    if (data?.updated_at) {
      data.updated_at = new Date(data.updated_at)
    }
    return data
  }

export const ListDocumentCollectionsResponseTransformer: ListDocumentCollectionsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(DocumentCollectionModelResponseTransformer)
    }
    return data
  }

export type OembedDocumentCollectionResponseTransformer = (
  data: any
) => Promise<OembedDocumentCollectionResponse>

export const OembedDocumentCollectionResponseTransformer: OembedDocumentCollectionResponseTransformer =
  async (data) => {
    DocumentCollectionModelResponseTransformer(data)
    return data
  }

export type RetrieveDocumentCollectionResponseTransformer = (
  data: any
) => Promise<RetrieveDocumentCollectionResponse>

export const RetrieveDocumentCollectionResponseTransformer: RetrieveDocumentCollectionResponseTransformer =
  async (data) => {
    DocumentCollectionModelResponseTransformer(data)
    return data
  }

export type ListPageAnnotationsResponseTransformer = (
  data: any
) => Promise<ListPageAnnotationsResponse>

export type PageAnnotationModelResponseTransformer = (
  data: any
) => PageAnnotation

export const PageAnnotationModelResponseTransformer: PageAnnotationModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    return data
  }

export const ListPageAnnotationsResponseTransformer: ListPageAnnotationsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(PageAnnotationModelResponseTransformer)
    }
    return data
  }

export type RetrievePageAnnotationResponseTransformer = (
  data: any
) => Promise<RetrievePageAnnotationResponse>

export const RetrievePageAnnotationResponseTransformer: RetrievePageAnnotationResponseTransformer =
  async (data) => {
    PageAnnotationModelResponseTransformer(data)
    return data
  }

export type ListProblemReportsResponseTransformer = (
  data: any
) => Promise<ListProblemReportsResponse>

export type ProblemReportModelResponseTransformer = (data: any) => ProblemReport

export const ProblemReportModelResponseTransformer: ProblemReportModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    if (data?.resolution_timestamp) {
      data.resolution_timestamp = new Date(data.resolution_timestamp)
    }
    if (data?.claimed) {
      data.claimed = new Date(data.claimed)
    }
    if (data?.escalated) {
      data.escalated = new Date(data.escalated)
    }
    return data
  }

export const ListProblemReportsResponseTransformer: ListProblemReportsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(ProblemReportModelResponseTransformer)
    }
    return data
  }

export type RetrieveProblemReportResponseTransformer = (
  data: any
) => Promise<RetrieveProblemReportResponse>

export const RetrieveProblemReportResponseTransformer: RetrieveProblemReportResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type ListCampaignsResponseTransformer = (
  data: any
) => Promise<ListCampaignsResponse>

export type CampaignModelResponseTransformer = (data: any) => Campaign

export const CampaignModelResponseTransformer: CampaignModelResponseTransformer =
  (data) => {
    if (data?.start_date) {
      data.start_date = new Date(data.start_date)
    }
    return data
  }

export const ListCampaignsResponseTransformer: ListCampaignsResponseTransformer =
  async (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(CampaignModelResponseTransformer)
    }
    return data
  }

export type RetrieveCampaignResponseTransformer = (
  data: any
) => Promise<RetrieveCampaignResponse>

export const RetrieveCampaignResponseTransformer: RetrieveCampaignResponseTransformer =
  async (data) => {
    CampaignModelResponseTransformer(data)
    return data
  }

export type PublishFoiMessageDraftResponseTransformer = (
  data: any
) => Promise<PublishFoiMessageDraftResponse>

export const PublishFoiMessageDraftResponseTransformer: PublishFoiMessageDraftResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type ClaimProblemReportResponseTransformer = (
  data: any
) => Promise<ClaimProblemReportResponse>

export const ClaimProblemReportResponseTransformer: ClaimProblemReportResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type EscalateProblemReportResponseTransformer = (
  data: any
) => Promise<EscalateProblemReportResponse>

export const EscalateProblemReportResponseTransformer: EscalateProblemReportResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type ResolveProblemReportResponseTransformer = (
  data: any
) => Promise<ResolveProblemReportResponse>

export const ResolveProblemReportResponseTransformer: ResolveProblemReportResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type UnclaimProblemReportResponseTransformer = (
  data: any
) => Promise<UnclaimProblemReportResponse>

export const UnclaimProblemReportResponseTransformer: UnclaimProblemReportResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type CreateUploadCreateResponseTransformer = (
  data: any
) => Promise<CreateUploadCreateResponse>

export type UploadCreateModelResponseTransformer = (data: any) => UploadCreate

export const UploadCreateModelResponseTransformer: UploadCreateModelResponseTransformer =
  (data) => {
    if (data?.expires) {
      data.expires = new Date(data.expires)
    }
    return data
  }

export const CreateUploadCreateResponseTransformer: CreateUploadCreateResponseTransformer =
  async (data) => {
    UploadCreateModelResponseTransformer(data)
    return data
  }

export type UpdateUploadResponseTransformer = (
  data: any
) => Promise<UpdateUploadResponse>

export type UploadModelResponseTransformer = (data: any) => Upload

export const UploadModelResponseTransformer: UploadModelResponseTransformer = (
  data
) => {
  if (data?.expires) {
    data.expires = new Date(data.expires)
  }
  return data
}

export const UpdateUploadResponseTransformer: UpdateUploadResponseTransformer =
  async (data) => {
    UploadModelResponseTransformer(data)
    return data
  }

export type PartialUpdateUploadResponseTransformer = (
  data: any
) => Promise<PartialUpdateUploadResponse>

export const PartialUpdateUploadResponseTransformer: PartialUpdateUploadResponseTransformer =
  async (data) => {
    UploadModelResponseTransformer(data)
    return data
  }
