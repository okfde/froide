// This file is auto-generated by @hey-api/openapi-ts

export type BlankEnum = ''

export const BlankEnum = {
  EMPTY_STRING: ''
} as const

export type Campaign = {
  readonly resource_uri: string
  readonly id: number
  name: string
  slug: string
  url?: string
  description?: string
  start_date?: Date | null
  active?: boolean
}

export type Category = {
  readonly id: number
  name: string
  slug: string
  is_topic?: boolean
  depth: number
  readonly parent: string
  readonly children: Array<string>
}

export type Classification = {
  readonly id: number
  name: string
  slug: string
  depth: number
  readonly parent: string
  readonly children: Array<string>
}

export type CreateFoiRequestFollow = {
  request: number
}

export type CreatePageAnnotation = {
  document: number
  page_number: number
  title: string
  description: string
  top?: number | null
  left?: number | null
  width?: number | null
  height?: number | null
}

export type Document = {
  readonly resource_uri: string
  readonly id: number
  readonly site_url: string
  title?: string
  slug?: string
  description?: string
  published_at?: Date | null
  num_pages?: number
  public?: boolean
  listed?: boolean
  allow_annotation?: boolean
  pending?: boolean
  readonly file_url: string
  file_size?: number | null
  cover_image: string
  page_template: string
  outline?: string
  properties?: unknown
  readonly uid: string
  data?: unknown
  readonly pages_uri: string
  readonly original: string
  readonly foirequest: string
  readonly publicbody: string
  readonly last_modified_at: string
}

export type DocumentCollection = {
  readonly resource_uri: string
  readonly id: number
  readonly site_url: string
  title?: string
  description?: string
  public?: boolean
  listed?: boolean
  created_at?: Date | null
  updated_at?: Date | null
  readonly document_count: string
  readonly document_directory_count: string
  readonly uid: string
  cover_image: string
  readonly directories: string
  readonly documents: string
  readonly documents_uri: string
  readonly pages_uri: string
  settings?: unknown
  readonly zip_download_url: string
}

export type DocumentDetail = {
  readonly resource_uri: string
  readonly id: number
  readonly site_url: string
  title?: string
  slug?: string
  description?: string
  published_at?: Date | null
  num_pages?: number
  public?: boolean
  listed?: boolean
  allow_annotation?: boolean
  pending?: boolean
  readonly file_url: string
  file_size?: number | null
  cover_image: string
  page_template: string
  outline?: string
  properties?: unknown
  readonly uid: string
  data?: unknown
  readonly pages_uri: string
  readonly original: string
  readonly foirequest: string
  readonly publicbody: string
  readonly last_modified_at: string
  readonly pages: string
}

export type FoiAttachment = {
  readonly resource_uri: string
  readonly id: number
  readonly belongs_to: string
  name: string
  filetype?: string
  size?: number | null
  readonly site_url: string
  readonly anchor_url: string
  readonly file_url: string
  pending?: boolean
  is_converted?: boolean
  readonly converted: string
  approved?: boolean
  can_approve?: boolean
  readonly redacted: string
  is_redacted?: boolean
  readonly can_redact: string
  readonly can_delete: string
  readonly is_pdf: string
  readonly is_image: string
  readonly is_irrelevant: string
  document: Document
}

export type FoiAttachmentTus = {
  message: string
  upload: string
}

export type FoiLaw = {
  readonly resource_uri: string
  readonly id: number
  readonly name: string
  readonly slug: string
  readonly description: string
  readonly long_description: string
  law_type?: string
  created?: Date | null
  readonly request_note: string
  readonly request_note_html: string
  meta?: boolean
  readonly site_url: string
  readonly jurisdiction: string
  email_only?: boolean
  readonly mediator: string
  priority?: number
  url?: string
  max_response_time?: number | null
  requires_signature?: boolean
  max_response_time_unit?: MaxResponseTimeUnitEnum | BlankEnum
  readonly letter_start: string
  readonly letter_end: string
  last_modified_at: string
  readonly refusal_reasons: string
  readonly combined: Array<string>
}

export type FoiMessage = {
  readonly resource_uri: string
  readonly id: number
  readonly url: string
  request: string
  readonly sent: boolean
  is_response?: boolean
  readonly is_postal: string
  readonly is_draft: boolean
  kind?: KindDccEnum
  is_escalation?: boolean
  content_hidden?: boolean
  sender_public_body?: string | null
  recipient_public_body?: string | null
  status?: StatusEnum | BlankEnum
  timestamp?: Date
  redacted?: boolean
  readonly not_publishable: boolean
  readonly attachments: string
  readonly subject: string
  readonly content: string
  readonly redacted_subject: string
  readonly redacted_content: string
  readonly sender: string
  readonly status_name: string
  readonly last_modified_at: Date
}

export type FoiMessageDraft = {
  readonly resource_uri: string
  readonly id: number
  readonly url: string
  request: string
  readonly sent: boolean
  is_response?: boolean
  readonly is_postal: string
  readonly is_draft: boolean
  kind?: KindDccEnum
  is_escalation?: boolean
  content_hidden?: boolean
  sender_public_body?: string | null
  recipient_public_body?: string | null
  status?: StatusEnum | BlankEnum
  timestamp?: Date
  redacted?: boolean
  readonly not_publishable: boolean
  readonly attachments: string
  readonly subject: string
  readonly content: string
  readonly redacted_subject: string
  readonly redacted_content: string
  readonly sender: string
  readonly status_name: string
  readonly last_modified_at: Date
}

export type FoiRequestDetail = {
  readonly resource_uri: string
  readonly id: number
  readonly url: string
  readonly jurisdiction: string
  is_foi?: boolean
  checked?: boolean
  refusal_reason?: string
  readonly costs: string
  public?: boolean
  readonly law: FoiLaw
  description: string
  readonly redacted_description: string
  summary?: string
  same_as_count?: number
  readonly same_as: string
  due_date?: Date | null
  resolved_on?: Date | null
  last_message?: Date | null
  created_at?: Date | null
  readonly last_modified_at: Date
  status: StatusEnum
  readonly public_body: PublicBody
  resolution?: ResolutionEnum | BlankEnum
  slug: string
  title: string
  reference?: string
  readonly user: string
  readonly project: number
  readonly campaign: string
  tags: string
  readonly messages: string
}

export type FoiRequestFollow = {
  readonly resource_uri: string
  readonly request: string
  readonly request_url: string
  timestamp?: Date
  readonly follow_count: number
  readonly follows: boolean
  readonly can_follow: boolean
}

export type FoiRequestList = {
  readonly resource_uri: string
  readonly id: number
  readonly url: string
  readonly jurisdiction: string
  is_foi?: boolean
  checked?: boolean
  refusal_reason?: string
  readonly costs: string
  public?: boolean
  readonly law: string
  description: string
  readonly redacted_description: string
  summary?: string
  same_as_count?: number
  readonly same_as: string
  due_date?: Date | null
  resolved_on?: Date | null
  last_message?: Date | null
  created_at?: Date | null
  readonly last_modified_at: Date
  status: StatusEnum
  readonly public_body: SimplePublicBody
  resolution?: ResolutionEnum | BlankEnum
  slug: string
  title: string
  reference?: string
  readonly user: string
  readonly project: number
  readonly campaign: string
  tags: string
}

export type GeoRegion = {
  readonly resource_uri: string
  readonly id: number
  name: string
  slug: string
  kind: KindCfdEnum
  kind_detail?: string
  level?: number
  region_identifier?: string
  global_identifier?: string
  area?: number
  population?: number | null
  valid_on?: Date | null
  readonly part_of: string
  readonly centroid: string
}

export type GeoRegionDetail = {
  readonly resource_uri: string
  readonly id: number
  name: string
  slug: string
  kind: KindCfdEnum
  kind_detail?: string
  level?: number
  region_identifier?: string
  global_identifier?: string
  area?: number
  population?: number | null
  valid_on?: Date | null
  readonly part_of: string
  readonly centroid: string
  readonly geom: string
  readonly gov_seat: string
}

export type ImageAttachmentConverter = {
  title?: string
  images: Array<ImageAttachmentConverterItem>
  message: string
}

export type ImageAttachmentConverterItem = {
  attachment: string
  rotate?: number
}

export type Jurisdiction = {
  readonly resource_uri: string
  readonly id: number
  name: string
  rank?: number
  description?: string
  slug: string
  site_url: string
  readonly region: string
  readonly last_modified_at: Date
}

/**
 * * `country` - country
 * * `state` - state
 * * `admin_district` - administrative district
 * * `district` - district
 * * `admin_cooperation` - administrative cooperation
 * * `municipality` - municipality
 * * `borough` - borough
 * * `zipcode` - zipcode
 * * `admin_court_jurisdiction` - administrative court jurisdiction
 */
export type KindCfdEnum =
  | 'country'
  | 'state'
  | 'admin_district'
  | 'district'
  | 'admin_cooperation'
  | 'municipality'
  | 'borough'
  | 'zipcode'
  | 'admin_court_jurisdiction'

/**
 * * `country` - country
 * * `state` - state
 * * `admin_district` - administrative district
 * * `district` - district
 * * `admin_cooperation` - administrative cooperation
 * * `municipality` - municipality
 * * `borough` - borough
 * * `zipcode` - zipcode
 * * `admin_court_jurisdiction` - administrative court jurisdiction
 */
export const KindCfdEnum = {
  COUNTRY: 'country',
  STATE: 'state',
  ADMIN_DISTRICT: 'admin_district',
  DISTRICT: 'district',
  ADMIN_COOPERATION: 'admin_cooperation',
  MUNICIPALITY: 'municipality',
  BOROUGH: 'borough',
  ZIPCODE: 'zipcode',
  ADMIN_COURT_JURISDICTION: 'admin_court_jurisdiction'
} as const

/**
 * * `email` - email
 * * `post` - postal mail
 * * `fax` - fax
 * * `upload` - upload
 * * `phone` - phone call
 * * `visit` - visit in person
 * * `import` - automatically imported
 */
export type KindDccEnum =
  | 'email'
  | 'post'
  | 'fax'
  | 'upload'
  | 'phone'
  | 'visit'
  | 'import'

/**
 * * `email` - email
 * * `post` - postal mail
 * * `fax` - fax
 * * `upload` - upload
 * * `phone` - phone call
 * * `visit` - visit in person
 * * `import` - automatically imported
 */
export const KindDccEnum = {
  EMAIL: 'email',
  POST: 'post',
  FAX: 'fax',
  UPLOAD: 'upload',
  PHONE: 'phone',
  VISIT: 'visit',
  IMPORT: 'import'
} as const

export type MakeRequest = {
  publicbodies: Array<number>
  subject: string
  body: string
  full_text?: boolean
  public?: boolean
  reference?: string
  tags?: Array<string>
}

/**
 * * `day` - Day(s)
 * * `working_day` - Working Day(s)
 * * `month_de` - Month(s) (DE)
 */
export type MaxResponseTimeUnitEnum = 'day' | 'working_day' | 'month_de'

/**
 * * `day` - Day(s)
 * * `working_day` - Working Day(s)
 * * `month_de` - Month(s) (DE)
 */
export const MaxResponseTimeUnitEnum = {
  DAY: 'day',
  WORKING_DAY: 'working_day',
  MONTH_DE: 'month_de'
} as const

export type Page = {
  readonly document: string
  number?: number
  content?: string
  width?: number | null
  height?: number | null
  image: string
  query_highlight: string
}

export type PageAnnotation = {
  readonly id: number
  title?: string
  description?: string
  top?: number | null
  left?: number | null
  width?: number | null
  height?: number | null
  timestamp?: Date
  readonly can_delete: boolean
  highlight?: string
  image?: string
  readonly document: string
  readonly number: number
}

export type PaginatedCampaignList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Campaign>
}

export type PaginatedCategoryList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Category>
}

export type PaginatedClassificationList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Classification>
}

export type PaginatedDocumentCollectionList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<DocumentCollection>
}

export type PaginatedDocumentList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Document>
}

export type PaginatedFoiAttachmentList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiAttachment>
}

export type PaginatedFoiLawList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiLaw>
}

export type PaginatedFoiMessageDraftList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiMessageDraft>
}

export type PaginatedFoiMessageList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiMessage>
}

export type PaginatedFoiRequestFollowList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiRequestFollow>
}

export type PaginatedFoiRequestListList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<FoiRequestList>
}

export type PaginatedGeoRegionList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<GeoRegion>
}

export type PaginatedJurisdictionList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Jurisdiction>
}

export type PaginatedPageAnnotationList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<PageAnnotation>
}

export type PaginatedPageList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<Page>
}

export type PaginatedProblemReportList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<ProblemReport>
}

export type PaginatedPublicBodyListList = {
  count: number
  next?: string | null
  previous?: string | null
  results: Array<PublicBodyList>
}

export type PatchedDocument = {
  readonly resource_uri?: string
  readonly id?: number
  readonly site_url?: string
  title?: string
  slug?: string
  description?: string
  published_at?: Date | null
  num_pages?: number
  public?: boolean
  listed?: boolean
  allow_annotation?: boolean
  pending?: boolean
  readonly file_url?: string
  file_size?: number | null
  cover_image?: string
  page_template?: string
  outline?: string
  properties?: unknown
  readonly uid?: string
  data?: unknown
  readonly pages_uri?: string
}

export type PatchedFoiMessageDraft = {
  readonly resource_uri?: string
  readonly id?: number
  readonly url?: string
  request?: string
  readonly sent?: boolean
  is_response?: boolean
  readonly is_postal?: string
  readonly is_draft?: boolean
  kind?: KindDccEnum
  is_escalation?: boolean
  content_hidden?: boolean
  sender_public_body?: string | null
  recipient_public_body?: string | null
  status?: StatusEnum | BlankEnum
  timestamp?: Date
  redacted?: boolean
  readonly not_publishable?: boolean
  readonly attachments?: string
  readonly subject?: string
  readonly content?: string
  readonly redacted_subject?: string
  readonly redacted_content?: string
  readonly sender?: string
  readonly status_name?: string
  readonly last_modified_at?: Date
}

export type PatchedUpload = {
  readonly id?: number
  guid?: string
  state?: string
  upload_offset?: number
  upload_length?: number
  upload_metadata?: string
  filename?: string
  temporary_file_path?: string | null
  expires?: Date | null
  token?: string | null
  user?: number | null
}

export type PatchedUserPreference = {
  value?: string
}

export type ProblemReport = {
  readonly id: number
  readonly message_id: number
  kind: ProblemReportKindEnum
  readonly kind_label: string
  readonly message_subject: string
  readonly message_url: string
  timestamp?: Date
  auto_submitted?: boolean
  resolved?: boolean
  description?: string
  resolution?: string
  resolution_timestamp?: Date | null
  claimed?: Date | null
  readonly related_publicbody_id: string
  escalated?: Date | null
  readonly moderator_id: number | null
  readonly is_requester: string
}

/**
 * * `message_not_delivered` - Your message was not delivered.
 * * `attachment_broken` - The attachments don't seem to work.
 * * `redaction_needed` - More redactions are needed.
 * * `foi_help_needed` - You need help to understand or reply to this message.
 * * `other` - Something else...
 * * `not_foi` - This is not a proper FOI request.
 * * `not_nice` - Content is against netiquette.
 * * `info_outdated` - Published information is outdated.
 * * `info_wrong` - Published information is wrong.
 * * `bounce_publicbody` - You received a bounce mail from the public body.
 * * `mail_inauthentic` - Received mail does not pass authenticity checks.
 */
export type ProblemReportKindEnum =
  | 'message_not_delivered'
  | 'attachment_broken'
  | 'redaction_needed'
  | 'foi_help_needed'
  | 'other'
  | 'not_foi'
  | 'not_nice'
  | 'info_outdated'
  | 'info_wrong'
  | 'bounce_publicbody'
  | 'mail_inauthentic'

/**
 * * `message_not_delivered` - Your message was not delivered.
 * * `attachment_broken` - The attachments don't seem to work.
 * * `redaction_needed` - More redactions are needed.
 * * `foi_help_needed` - You need help to understand or reply to this message.
 * * `other` - Something else...
 * * `not_foi` - This is not a proper FOI request.
 * * `not_nice` - Content is against netiquette.
 * * `info_outdated` - Published information is outdated.
 * * `info_wrong` - Published information is wrong.
 * * `bounce_publicbody` - You received a bounce mail from the public body.
 * * `mail_inauthentic` - Received mail does not pass authenticity checks.
 */
export const ProblemReportKindEnum = {
  MESSAGE_NOT_DELIVERED: 'message_not_delivered',
  ATTACHMENT_BROKEN: 'attachment_broken',
  REDACTION_NEEDED: 'redaction_needed',
  FOI_HELP_NEEDED: 'foi_help_needed',
  OTHER: 'other',
  NOT_FOI: 'not_foi',
  NOT_NICE: 'not_nice',
  INFO_OUTDATED: 'info_outdated',
  INFO_WRONG: 'info_wrong',
  BOUNCE_PUBLICBODY: 'bounce_publicbody',
  MAIL_INAUTHENTIC: 'mail_inauthentic'
} as const

export type PublicBody = {
  readonly resource_uri: string
  id: number
  name: string
  slug: string
  other_names?: string
  description?: string
  url?: string | null
  readonly parent: string
  readonly root: string
  depth?: number
  readonly classification: SimpleClassification
  readonly categories: Array<SimpleCategory>
  email?: string
  contact?: string
  address?: string
  fax?: string
  request_note?: string
  number_of_requests?: number
  site_url: string
  readonly request_note_html: string
  readonly jurisdiction: Jurisdiction
  readonly laws: Array<FoiLaw>
  readonly regions: Array<string>
  source_reference?: string
  alternative_emails?: unknown
  wikidata_item?: string
  extra_data?: unknown
  readonly geo: string
}

export type PublicBodyList = {
  readonly resource_uri: string
  id: number
  name: string
  slug: string
  other_names?: string
  description?: string
  url?: string | null
  readonly parent: string
  readonly root: string
  depth?: number
  readonly classification: SimpleClassification
  readonly categories: Array<SimpleCategory>
  email?: string
  contact?: string
  address?: string
  fax?: string
  request_note?: string
  number_of_requests?: number
  site_url: string
  readonly request_note_html: string
  readonly jurisdiction: Jurisdiction
  readonly laws: Array<string>
  readonly regions: Array<string>
  source_reference?: string
  alternative_emails?: unknown
  wikidata_item?: string
  extra_data?: unknown
  readonly geo: string
}

/**
 * * `successful` - Request Successful
 * * `partially_successful` - Request partially successful
 * * `not_held` - Information not held
 * * `refused` - Request refused
 * * `user_withdrew_costs` - Request was withdrawn due to costs
 * * `user_withdrew` - Request was withdrawn
 */
export type ResolutionEnum =
  | 'successful'
  | 'partially_successful'
  | 'not_held'
  | 'refused'
  | 'user_withdrew_costs'
  | 'user_withdrew'

/**
 * * `successful` - Request Successful
 * * `partially_successful` - Request partially successful
 * * `not_held` - Information not held
 * * `refused` - Request refused
 * * `user_withdrew_costs` - Request was withdrawn due to costs
 * * `user_withdrew` - Request was withdrawn
 */
export const ResolutionEnum = {
  SUCCESSFUL: 'successful',
  PARTIALLY_SUCCESSFUL: 'partially_successful',
  NOT_HELD: 'not_held',
  REFUSED: 'refused',
  USER_WITHDREW_COSTS: 'user_withdrew_costs',
  USER_WITHDREW: 'user_withdrew'
} as const

export type SimpleCategory = {
  readonly id: number
  name: string
  slug: string
  is_topic?: boolean
  depth: number
}

export type SimpleClassification = {
  readonly id: number
  name: string
  slug: string
  depth: number
}

export type SimplePublicBody = {
  readonly resource_uri: string
  id: number
  name: string
  slug: string
  other_names?: string
  description?: string
  url?: string | null
  depth?: number
  readonly classification: string
  email?: string
  contact?: string
  address?: string
  fax?: string
  request_note?: string
  number_of_requests?: number
  site_url: string
  readonly jurisdiction: string
  readonly request_note_html: string
  readonly geo: string
  last_modified_at: string
}

/**
 * * `awaiting_user_confirmation` - Awaiting user confirmation
 * * `publicbody_needed` - Public Body needed
 * * `awaiting_publicbody_confirmation` - Awaiting Public Body confirmation
 * * `awaiting_response` - Awaiting response
 * * `awaiting_classification` - Request awaits classification
 * * `asleep` - Request asleep
 * * `resolved` - Request resolved
 */
export type StatusEnum =
  | 'awaiting_user_confirmation'
  | 'publicbody_needed'
  | 'awaiting_publicbody_confirmation'
  | 'awaiting_response'
  | 'awaiting_classification'
  | 'asleep'
  | 'resolved'

/**
 * * `awaiting_user_confirmation` - Awaiting user confirmation
 * * `publicbody_needed` - Public Body needed
 * * `awaiting_publicbody_confirmation` - Awaiting Public Body confirmation
 * * `awaiting_response` - Awaiting response
 * * `awaiting_classification` - Request awaits classification
 * * `asleep` - Request asleep
 * * `resolved` - Request resolved
 */
export const StatusEnum = {
  AWAITING_USER_CONFIRMATION: 'awaiting_user_confirmation',
  PUBLICBODY_NEEDED: 'publicbody_needed',
  AWAITING_PUBLICBODY_CONFIRMATION: 'awaiting_publicbody_confirmation',
  AWAITING_RESPONSE: 'awaiting_response',
  AWAITING_CLASSIFICATION: 'awaiting_classification',
  ASLEEP: 'asleep',
  RESOLVED: 'resolved'
} as const

export type UpdateDocument = {
  title?: string
  description?: string
}

export type Upload = {
  readonly id: number
  guid: string
  state?: string
  upload_offset?: number
  upload_length?: number
  upload_metadata?: string
  filename?: string
  temporary_file_path?: string | null
  expires?: Date | null
  token?: string | null
  user?: number | null
}

export type UploadCreate = {
  readonly id: number
  guid?: string
  state?: string
  upload_offset?: number
  upload_length?: number
  upload_metadata?: string
  filename?: string
  temporary_file_path?: string | null
  expires?: Date | null
  token?: string | null
  user?: number | null
}

export type User = {
  readonly id: number
  private?: boolean
}

export type UserPreference = {
  value: string
}

export type AttachmentListData = {
  query?: {
    approved?: boolean
    belongs_to?: number
    filetype?: string
    format?: 'csv' | 'json'
    is_redacted?: boolean
    /**
     * Number of results to return per page.
     */
    limit?: number
    name?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type AttachmentListResponse = PaginatedFoiAttachmentList

export type AttachmentListError = unknown

export type AttachmentCreateData = {
  body: FoiAttachmentTus
  query?: {
    format?: 'csv' | 'json'
  }
}

export type AttachmentCreateResponse = FoiAttachment

export type AttachmentCreateError = unknown

export type AttachmentRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Attachment.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type AttachmentRetrieveResponse = FoiAttachment

export type AttachmentRetrieveError = unknown

export type AttachmentDestroyData = {
  path: {
    /**
     * A unique integer value identifying this Attachment.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type AttachmentDestroyResponse = void

export type AttachmentDestroyError = unknown

export type ConvertImagesToPdfData = {
  body: ImageAttachmentConverter
  query?: {
    format?: 'csv' | 'json'
  }
}

export type ConvertImagesToPdfResponse = FoiAttachment

export type ConvertImagesToPdfError = unknown

export type CampaignListData = {
  query?: {
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type CampaignListResponse = PaginatedCampaignList

export type CampaignListError = unknown

export type CampaignRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this campaign.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type CampaignRetrieveResponse = Campaign

export type CampaignRetrieveError = unknown

export type CategoryListData = {
  query?: {
    ancestor?: string
    depth?: number
    format?: 'csv' | 'json'
    is_topic?: boolean
    /**
     * Number of results to return per page.
     */
    limit?: number
    name?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    parent?: string
    q?: string
  }
}

export type CategoryListResponse = PaginatedCategoryList

export type CategoryListError = unknown

export type CategoryRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this category.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type CategoryRetrieveResponse = Category

export type CategoryRetrieveError = unknown

export type CategoryAutocompleteRetrieveData = {
  query?: {
    format?: 'csv' | 'json'
  }
}

export type CategoryAutocompleteRetrieveResponse = Category

export type CategoryAutocompleteRetrieveError = unknown

export type ClassificationListData = {
  query?: {
    ancestor?: string
    depth?: number
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    name?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    parent?: string
    q?: string
  }
}

export type ClassificationListResponse = PaginatedClassificationList

export type ClassificationListError = unknown

export type ClassificationRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Classification.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type ClassificationRetrieveResponse = Classification

export type ClassificationRetrieveError = unknown

export type DocumentListData = {
  query?: {
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type DocumentListResponse = PaginatedDocumentList

export type DocumentListError = unknown

export type DocumentRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this document.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type DocumentRetrieveResponse = DocumentDetail

export type DocumentRetrieveError = unknown

export type DocumentUpdateData = {
  body?: UpdateDocument
  path: {
    id: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type DocumentUpdateResponse = UpdateDocument

export type DocumentUpdateError = unknown

export type DocumentPartialUpdateData = {
  body?: PatchedDocument
  path: {
    id: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type DocumentPartialUpdateResponse = Document

export type DocumentPartialUpdateError = unknown

export type DocumentOembedRetrieveData = {
  query?: {
    format?: 'csv' | 'json'
  }
}

export type DocumentOembedRetrieveResponse = Document

export type DocumentOembedRetrieveError = unknown

export type DocumentcollectionListData = {
  query?: {
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type DocumentcollectionListResponse = PaginatedDocumentCollectionList

export type DocumentcollectionListError = unknown

export type DocumentcollectionRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this document collection.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type DocumentcollectionRetrieveResponse = DocumentCollection

export type DocumentcollectionRetrieveError = unknown

export type DocumentcollectionOembedRetrieveData = {
  query?: {
    format?: 'csv' | 'json'
  }
}

export type DocumentcollectionOembedRetrieveResponse = DocumentCollection

export type DocumentcollectionOembedRetrieveError = unknown

export type FollowingListData = {
  query?: {
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type FollowingListResponse = PaginatedFoiRequestFollowList

export type FollowingListError = unknown

export type FollowingCreateData = {
  body: CreateFoiRequestFollow
  query?: {
    format?: 'csv' | 'json'
  }
}

export type FollowingCreateResponse = CreateFoiRequestFollow

export type FollowingCreateError = unknown

export type FollowingDestroyData = {
  path: {
    /**
     * A unique integer value identifying this Request Follower.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type FollowingDestroyResponse = void

export type FollowingDestroyError = unknown

export type GeoregionListData = {
  query?: {
    ancestor?: string
    format?: 'csv' | 'json' | 'jsonp'
    id?: string
    kind?: string
    latlng?: string
    level?: number
    /**
     * Number of results to return per page.
     */
    limit?: number
    name?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    q?: string
    region_identifier?: string
    slug?: string
  }
}

export type GeoregionListResponse = PaginatedGeoRegionList

export type GeoregionListError = unknown

export type GeoregionRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Geo Region.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionRetrieveResponse = GeoRegionDetail

export type GeoregionRetrieveError = unknown

export type GeoregionAutocompleteRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionAutocompleteRetrieveResponse = GeoRegion

export type GeoregionAutocompleteRetrieveError = unknown

export type GeoregionReconciliationRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionReconciliationRetrieveResponse = GeoRegion

export type GeoregionReconciliationRetrieveError = unknown

export type GeoregionReconciliationCreateData = {
  body: GeoRegion
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionReconciliationCreateResponse = GeoRegion

export type GeoregionReconciliationCreateError = unknown

export type GeoregionReconciliationFlyoutRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionReconciliationFlyoutRetrieveResponse = GeoRegion

export type GeoregionReconciliationFlyoutRetrieveError = unknown

export type GeoregionReconciliationFlyoutCreateData = {
  body: GeoRegion
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionReconciliationFlyoutCreateResponse = GeoRegion

export type GeoregionReconciliationFlyoutCreateError = unknown

export type GeoregionReconciliationProposePropertiesRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionReconciliationProposePropertiesRetrieveResponse = GeoRegion

export type GeoregionReconciliationProposePropertiesRetrieveError = unknown

export type GeoregionReconciliationProposePropertiesCreateData = {
  body: GeoRegion
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionReconciliationProposePropertiesCreateResponse = GeoRegion

export type GeoregionReconciliationProposePropertiesCreateError = unknown

export type GeoregionReconciliationSuggestServiceRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionReconciliationSuggestServiceRetrieveResponse = GeoRegion

export type GeoregionReconciliationSuggestServiceRetrieveError = unknown

export type GeoregionReconciliationSuggestServiceCreateData = {
  body: GeoRegion
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type GeoregionReconciliationSuggestServiceCreateResponse = GeoRegion

export type GeoregionReconciliationSuggestServiceCreateError = unknown

export type JurisdictionListData = {
  query?: {
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type JurisdictionListResponse = PaginatedJurisdictionList

export type JurisdictionListError = unknown

export type JurisdictionRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Jurisdiction.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type JurisdictionRetrieveResponse = Jurisdiction

export type JurisdictionRetrieveError = unknown

export type LawListData = {
  query?: {
    format?: 'csv' | 'json'
    id?: string
    jurisdiction?: number
    /**
     * Number of results to return per page.
     */
    limit?: number
    mediator?: number
    meta?: boolean
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    q?: string
  }
}

export type LawListResponse = PaginatedFoiLawList

export type LawListError = unknown

export type LawRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Law.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type LawRetrieveResponse = FoiLaw

export type LawRetrieveError = unknown

export type LawAutocompleteRetrieveData = {
  query?: {
    format?: 'csv' | 'json'
  }
}

export type LawAutocompleteRetrieveResponse = FoiLaw

export type LawAutocompleteRetrieveError = unknown

export type MessageListData = {
  query?: {
    format?: 'csv' | 'json'
    is_response?: boolean
    /**
     * * `email` - email
     * * `post` - postal mail
     * * `fax` - fax
     * * `upload` - upload
     * * `phone` - phone call
     * * `visit` - visit in person
     * * `import` - automatically imported
     */
    kind?: 'email' | 'fax' | 'import' | 'phone' | 'post' | 'upload' | 'visit'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    request?: number
  }
}

export type MessageListResponse = PaginatedFoiMessageList

export type MessageListError = unknown

export type MessageRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Message.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type MessageRetrieveResponse = FoiMessage

export type MessageRetrieveError = unknown

export type MessageDraftListData = {
  query?: {
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    request?: number
  }
}

export type MessageDraftListResponse = PaginatedFoiMessageDraftList

export type MessageDraftListError = unknown

export type MessageDraftCreateData = {
  body: FoiMessageDraft
  query?: {
    format?: 'csv' | 'json'
  }
}

export type MessageDraftCreateResponse = FoiMessageDraft

export type MessageDraftCreateError = unknown

export type MessageDraftRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Message Draft.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type MessageDraftRetrieveResponse = FoiMessageDraft

export type MessageDraftRetrieveError = unknown

export type MessageDraftUpdateData = {
  body: FoiMessageDraft
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Message Draft.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type MessageDraftUpdateResponse = FoiMessageDraft

export type MessageDraftUpdateError = unknown

export type MessageDraftPartialUpdateData = {
  body?: PatchedFoiMessageDraft
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Message Draft.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type MessageDraftPartialUpdateResponse = FoiMessageDraft

export type MessageDraftPartialUpdateError = unknown

export type MessageDraftDestroyData = {
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Message Draft.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type MessageDraftDestroyResponse = void

export type MessageDraftDestroyError = unknown

export type MessageDraftPublishCreateData = {
  body: FoiMessageDraft
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Message Draft.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type MessageDraftPublishCreateResponse = FoiMessageDraft

export type MessageDraftPublishCreateError = unknown

export type PageListData = {
  query?: {
    format?: 'csv' | 'json' | 'rss'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type PageListResponse = PaginatedPageList

export type PageListError = unknown

export type PageannotationListData = {
  query?: {
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type PageannotationListResponse = PaginatedPageAnnotationList

export type PageannotationListError = unknown

export type PageannotationCreateData = {
  body: CreatePageAnnotation
  query?: {
    format?: 'csv' | 'json'
  }
}

export type PageannotationCreateResponse = CreatePageAnnotation

export type PageannotationCreateError = unknown

export type PageannotationRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this page annotation.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type PageannotationRetrieveResponse = PageAnnotation

export type PageannotationRetrieveError = unknown

export type PageannotationDestroyData = {
  path: {
    /**
     * A unique integer value identifying this page annotation.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type PageannotationDestroyResponse = void

export type PageannotationDestroyError = unknown

export type ProblemreportListData = {
  query?: {
    format?: 'csv' | 'json'
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
  }
}

export type ProblemreportListResponse = PaginatedProblemReportList

export type ProblemreportListError = unknown

export type ProblemreportRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this problem report.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type ProblemreportRetrieveResponse = ProblemReport

export type ProblemreportRetrieveError = unknown

export type ProblemreportClaimCreateData = {
  body: ProblemReport
  path: {
    /**
     * A unique integer value identifying this problem report.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type ProblemreportClaimCreateResponse = ProblemReport

export type ProblemreportClaimCreateError = unknown

export type ProblemreportEscalateCreateData = {
  body: ProblemReport
  path: {
    /**
     * A unique integer value identifying this problem report.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type ProblemreportEscalateCreateResponse = ProblemReport

export type ProblemreportEscalateCreateError = unknown

export type ProblemreportResolveCreateData = {
  body: ProblemReport
  path: {
    /**
     * A unique integer value identifying this problem report.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type ProblemreportResolveCreateResponse = ProblemReport

export type ProblemreportResolveCreateError = unknown

export type ProblemreportUnclaimCreateData = {
  body: ProblemReport
  path: {
    /**
     * A unique integer value identifying this problem report.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type ProblemreportUnclaimCreateResponse = ProblemReport

export type ProblemreportUnclaimCreateError = unknown

export type PublicbodyListData = {
  query?: {
    category?: Array<string>
    classification?: number
    classification_id?: number | null
    format?: 'csv' | 'json' | 'jsonp'
    jurisdiction?: number
    /**
     * Number of results to return per page.
     */
    limit?: number
    lnglat?: string
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    q?: string
    regions?: string
    slug?: string
  }
}

export type PublicbodyListResponse = PaginatedPublicBodyListList

export type PublicbodyListError = unknown

export type PublicbodyRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Public Body.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyRetrieveResponse = PublicBody

export type PublicbodyRetrieveError = unknown

export type PublicbodyAutocompleteRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyAutocompleteRetrieveResponse = PublicBodyList

export type PublicbodyAutocompleteRetrieveError = unknown

export type PublicbodyReconciliationRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyReconciliationRetrieveResponse = PublicBodyList

export type PublicbodyReconciliationRetrieveError = unknown

export type PublicbodyReconciliationCreateData = {
  body: PublicBodyList
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyReconciliationCreateResponse = PublicBodyList

export type PublicbodyReconciliationCreateError = unknown

export type PublicbodyReconciliationFlyoutRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyReconciliationFlyoutRetrieveResponse = PublicBodyList

export type PublicbodyReconciliationFlyoutRetrieveError = unknown

export type PublicbodyReconciliationFlyoutCreateData = {
  body: PublicBodyList
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyReconciliationFlyoutCreateResponse = PublicBodyList

export type PublicbodyReconciliationFlyoutCreateError = unknown

export type PublicbodyReconciliationProposePropertiesRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyReconciliationProposePropertiesRetrieveResponse =
  PublicBodyList

export type PublicbodyReconciliationProposePropertiesRetrieveError = unknown

export type PublicbodyReconciliationProposePropertiesCreateData = {
  body: PublicBodyList
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyReconciliationProposePropertiesCreateResponse =
  PublicBodyList

export type PublicbodyReconciliationProposePropertiesCreateError = unknown

export type PublicbodyReconciliationSuggestServiceRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyReconciliationSuggestServiceRetrieveResponse =
  PublicBodyList

export type PublicbodyReconciliationSuggestServiceRetrieveError = unknown

export type PublicbodyReconciliationSuggestServiceCreateData = {
  body: PublicBodyList
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodyReconciliationSuggestServiceCreateResponse =
  PublicBodyList

export type PublicbodyReconciliationSuggestServiceCreateError = unknown

export type PublicbodySearchRetrieveData = {
  query?: {
    format?: 'csv' | 'json' | 'jsonp'
  }
}

export type PublicbodySearchRetrieveResponse = PublicBodyList

export type PublicbodySearchRetrieveError = unknown

export type RequestListData = {
  query?: {
    campaign?: number
    categories?: string
    checked?: boolean
    classification?: string
    costs_max?: string
    costs_min?: string
    created_at_after?: Date
    created_at_before?: Date
    follower?: string
    format?: 'csv' | 'json'
    has_same?: boolean
    is_foi?: boolean
    jurisdiction?: number
    law?: number
    /**
     * Number of results to return per page.
     */
    limit?: number
    /**
     * The initial index from which to return the results.
     */
    offset?: number
    project?: number
    public_body?: number
    reference?: string
    /**
     * * `successful` - Request Successful
     * * `partially_successful` - Request partially successful
     * * `not_held` - Information not held
     * * `refused` - Request refused
     * * `user_withdrew_costs` - Request was withdrawn due to costs
     * * `user_withdrew` - Request was withdrawn
     */
    resolution?:
      | 'not_held'
      | 'partially_successful'
      | 'refused'
      | 'successful'
      | 'user_withdrew'
      | 'user_withdrew_costs'
    slug?: string
    /**
     * * `awaiting_user_confirmation` - Awaiting user confirmation
     * * `publicbody_needed` - Public Body needed
     * * `awaiting_publicbody_confirmation` - Awaiting Public Body confirmation
     * * `awaiting_response` - Awaiting response
     * * `awaiting_classification` - Request awaits classification
     * * `asleep` - Request asleep
     * * `resolved` - Request resolved
     */
    status?:
      | 'asleep'
      | 'awaiting_classification'
      | 'awaiting_publicbody_confirmation'
      | 'awaiting_response'
      | 'awaiting_user_confirmation'
      | 'publicbody_needed'
      | 'resolved'
    tags?: string
    user?: number
  }
}

export type RequestListResponse = PaginatedFoiRequestListList

export type RequestListError = unknown

export type RequestCreateData = {
  body: MakeRequest
  query?: {
    format?: 'csv' | 'json'
  }
}

export type RequestCreateResponse = MakeRequest

export type RequestCreateError = unknown

export type RequestRetrieveData = {
  path: {
    /**
     * A unique integer value identifying this Freedom of Information Request.
     */
    id: number
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type RequestRetrieveResponse = FoiRequestDetail

export type RequestRetrieveError = unknown

export type RequestSearchRetrieveData = {
  query?: {
    format?: 'csv' | 'json'
  }
}

export type RequestSearchRetrieveResponse = FoiRequestList

export type RequestSearchRetrieveError = unknown

export type RequestTagsAutocompleteRetrieveData = {
  query?: {
    format?: 'csv' | 'json'
  }
}

export type RequestTagsAutocompleteRetrieveResponse = FoiRequestList

export type RequestTagsAutocompleteRetrieveError = unknown

export type UploadCreateData = {
  body?: UploadCreate
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UploadCreateResponse = UploadCreate

export type UploadCreateError = unknown

export type UploadUpdateData = {
  body: Upload
  path: {
    guid: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UploadUpdateResponse = Upload

export type UploadUpdateError = unknown

export type UploadPartialUpdateData = {
  body?: PatchedUpload
  path: {
    guid: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UploadPartialUpdateResponse = Upload

export type UploadPartialUpdateError = unknown

export type UploadDestroyData = {
  path: {
    guid: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UploadDestroyResponse = void

export type UploadDestroyError = unknown

export type UserRetrieveData = {
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UserRetrieveResponse = User

export type UserRetrieveError = unknown

export type UserpreferenceRetrieveData = {
  path: {
    key: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UserpreferenceRetrieveResponse = UserPreference

export type UserpreferenceRetrieveError = unknown

export type UserpreferenceCreateData = {
  body: UserPreference
  path: {
    key: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UserpreferenceCreateResponse = UserPreference

export type UserpreferenceCreateError = unknown

export type UserpreferenceUpdateData = {
  body: UserPreference
  path: {
    key: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UserpreferenceUpdateResponse = UserPreference

export type UserpreferenceUpdateError = unknown

export type UserpreferencePartialUpdateData = {
  body?: PatchedUserPreference
  path: {
    key: string
  }
  query?: {
    format?: 'csv' | 'json'
  }
}

export type UserpreferencePartialUpdateResponse = UserPreference

export type UserpreferencePartialUpdateError = unknown

export type AttachmentListResponseTransformer = (
  data: any
) => Promise<AttachmentListResponse>

export type PaginatedFoiAttachmentListModelResponseTransformer = (
  data: any
) => PaginatedFoiAttachmentList

export type FoiAttachmentModelResponseTransformer = (data: any) => FoiAttachment

export type DocumentModelResponseTransformer = (data: any) => Document

export const DocumentModelResponseTransformer: DocumentModelResponseTransformer =
  (data) => {
    if (data?.published_at) {
      data.published_at = new Date(data.published_at)
    }
    return data
  }

export const FoiAttachmentModelResponseTransformer: FoiAttachmentModelResponseTransformer =
  (data) => {
    if (data?.document) {
      DocumentModelResponseTransformer(data.document)
    }
    return data
  }

export const PaginatedFoiAttachmentListModelResponseTransformer: PaginatedFoiAttachmentListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiAttachmentModelResponseTransformer)
    }
    return data
  }

export const AttachmentListResponseTransformer: AttachmentListResponseTransformer =
  async (data) => {
    PaginatedFoiAttachmentListModelResponseTransformer(data)
    return data
  }

export type AttachmentCreateResponseTransformer = (
  data: any
) => Promise<AttachmentCreateResponse>

export const AttachmentCreateResponseTransformer: AttachmentCreateResponseTransformer =
  async (data) => {
    FoiAttachmentModelResponseTransformer(data)
    return data
  }

export type AttachmentRetrieveResponseTransformer = (
  data: any
) => Promise<AttachmentRetrieveResponse>

export const AttachmentRetrieveResponseTransformer: AttachmentRetrieveResponseTransformer =
  async (data) => {
    FoiAttachmentModelResponseTransformer(data)
    return data
  }

export type ConvertImagesToPdfResponseTransformer = (
  data: any
) => Promise<ConvertImagesToPdfResponse>

export const ConvertImagesToPdfResponseTransformer: ConvertImagesToPdfResponseTransformer =
  async (data) => {
    FoiAttachmentModelResponseTransformer(data)
    return data
  }

export type CampaignListResponseTransformer = (
  data: any
) => Promise<CampaignListResponse>

export type PaginatedCampaignListModelResponseTransformer = (
  data: any
) => PaginatedCampaignList

export type CampaignModelResponseTransformer = (data: any) => Campaign

export const CampaignModelResponseTransformer: CampaignModelResponseTransformer =
  (data) => {
    if (data?.start_date) {
      data.start_date = new Date(data.start_date)
    }
    return data
  }

export const PaginatedCampaignListModelResponseTransformer: PaginatedCampaignListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(CampaignModelResponseTransformer)
    }
    return data
  }

export const CampaignListResponseTransformer: CampaignListResponseTransformer =
  async (data) => {
    PaginatedCampaignListModelResponseTransformer(data)
    return data
  }

export type CampaignRetrieveResponseTransformer = (
  data: any
) => Promise<CampaignRetrieveResponse>

export const CampaignRetrieveResponseTransformer: CampaignRetrieveResponseTransformer =
  async (data) => {
    CampaignModelResponseTransformer(data)
    return data
  }

export type DocumentListResponseTransformer = (
  data: any
) => Promise<DocumentListResponse>

export type PaginatedDocumentListModelResponseTransformer = (
  data: any
) => PaginatedDocumentList

export const PaginatedDocumentListModelResponseTransformer: PaginatedDocumentListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(DocumentModelResponseTransformer)
    }
    return data
  }

export const DocumentListResponseTransformer: DocumentListResponseTransformer =
  async (data) => {
    PaginatedDocumentListModelResponseTransformer(data)
    return data
  }

export type DocumentRetrieveResponseTransformer = (
  data: any
) => Promise<DocumentRetrieveResponse>

export type DocumentDetailModelResponseTransformer = (
  data: any
) => DocumentDetail

export const DocumentDetailModelResponseTransformer: DocumentDetailModelResponseTransformer =
  (data) => {
    if (data?.published_at) {
      data.published_at = new Date(data.published_at)
    }
    return data
  }

export const DocumentRetrieveResponseTransformer: DocumentRetrieveResponseTransformer =
  async (data) => {
    DocumentDetailModelResponseTransformer(data)
    return data
  }

export type DocumentPartialUpdateResponseTransformer = (
  data: any
) => Promise<DocumentPartialUpdateResponse>

export const DocumentPartialUpdateResponseTransformer: DocumentPartialUpdateResponseTransformer =
  async (data) => {
    DocumentModelResponseTransformer(data)
    return data
  }

export type DocumentOembedRetrieveResponseTransformer = (
  data: any
) => Promise<DocumentOembedRetrieveResponse>

export const DocumentOembedRetrieveResponseTransformer: DocumentOembedRetrieveResponseTransformer =
  async (data) => {
    DocumentModelResponseTransformer(data)
    return data
  }

export type DocumentcollectionListResponseTransformer = (
  data: any
) => Promise<DocumentcollectionListResponse>

export type PaginatedDocumentCollectionListModelResponseTransformer = (
  data: any
) => PaginatedDocumentCollectionList

export type DocumentCollectionModelResponseTransformer = (
  data: any
) => DocumentCollection

export const DocumentCollectionModelResponseTransformer: DocumentCollectionModelResponseTransformer =
  (data) => {
    if (data?.created_at) {
      data.created_at = new Date(data.created_at)
    }
    if (data?.updated_at) {
      data.updated_at = new Date(data.updated_at)
    }
    return data
  }

export const PaginatedDocumentCollectionListModelResponseTransformer: PaginatedDocumentCollectionListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(DocumentCollectionModelResponseTransformer)
    }
    return data
  }

export const DocumentcollectionListResponseTransformer: DocumentcollectionListResponseTransformer =
  async (data) => {
    PaginatedDocumentCollectionListModelResponseTransformer(data)
    return data
  }

export type DocumentcollectionRetrieveResponseTransformer = (
  data: any
) => Promise<DocumentcollectionRetrieveResponse>

export const DocumentcollectionRetrieveResponseTransformer: DocumentcollectionRetrieveResponseTransformer =
  async (data) => {
    DocumentCollectionModelResponseTransformer(data)
    return data
  }

export type DocumentcollectionOembedRetrieveResponseTransformer = (
  data: any
) => Promise<DocumentcollectionOembedRetrieveResponse>

export const DocumentcollectionOembedRetrieveResponseTransformer: DocumentcollectionOembedRetrieveResponseTransformer =
  async (data) => {
    DocumentCollectionModelResponseTransformer(data)
    return data
  }

export type FollowingListResponseTransformer = (
  data: any
) => Promise<FollowingListResponse>

export type PaginatedFoiRequestFollowListModelResponseTransformer = (
  data: any
) => PaginatedFoiRequestFollowList

export type FoiRequestFollowModelResponseTransformer = (
  data: any
) => FoiRequestFollow

export const FoiRequestFollowModelResponseTransformer: FoiRequestFollowModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    return data
  }

export const PaginatedFoiRequestFollowListModelResponseTransformer: PaginatedFoiRequestFollowListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiRequestFollowModelResponseTransformer)
    }
    return data
  }

export const FollowingListResponseTransformer: FollowingListResponseTransformer =
  async (data) => {
    PaginatedFoiRequestFollowListModelResponseTransformer(data)
    return data
  }

export type GeoregionListResponseTransformer = (
  data: any
) => Promise<GeoregionListResponse>

export type PaginatedGeoRegionListModelResponseTransformer = (
  data: any
) => PaginatedGeoRegionList

export type GeoRegionModelResponseTransformer = (data: any) => GeoRegion

export const GeoRegionModelResponseTransformer: GeoRegionModelResponseTransformer =
  (data) => {
    if (data?.valid_on) {
      data.valid_on = new Date(data.valid_on)
    }
    return data
  }

export const PaginatedGeoRegionListModelResponseTransformer: PaginatedGeoRegionListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(GeoRegionModelResponseTransformer)
    }
    return data
  }

export const GeoregionListResponseTransformer: GeoregionListResponseTransformer =
  async (data) => {
    PaginatedGeoRegionListModelResponseTransformer(data)
    return data
  }

export type GeoregionRetrieveResponseTransformer = (
  data: any
) => Promise<GeoregionRetrieveResponse>

export type GeoRegionDetailModelResponseTransformer = (
  data: any
) => GeoRegionDetail

export const GeoRegionDetailModelResponseTransformer: GeoRegionDetailModelResponseTransformer =
  (data) => {
    if (data?.valid_on) {
      data.valid_on = new Date(data.valid_on)
    }
    return data
  }

export const GeoregionRetrieveResponseTransformer: GeoregionRetrieveResponseTransformer =
  async (data) => {
    GeoRegionDetailModelResponseTransformer(data)
    return data
  }

export type GeoregionAutocompleteRetrieveResponseTransformer = (
  data: any
) => Promise<GeoregionAutocompleteRetrieveResponse>

export const GeoregionAutocompleteRetrieveResponseTransformer: GeoregionAutocompleteRetrieveResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type GeoregionReconciliationRetrieveResponseTransformer = (
  data: any
) => Promise<GeoregionReconciliationRetrieveResponse>

export const GeoregionReconciliationRetrieveResponseTransformer: GeoregionReconciliationRetrieveResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type GeoregionReconciliationCreateResponseTransformer = (
  data: any
) => Promise<GeoregionReconciliationCreateResponse>

export const GeoregionReconciliationCreateResponseTransformer: GeoregionReconciliationCreateResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type GeoregionReconciliationFlyoutRetrieveResponseTransformer = (
  data: any
) => Promise<GeoregionReconciliationFlyoutRetrieveResponse>

export const GeoregionReconciliationFlyoutRetrieveResponseTransformer: GeoregionReconciliationFlyoutRetrieveResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type GeoregionReconciliationFlyoutCreateResponseTransformer = (
  data: any
) => Promise<GeoregionReconciliationFlyoutCreateResponse>

export const GeoregionReconciliationFlyoutCreateResponseTransformer: GeoregionReconciliationFlyoutCreateResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type GeoregionReconciliationProposePropertiesRetrieveResponseTransformer =
  (
    data: any
  ) => Promise<GeoregionReconciliationProposePropertiesRetrieveResponse>

export const GeoregionReconciliationProposePropertiesRetrieveResponseTransformer: GeoregionReconciliationProposePropertiesRetrieveResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type GeoregionReconciliationProposePropertiesCreateResponseTransformer =
  (data: any) => Promise<GeoregionReconciliationProposePropertiesCreateResponse>

export const GeoregionReconciliationProposePropertiesCreateResponseTransformer: GeoregionReconciliationProposePropertiesCreateResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type GeoregionReconciliationSuggestServiceRetrieveResponseTransformer = (
  data: any
) => Promise<GeoregionReconciliationSuggestServiceRetrieveResponse>

export const GeoregionReconciliationSuggestServiceRetrieveResponseTransformer: GeoregionReconciliationSuggestServiceRetrieveResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type GeoregionReconciliationSuggestServiceCreateResponseTransformer = (
  data: any
) => Promise<GeoregionReconciliationSuggestServiceCreateResponse>

export const GeoregionReconciliationSuggestServiceCreateResponseTransformer: GeoregionReconciliationSuggestServiceCreateResponseTransformer =
  async (data) => {
    GeoRegionModelResponseTransformer(data)
    return data
  }

export type JurisdictionListResponseTransformer = (
  data: any
) => Promise<JurisdictionListResponse>

export type PaginatedJurisdictionListModelResponseTransformer = (
  data: any
) => PaginatedJurisdictionList

export type JurisdictionModelResponseTransformer = (data: any) => Jurisdiction

export const JurisdictionModelResponseTransformer: JurisdictionModelResponseTransformer =
  (data) => {
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const PaginatedJurisdictionListModelResponseTransformer: PaginatedJurisdictionListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(JurisdictionModelResponseTransformer)
    }
    return data
  }

export const JurisdictionListResponseTransformer: JurisdictionListResponseTransformer =
  async (data) => {
    PaginatedJurisdictionListModelResponseTransformer(data)
    return data
  }

export type JurisdictionRetrieveResponseTransformer = (
  data: any
) => Promise<JurisdictionRetrieveResponse>

export const JurisdictionRetrieveResponseTransformer: JurisdictionRetrieveResponseTransformer =
  async (data) => {
    JurisdictionModelResponseTransformer(data)
    return data
  }

export type LawListResponseTransformer = (data: any) => Promise<LawListResponse>

export type PaginatedFoiLawListModelResponseTransformer = (
  data: any
) => PaginatedFoiLawList

export type FoiLawModelResponseTransformer = (data: any) => FoiLaw

export const FoiLawModelResponseTransformer: FoiLawModelResponseTransformer = (
  data
) => {
  if (data?.created) {
    data.created = new Date(data.created)
  }
  return data
}

export const PaginatedFoiLawListModelResponseTransformer: PaginatedFoiLawListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiLawModelResponseTransformer)
    }
    return data
  }

export const LawListResponseTransformer: LawListResponseTransformer = async (
  data
) => {
  PaginatedFoiLawListModelResponseTransformer(data)
  return data
}

export type LawRetrieveResponseTransformer = (
  data: any
) => Promise<LawRetrieveResponse>

export const LawRetrieveResponseTransformer: LawRetrieveResponseTransformer =
  async (data) => {
    FoiLawModelResponseTransformer(data)
    return data
  }

export type LawAutocompleteRetrieveResponseTransformer = (
  data: any
) => Promise<LawAutocompleteRetrieveResponse>

export const LawAutocompleteRetrieveResponseTransformer: LawAutocompleteRetrieveResponseTransformer =
  async (data) => {
    FoiLawModelResponseTransformer(data)
    return data
  }

export type MessageListResponseTransformer = (
  data: any
) => Promise<MessageListResponse>

export type PaginatedFoiMessageListModelResponseTransformer = (
  data: any
) => PaginatedFoiMessageList

export type FoiMessageModelResponseTransformer = (data: any) => FoiMessage

export const FoiMessageModelResponseTransformer: FoiMessageModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const PaginatedFoiMessageListModelResponseTransformer: PaginatedFoiMessageListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiMessageModelResponseTransformer)
    }
    return data
  }

export const MessageListResponseTransformer: MessageListResponseTransformer =
  async (data) => {
    PaginatedFoiMessageListModelResponseTransformer(data)
    return data
  }

export type MessageRetrieveResponseTransformer = (
  data: any
) => Promise<MessageRetrieveResponse>

export const MessageRetrieveResponseTransformer: MessageRetrieveResponseTransformer =
  async (data) => {
    FoiMessageModelResponseTransformer(data)
    return data
  }

export type MessageDraftListResponseTransformer = (
  data: any
) => Promise<MessageDraftListResponse>

export type PaginatedFoiMessageDraftListModelResponseTransformer = (
  data: any
) => PaginatedFoiMessageDraftList

export type FoiMessageDraftModelResponseTransformer = (
  data: any
) => FoiMessageDraft

export const FoiMessageDraftModelResponseTransformer: FoiMessageDraftModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const PaginatedFoiMessageDraftListModelResponseTransformer: PaginatedFoiMessageDraftListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiMessageDraftModelResponseTransformer)
    }
    return data
  }

export const MessageDraftListResponseTransformer: MessageDraftListResponseTransformer =
  async (data) => {
    PaginatedFoiMessageDraftListModelResponseTransformer(data)
    return data
  }

export type MessageDraftCreateResponseTransformer = (
  data: any
) => Promise<MessageDraftCreateResponse>

export const MessageDraftCreateResponseTransformer: MessageDraftCreateResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type MessageDraftRetrieveResponseTransformer = (
  data: any
) => Promise<MessageDraftRetrieveResponse>

export const MessageDraftRetrieveResponseTransformer: MessageDraftRetrieveResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type MessageDraftUpdateResponseTransformer = (
  data: any
) => Promise<MessageDraftUpdateResponse>

export const MessageDraftUpdateResponseTransformer: MessageDraftUpdateResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type MessageDraftPartialUpdateResponseTransformer = (
  data: any
) => Promise<MessageDraftPartialUpdateResponse>

export const MessageDraftPartialUpdateResponseTransformer: MessageDraftPartialUpdateResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type MessageDraftPublishCreateResponseTransformer = (
  data: any
) => Promise<MessageDraftPublishCreateResponse>

export const MessageDraftPublishCreateResponseTransformer: MessageDraftPublishCreateResponseTransformer =
  async (data) => {
    FoiMessageDraftModelResponseTransformer(data)
    return data
  }

export type PageannotationListResponseTransformer = (
  data: any
) => Promise<PageannotationListResponse>

export type PaginatedPageAnnotationListModelResponseTransformer = (
  data: any
) => PaginatedPageAnnotationList

export type PageAnnotationModelResponseTransformer = (
  data: any
) => PageAnnotation

export const PageAnnotationModelResponseTransformer: PageAnnotationModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    return data
  }

export const PaginatedPageAnnotationListModelResponseTransformer: PaginatedPageAnnotationListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(PageAnnotationModelResponseTransformer)
    }
    return data
  }

export const PageannotationListResponseTransformer: PageannotationListResponseTransformer =
  async (data) => {
    PaginatedPageAnnotationListModelResponseTransformer(data)
    return data
  }

export type PageannotationRetrieveResponseTransformer = (
  data: any
) => Promise<PageannotationRetrieveResponse>

export const PageannotationRetrieveResponseTransformer: PageannotationRetrieveResponseTransformer =
  async (data) => {
    PageAnnotationModelResponseTransformer(data)
    return data
  }

export type ProblemreportListResponseTransformer = (
  data: any
) => Promise<ProblemreportListResponse>

export type PaginatedProblemReportListModelResponseTransformer = (
  data: any
) => PaginatedProblemReportList

export type ProblemReportModelResponseTransformer = (data: any) => ProblemReport

export const ProblemReportModelResponseTransformer: ProblemReportModelResponseTransformer =
  (data) => {
    if (data?.timestamp) {
      data.timestamp = new Date(data.timestamp)
    }
    if (data?.resolution_timestamp) {
      data.resolution_timestamp = new Date(data.resolution_timestamp)
    }
    if (data?.claimed) {
      data.claimed = new Date(data.claimed)
    }
    if (data?.escalated) {
      data.escalated = new Date(data.escalated)
    }
    return data
  }

export const PaginatedProblemReportListModelResponseTransformer: PaginatedProblemReportListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(ProblemReportModelResponseTransformer)
    }
    return data
  }

export const ProblemreportListResponseTransformer: ProblemreportListResponseTransformer =
  async (data) => {
    PaginatedProblemReportListModelResponseTransformer(data)
    return data
  }

export type ProblemreportRetrieveResponseTransformer = (
  data: any
) => Promise<ProblemreportRetrieveResponse>

export const ProblemreportRetrieveResponseTransformer: ProblemreportRetrieveResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type ProblemreportClaimCreateResponseTransformer = (
  data: any
) => Promise<ProblemreportClaimCreateResponse>

export const ProblemreportClaimCreateResponseTransformer: ProblemreportClaimCreateResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type ProblemreportEscalateCreateResponseTransformer = (
  data: any
) => Promise<ProblemreportEscalateCreateResponse>

export const ProblemreportEscalateCreateResponseTransformer: ProblemreportEscalateCreateResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type ProblemreportResolveCreateResponseTransformer = (
  data: any
) => Promise<ProblemreportResolveCreateResponse>

export const ProblemreportResolveCreateResponseTransformer: ProblemreportResolveCreateResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type ProblemreportUnclaimCreateResponseTransformer = (
  data: any
) => Promise<ProblemreportUnclaimCreateResponse>

export const ProblemreportUnclaimCreateResponseTransformer: ProblemreportUnclaimCreateResponseTransformer =
  async (data) => {
    ProblemReportModelResponseTransformer(data)
    return data
  }

export type PublicbodyRetrieveResponseTransformer = (
  data: any
) => Promise<PublicbodyRetrieveResponse>

export type PublicBodyModelResponseTransformer = (data: any) => PublicBody

export const PublicBodyModelResponseTransformer: PublicBodyModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.laws)) {
      data.laws.forEach(FoiLawModelResponseTransformer)
    }
    return data
  }

export const PublicbodyRetrieveResponseTransformer: PublicbodyRetrieveResponseTransformer =
  async (data) => {
    PublicBodyModelResponseTransformer(data)
    return data
  }

export type RequestListResponseTransformer = (
  data: any
) => Promise<RequestListResponse>

export type PaginatedFoiRequestListListModelResponseTransformer = (
  data: any
) => PaginatedFoiRequestListList

export type FoiRequestListModelResponseTransformer = (
  data: any
) => FoiRequestList

export const FoiRequestListModelResponseTransformer: FoiRequestListModelResponseTransformer =
  (data) => {
    if (data?.due_date) {
      data.due_date = new Date(data.due_date)
    }
    if (data?.resolved_on) {
      data.resolved_on = new Date(data.resolved_on)
    }
    if (data?.last_message) {
      data.last_message = new Date(data.last_message)
    }
    if (data?.created_at) {
      data.created_at = new Date(data.created_at)
    }
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const PaginatedFoiRequestListListModelResponseTransformer: PaginatedFoiRequestListListModelResponseTransformer =
  (data) => {
    if (Array.isArray(data?.results)) {
      data.results.forEach(FoiRequestListModelResponseTransformer)
    }
    return data
  }

export const RequestListResponseTransformer: RequestListResponseTransformer =
  async (data) => {
    PaginatedFoiRequestListListModelResponseTransformer(data)
    return data
  }

export type RequestRetrieveResponseTransformer = (
  data: any
) => Promise<RequestRetrieveResponse>

export type FoiRequestDetailModelResponseTransformer = (
  data: any
) => FoiRequestDetail

export const FoiRequestDetailModelResponseTransformer: FoiRequestDetailModelResponseTransformer =
  (data) => {
    if (data?.due_date) {
      data.due_date = new Date(data.due_date)
    }
    if (data?.resolved_on) {
      data.resolved_on = new Date(data.resolved_on)
    }
    if (data?.last_message) {
      data.last_message = new Date(data.last_message)
    }
    if (data?.created_at) {
      data.created_at = new Date(data.created_at)
    }
    if (data?.last_modified_at) {
      data.last_modified_at = new Date(data.last_modified_at)
    }
    return data
  }

export const RequestRetrieveResponseTransformer: RequestRetrieveResponseTransformer =
  async (data) => {
    FoiRequestDetailModelResponseTransformer(data)
    return data
  }

export type RequestSearchRetrieveResponseTransformer = (
  data: any
) => Promise<RequestSearchRetrieveResponse>

export const RequestSearchRetrieveResponseTransformer: RequestSearchRetrieveResponseTransformer =
  async (data) => {
    FoiRequestListModelResponseTransformer(data)
    return data
  }

export type RequestTagsAutocompleteRetrieveResponseTransformer = (
  data: any
) => Promise<RequestTagsAutocompleteRetrieveResponse>

export const RequestTagsAutocompleteRetrieveResponseTransformer: RequestTagsAutocompleteRetrieveResponseTransformer =
  async (data) => {
    FoiRequestListModelResponseTransformer(data)
    return data
  }

export type UploadCreateResponseTransformer = (
  data: any
) => Promise<UploadCreateResponse>

export type UploadCreateModelResponseTransformer = (data: any) => UploadCreate

export const UploadCreateModelResponseTransformer: UploadCreateModelResponseTransformer =
  (data) => {
    if (data?.expires) {
      data.expires = new Date(data.expires)
    }
    return data
  }

export const UploadCreateResponseTransformer: UploadCreateResponseTransformer =
  async (data) => {
    UploadCreateModelResponseTransformer(data)
    return data
  }

export type UploadUpdateResponseTransformer = (
  data: any
) => Promise<UploadUpdateResponse>

export type UploadModelResponseTransformer = (data: any) => Upload

export const UploadModelResponseTransformer: UploadModelResponseTransformer = (
  data
) => {
  if (data?.expires) {
    data.expires = new Date(data.expires)
  }
  return data
}

export const UploadUpdateResponseTransformer: UploadUpdateResponseTransformer =
  async (data) => {
    UploadModelResponseTransformer(data)
    return data
  }

export type UploadPartialUpdateResponseTransformer = (
  data: any
) => Promise<UploadPartialUpdateResponse>

export const UploadPartialUpdateResponseTransformer: UploadPartialUpdateResponseTransformer =
  async (data) => {
    UploadModelResponseTransformer(data)
    return data
  }
