// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client'
import type {
  AttachmentListData,
  AttachmentListResponses,
  AttachmentCreateData,
  AttachmentCreateResponses,
  AttachmentDestroyData,
  AttachmentDestroyResponses,
  AttachmentRetrieveData,
  AttachmentRetrieveResponses,
  AttachmentApproveCreateData,
  AttachmentApproveCreateResponses,
  AttachmentToDocumentCreateData,
  AttachmentToDocumentCreateResponses,
  AttachmentUnapproveCreateData,
  AttachmentUnapproveCreateResponses,
  ConvertImagesToPdfData,
  ConvertImagesToPdfResponses,
  CampaignListData,
  CampaignListResponses,
  CampaignRetrieveData,
  CampaignRetrieveResponses,
  CategoryListData,
  CategoryListResponses,
  CategoryRetrieveData,
  CategoryRetrieveResponses,
  CategoryAutocompleteRetrieveData,
  CategoryAutocompleteRetrieveResponses,
  ClassificationListData,
  ClassificationListResponses,
  ClassificationRetrieveData,
  ClassificationRetrieveResponses,
  DocumentListData,
  DocumentListResponses,
  DocumentRetrieveData,
  DocumentRetrieveResponses,
  DocumentPartialUpdateData,
  DocumentPartialUpdateResponses,
  DocumentUpdateData,
  DocumentUpdateResponses,
  DocumentOembedRetrieveData,
  DocumentOembedRetrieveResponses,
  DocumentcollectionListData,
  DocumentcollectionListResponses,
  DocumentcollectionRetrieveData,
  DocumentcollectionRetrieveResponses,
  DocumentcollectionOembedRetrieveData,
  DocumentcollectionOembedRetrieveResponses,
  FollowingListData,
  FollowingListResponses,
  FollowingCreateData,
  FollowingCreateResponses,
  FollowingDestroyData,
  FollowingDestroyResponses,
  GeoregionListData,
  GeoregionListResponses,
  GeoregionRetrieveData,
  GeoregionRetrieveResponses,
  GeoregionAutocompleteRetrieveData,
  GeoregionAutocompleteRetrieveResponses,
  GeoregionReconciliationRetrieveData,
  GeoregionReconciliationRetrieveResponses,
  GeoregionReconciliationCreateData,
  GeoregionReconciliationCreateResponses,
  GeoregionReconciliationFlyoutRetrieveData,
  GeoregionReconciliationFlyoutRetrieveResponses,
  GeoregionReconciliationFlyoutCreateData,
  GeoregionReconciliationFlyoutCreateResponses,
  GeoregionReconciliationProposePropertiesRetrieveData,
  GeoregionReconciliationProposePropertiesRetrieveResponses,
  GeoregionReconciliationProposePropertiesCreateData,
  GeoregionReconciliationProposePropertiesCreateResponses,
  GeoregionReconciliationSuggestServiceRetrieveData,
  GeoregionReconciliationSuggestServiceRetrieveResponses,
  GeoregionReconciliationSuggestServiceCreateData,
  GeoregionReconciliationSuggestServiceCreateResponses,
  JurisdictionListData,
  JurisdictionListResponses,
  JurisdictionRetrieveData,
  JurisdictionRetrieveResponses,
  LawListData,
  LawListResponses,
  LawRetrieveData,
  LawRetrieveResponses,
  LawAutocompleteRetrieveData,
  LawAutocompleteRetrieveResponses,
  MessageListData,
  MessageListResponses,
  MessageCreateData,
  MessageCreateResponses,
  MessageRetrieveData,
  MessageRetrieveResponses,
  MessagePartialUpdateData,
  MessagePartialUpdateResponses,
  MessageUpdateData,
  MessageUpdateResponses,
  MessagePublishCreateData,
  MessagePublishCreateResponses,
  PageListData,
  PageListResponses,
  PageannotationListData,
  PageannotationListResponses,
  PageannotationCreateData,
  PageannotationCreateResponses,
  PageannotationDestroyData,
  PageannotationDestroyResponses,
  PageannotationRetrieveData,
  PageannotationRetrieveResponses,
  ProblemreportListData,
  ProblemreportListResponses,
  ProblemreportRetrieveData,
  ProblemreportRetrieveResponses,
  ProblemreportClaimCreateData,
  ProblemreportClaimCreateResponses,
  ProblemreportEscalateCreateData,
  ProblemreportEscalateCreateResponses,
  ProblemreportResolveCreateData,
  ProblemreportResolveCreateResponses,
  ProblemreportUnclaimCreateData,
  ProblemreportUnclaimCreateResponses,
  PublicbodyListData,
  PublicbodyListResponses,
  PublicbodyRetrieveData,
  PublicbodyRetrieveResponses,
  PublicbodyAutocompleteRetrieveData,
  PublicbodyAutocompleteRetrieveResponses,
  PublicbodyReconciliationRetrieveData,
  PublicbodyReconciliationRetrieveResponses,
  PublicbodyReconciliationCreateData,
  PublicbodyReconciliationCreateResponses,
  PublicbodyReconciliationFlyoutRetrieveData,
  PublicbodyReconciliationFlyoutRetrieveResponses,
  PublicbodyReconciliationFlyoutCreateData,
  PublicbodyReconciliationFlyoutCreateResponses,
  PublicbodyReconciliationProposePropertiesRetrieveData,
  PublicbodyReconciliationProposePropertiesRetrieveResponses,
  PublicbodyReconciliationProposePropertiesCreateData,
  PublicbodyReconciliationProposePropertiesCreateResponses,
  PublicbodyReconciliationSuggestServiceRetrieveData,
  PublicbodyReconciliationSuggestServiceRetrieveResponses,
  PublicbodyReconciliationSuggestServiceCreateData,
  PublicbodyReconciliationSuggestServiceCreateResponses,
  PublicbodySearchRetrieveData,
  PublicbodySearchRetrieveResponses,
  RequestListData,
  RequestListResponses,
  RequestCreateData,
  RequestCreateResponses,
  RequestRetrieveData,
  RequestRetrieveResponses,
  RequestPartialUpdateData,
  RequestPartialUpdateResponses,
  RequestUpdateData,
  RequestUpdateResponses,
  RequestSearchRetrieveData,
  RequestSearchRetrieveResponses,
  RequestTagsAutocompleteRetrieveData,
  RequestTagsAutocompleteRetrieveResponses,
  SchemaRetrieveData,
  SchemaRetrieveResponses,
  UploadCreateData,
  UploadCreateResponses,
  UploadDestroyData,
  UploadDestroyResponses,
  UploadPartialUpdateData,
  UploadPartialUpdateResponses,
  UploadUpdateData,
  UploadUpdateResponses,
  UserRetrieveData,
  UserRetrieveResponses,
  UserpreferenceRetrieveData,
  UserpreferenceRetrieveResponses,
  UserpreferencePartialUpdateData,
  UserpreferencePartialUpdateResponses,
  UserpreferenceCreateData,
  UserpreferenceCreateResponses,
  UserpreferenceUpdateData,
  UserpreferenceUpdateResponses
} from './types.gen'
import { client } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const attachmentList = <ThrowOnError extends boolean = false>(
  options?: Options<AttachmentListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AttachmentListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/attachment/',
    ...options
  })
}

export const attachmentCreate = <ThrowOnError extends boolean = false>(
  options: Options<AttachmentCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    AttachmentCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/attachment/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const attachmentDestroy = <ThrowOnError extends boolean = false>(
  options: Options<AttachmentDestroyData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    AttachmentDestroyResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/attachment/{id}/',
    ...options
  })
}

export const attachmentRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<AttachmentRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    AttachmentRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/attachment/{id}/',
    ...options
  })
}

export const attachmentApproveCreate = <ThrowOnError extends boolean = false>(
  options: Options<AttachmentApproveCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    AttachmentApproveCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/attachment/{id}/approve/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const attachmentToDocumentCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<AttachmentToDocumentCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    AttachmentToDocumentCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/attachment/{id}/to_document/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const attachmentUnapproveCreate = <ThrowOnError extends boolean = false>(
  options: Options<AttachmentUnapproveCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    AttachmentUnapproveCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/attachment/{id}/unapprove/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const convertImagesToPdf = <ThrowOnError extends boolean = false>(
  options: Options<ConvertImagesToPdfData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    ConvertImagesToPdfResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/attachment/convert_to_pdf/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const campaignList = <ThrowOnError extends boolean = false>(
  options?: Options<CampaignListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CampaignListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/campaign/',
    ...options
  })
}

export const campaignRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<CampaignRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    CampaignRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/campaign/{id}/',
    ...options
  })
}

export const categoryList = <ThrowOnError extends boolean = false>(
  options?: Options<CategoryListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CategoryListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/category/',
    ...options
  })
}

export const categoryRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<CategoryRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    CategoryRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/category/{id}/',
    ...options
  })
}

export const categoryAutocompleteRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<CategoryAutocompleteRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CategoryAutocompleteRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/category/autocomplete/',
    ...options
  })
}

export const classificationList = <ThrowOnError extends boolean = false>(
  options?: Options<ClassificationListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ClassificationListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/classification/',
    ...options
  })
}

export const classificationRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<ClassificationRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    ClassificationRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/classification/{id}/',
    ...options
  })
}

export const documentList = <ThrowOnError extends boolean = false>(
  options?: Options<DocumentListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    DocumentListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/document/',
    ...options
  })
}

export const documentRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<DocumentRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    DocumentRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/document/{id}/',
    ...options
  })
}

export const documentPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DocumentPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    DocumentPartialUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/document/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const documentUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DocumentUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    DocumentUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/document/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const documentOembedRetrieve = <ThrowOnError extends boolean = false>(
  options?: Options<DocumentOembedRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    DocumentOembedRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/document/oembed/',
    ...options
  })
}

export const documentcollectionList = <ThrowOnError extends boolean = false>(
  options?: Options<DocumentcollectionListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    DocumentcollectionListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/documentcollection/',
    ...options
  })
}

export const documentcollectionRetrieve = <
  ThrowOnError extends boolean = false
>(
  options: Options<DocumentcollectionRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    DocumentcollectionRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/documentcollection/{id}/',
    ...options
  })
}

export const documentcollectionOembedRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<DocumentcollectionOembedRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    DocumentcollectionOembedRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/documentcollection/oembed/',
    ...options
  })
}

export const followingList = <ThrowOnError extends boolean = false>(
  options?: Options<FollowingListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FollowingListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/following/',
    ...options
  })
}

export const followingCreate = <ThrowOnError extends boolean = false>(
  options: Options<FollowingCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    FollowingCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/following/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const followingDestroy = <ThrowOnError extends boolean = false>(
  options: Options<FollowingDestroyData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    FollowingDestroyResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/following/{id}/',
    ...options
  })
}

export const georegionList = <ThrowOnError extends boolean = false>(
  options?: Options<GeoregionListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GeoregionListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/georegion/',
    ...options
  })
}

export const georegionRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<GeoregionRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    GeoregionRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/georegion/{id}/',
    ...options
  })
}

export const georegionAutocompleteRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<GeoregionAutocompleteRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GeoregionAutocompleteRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/georegion/autocomplete/',
    ...options
  })
}

/**
 * This is a OpenRefine Reconciliation API endpoint
 * https://github.com/OpenRefine/OpenRefine/wiki/Reconciliation-Service-API
 * It's a bit messy.
 */
export const georegionReconciliationRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<GeoregionReconciliationRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GeoregionReconciliationRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/georegion/reconciliation/',
    ...options
  })
}

/**
 * This is a OpenRefine Reconciliation API endpoint
 * https://github.com/OpenRefine/OpenRefine/wiki/Reconciliation-Service-API
 * It's a bit messy.
 */
export const georegionReconciliationCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<GeoregionReconciliationCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    GeoregionReconciliationCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/georegion/reconciliation/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Implements OpenRefine Flyout Entry Point
 * https://github.com/OpenRefine/OpenRefine/wiki/Suggest-API#flyout-entry-point
 */
export const georegionReconciliationFlyoutRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<GeoregionReconciliationFlyoutRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GeoregionReconciliationFlyoutRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/georegion/reconciliation-flyout/',
    ...options
  })
}

/**
 * Implements OpenRefine Flyout Entry Point
 * https://github.com/OpenRefine/OpenRefine/wiki/Suggest-API#flyout-entry-point
 */
export const georegionReconciliationFlyoutCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<GeoregionReconciliationFlyoutCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    GeoregionReconciliationFlyoutCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/georegion/reconciliation-flyout/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Implements OpenRefine Data Extension API
 * https://github.com/OpenRefine/OpenRefine/wiki/Data-Extension-API
 */
export const georegionReconciliationProposePropertiesRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<
    GeoregionReconciliationProposePropertiesRetrieveData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).get<
    GeoregionReconciliationProposePropertiesRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/georegion/reconciliation-propose-properties/',
    ...options
  })
}

/**
 * Implements OpenRefine Data Extension API
 * https://github.com/OpenRefine/OpenRefine/wiki/Data-Extension-API
 */
export const georegionReconciliationProposePropertiesCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    GeoregionReconciliationProposePropertiesCreateData,
    ThrowOnError
  >
) => {
  return (options.client ?? client).post<
    GeoregionReconciliationProposePropertiesCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/georegion/reconciliation-propose-properties/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Implements OpenRefine Suggest Entry Point
 * https://github.com/OpenRefine/OpenRefine/wiki/Suggest-API#suggest-entry-point
 *
 * Only implements prefix
 */
export const georegionReconciliationSuggestServiceRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<
    GeoregionReconciliationSuggestServiceRetrieveData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).get<
    GeoregionReconciliationSuggestServiceRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/georegion/reconciliation-suggest-service/',
    ...options
  })
}

/**
 * Implements OpenRefine Suggest Entry Point
 * https://github.com/OpenRefine/OpenRefine/wiki/Suggest-API#suggest-entry-point
 *
 * Only implements prefix
 */
export const georegionReconciliationSuggestServiceCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    GeoregionReconciliationSuggestServiceCreateData,
    ThrowOnError
  >
) => {
  return (options.client ?? client).post<
    GeoregionReconciliationSuggestServiceCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/georegion/reconciliation-suggest-service/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const jurisdictionList = <ThrowOnError extends boolean = false>(
  options?: Options<JurisdictionListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    JurisdictionListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/jurisdiction/',
    ...options
  })
}

export const jurisdictionRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<JurisdictionRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    JurisdictionRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/jurisdiction/{id}/',
    ...options
  })
}

export const lawList = <ThrowOnError extends boolean = false>(
  options?: Options<LawListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    LawListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/law/',
    ...options
  })
}

export const lawRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<LawRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    LawRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/law/{id}/',
    ...options
  })
}

export const lawAutocompleteRetrieve = <ThrowOnError extends boolean = false>(
  options?: Options<LawAutocompleteRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    LawAutocompleteRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/law/autocomplete/',
    ...options
  })
}

export const messageList = <ThrowOnError extends boolean = false>(
  options?: Options<MessageListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    MessageListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/message/',
    ...options
  })
}

export const messageCreate = <ThrowOnError extends boolean = false>(
  options: Options<MessageCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    MessageCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/message/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const messageRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<MessageRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    MessageRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/message/{id}/',
    ...options
  })
}

export const messagePartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<MessagePartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    MessagePartialUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/message/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const messageUpdate = <ThrowOnError extends boolean = false>(
  options: Options<MessageUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    MessageUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/message/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const messagePublishCreate = <ThrowOnError extends boolean = false>(
  options: Options<MessagePublishCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    MessagePublishCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/message/{id}/publish/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const pageList = <ThrowOnError extends boolean = false>(
  options?: Options<PageListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PageListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/page/',
    ...options
  })
}

export const pageannotationList = <ThrowOnError extends boolean = false>(
  options?: Options<PageannotationListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PageannotationListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/pageannotation/',
    ...options
  })
}

export const pageannotationCreate = <ThrowOnError extends boolean = false>(
  options: Options<PageannotationCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    PageannotationCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/pageannotation/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const pageannotationDestroy = <ThrowOnError extends boolean = false>(
  options: Options<PageannotationDestroyData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    PageannotationDestroyResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/pageannotation/{id}/',
    ...options
  })
}

export const pageannotationRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<PageannotationRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    PageannotationRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/pageannotation/{id}/',
    ...options
  })
}

export const problemreportList = <ThrowOnError extends boolean = false>(
  options?: Options<ProblemreportListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ProblemreportListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/problemreport/',
    ...options
  })
}

export const problemreportRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<ProblemreportRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    ProblemreportRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/problemreport/{id}/',
    ...options
  })
}

export const problemreportClaimCreate = <ThrowOnError extends boolean = false>(
  options: Options<ProblemreportClaimCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    ProblemreportClaimCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/problemreport/{id}/claim/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const problemreportEscalateCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<ProblemreportEscalateCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    ProblemreportEscalateCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/problemreport/{id}/escalate/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const problemreportResolveCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<ProblemreportResolveCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    ProblemreportResolveCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/problemreport/{id}/resolve/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const problemreportUnclaimCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<ProblemreportUnclaimCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    ProblemreportUnclaimCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/problemreport/{id}/unclaim/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const publicbodyList = <ThrowOnError extends boolean = false>(
  options?: Options<PublicbodyListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PublicbodyListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/publicbody/',
    ...options
  })
}

export const publicbodyRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<PublicbodyRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    PublicbodyRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/publicbody/{id}/',
    ...options
  })
}

export const publicbodyAutocompleteRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<PublicbodyAutocompleteRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PublicbodyAutocompleteRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/publicbody/autocomplete/',
    ...options
  })
}

/**
 * This is a OpenRefine Reconciliation API endpoint
 * https://github.com/OpenRefine/OpenRefine/wiki/Reconciliation-Service-API
 * It's a bit messy.
 */
export const publicbodyReconciliationRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<PublicbodyReconciliationRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PublicbodyReconciliationRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/publicbody/reconciliation/',
    ...options
  })
}

/**
 * This is a OpenRefine Reconciliation API endpoint
 * https://github.com/OpenRefine/OpenRefine/wiki/Reconciliation-Service-API
 * It's a bit messy.
 */
export const publicbodyReconciliationCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PublicbodyReconciliationCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    PublicbodyReconciliationCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/publicbody/reconciliation/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Implements OpenRefine Flyout Entry Point
 * https://github.com/OpenRefine/OpenRefine/wiki/Suggest-API#flyout-entry-point
 */
export const publicbodyReconciliationFlyoutRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<PublicbodyReconciliationFlyoutRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PublicbodyReconciliationFlyoutRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/publicbody/reconciliation-flyout/',
    ...options
  })
}

/**
 * Implements OpenRefine Flyout Entry Point
 * https://github.com/OpenRefine/OpenRefine/wiki/Suggest-API#flyout-entry-point
 */
export const publicbodyReconciliationFlyoutCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PublicbodyReconciliationFlyoutCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    PublicbodyReconciliationFlyoutCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/publicbody/reconciliation-flyout/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Implements OpenRefine Data Extension API
 * https://github.com/OpenRefine/OpenRefine/wiki/Data-Extension-API
 */
export const publicbodyReconciliationProposePropertiesRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<
    PublicbodyReconciliationProposePropertiesRetrieveData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).get<
    PublicbodyReconciliationProposePropertiesRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/publicbody/reconciliation-propose-properties/',
    ...options
  })
}

/**
 * Implements OpenRefine Data Extension API
 * https://github.com/OpenRefine/OpenRefine/wiki/Data-Extension-API
 */
export const publicbodyReconciliationProposePropertiesCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    PublicbodyReconciliationProposePropertiesCreateData,
    ThrowOnError
  >
) => {
  return (options.client ?? client).post<
    PublicbodyReconciliationProposePropertiesCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/publicbody/reconciliation-propose-properties/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Implements OpenRefine Suggest Entry Point
 * https://github.com/OpenRefine/OpenRefine/wiki/Suggest-API#suggest-entry-point
 *
 * Only implements prefix
 */
export const publicbodyReconciliationSuggestServiceRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<
    PublicbodyReconciliationSuggestServiceRetrieveData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).get<
    PublicbodyReconciliationSuggestServiceRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/publicbody/reconciliation-suggest-service/',
    ...options
  })
}

/**
 * Implements OpenRefine Suggest Entry Point
 * https://github.com/OpenRefine/OpenRefine/wiki/Suggest-API#suggest-entry-point
 *
 * Only implements prefix
 */
export const publicbodyReconciliationSuggestServiceCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    PublicbodyReconciliationSuggestServiceCreateData,
    ThrowOnError
  >
) => {
  return (options.client ?? client).post<
    PublicbodyReconciliationSuggestServiceCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/publicbody/reconciliation-suggest-service/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const publicbodySearchRetrieve = <ThrowOnError extends boolean = false>(
  options?: Options<PublicbodySearchRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PublicbodySearchRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/publicbody/search/',
    ...options
  })
}

export const requestList = <ThrowOnError extends boolean = false>(
  options?: Options<RequestListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RequestListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/request/',
    ...options
  })
}

export const requestCreate = <ThrowOnError extends boolean = false>(
  options: Options<RequestCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    RequestCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/request/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const requestRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<RequestRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    RequestRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/request/{id}/',
    ...options
  })
}

export const requestPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RequestPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    RequestPartialUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/request/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const requestUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RequestUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    RequestUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/request/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const requestSearchRetrieve = <ThrowOnError extends boolean = false>(
  options?: Options<RequestSearchRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RequestSearchRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/request/search/',
    ...options
  })
}

export const requestTagsAutocompleteRetrieve = <
  ThrowOnError extends boolean = false
>(
  options?: Options<RequestTagsAutocompleteRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RequestTagsAutocompleteRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/request/tags/autocomplete/',
    ...options
  })
}

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const schemaRetrieve = <ThrowOnError extends boolean = false>(
  options?: Options<SchemaRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    SchemaRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/schema/',
    ...options
  })
}

export const uploadCreate = <ThrowOnError extends boolean = false>(
  options?: Options<UploadCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UploadCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/upload/',
    ...options,
    headers: {
      'Content-Type': 'application/offset+octet-stream',
      ...options?.headers
    }
  })
}

export const uploadDestroy = <ThrowOnError extends boolean = false>(
  options: Options<UploadDestroyData, ThrowOnError>
) => {
  return (options.client ?? client).delete<
    UploadDestroyResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/upload/{guid}/',
    ...options
  })
}

export const uploadPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UploadPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    UploadPartialUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/upload/{guid}/',
    ...options,
    headers: {
      'Content-Type': 'application/offset+octet-stream',
      ...options.headers
    }
  })
}

export const uploadUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UploadUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    UploadUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/upload/{guid}/',
    ...options,
    headers: {
      'Content-Type': 'application/offset+octet-stream',
      ...options.headers
    }
  })
}

export const userRetrieve = <ThrowOnError extends boolean = false>(
  options?: Options<UserRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/user/',
    ...options
  })
}

export const userpreferenceRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<UserpreferenceRetrieveData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    UserpreferenceRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/userpreference/{key}/',
    ...options
  })
}

export const userpreferencePartialUpdate = <
  ThrowOnError extends boolean = false
>(
  options: Options<UserpreferencePartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<
    UserpreferencePartialUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/userpreference/{key}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const userpreferenceCreate = <ThrowOnError extends boolean = false>(
  options: Options<UserpreferenceCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    UserpreferenceCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/userpreference/{key}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

export const userpreferenceUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UserpreferenceUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).put<
    UserpreferenceUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'sessionid',
        type: 'apiKey'
      }
    ],
    url: '/api/v1/userpreference/{key}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}
