// This file is auto-generated by @hey-api/openapi-ts

export const UserPreferenceSchema = {
  type: 'object',
  properties: {
    value: {
      type: 'string'
    }
  },
  required: ['value']
} as const

export const FoiRequestListSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      type: 'string',
      readOnly: true
    },
    is_foi: {
      type: 'boolean'
    },
    checked: {
      type: 'boolean'
    },
    refusal_reason: {
      type: 'string',
      maxLength: 1024
    },
    costs: {
      type: 'string',
      readOnly: true
    },
    public: {
      type: 'boolean'
    },
    law: {
      type: 'string',
      readOnly: true
    },
    description: {
      type: 'string'
    },
    redacted_description: {
      type: 'string',
      readOnly: true
    },
    summary: {
      type: 'string'
    },
    same_as_count: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    same_as: {
      type: 'string',
      readOnly: true
    },
    due_date: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    resolved_on: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    last_message: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    status: {
      enum: [
        'awaiting_user_confirmation',
        'publicbody_needed',
        'awaiting_publicbody_confirmation',
        'awaiting_response',
        'awaiting_classification',
        'asleep',
        'resolved'
      ],
      type: 'string'
    },
    public_body: {
      type: 'object',
      properties: {
        resource_uri: {
          type: 'string',
          readOnly: true
        },
        id: {
          type: 'integer'
        },
        name: {
          type: 'string',
          maxLength: 255
        },
        slug: {
          type: 'string',
          maxLength: 255,
          pattern: '^[-a-zA-Z0-9_]+$'
        },
        other_names: {
          type: 'string'
        },
        description: {
          type: 'string'
        },
        url: {
          type: 'string',
          format: 'uri',
          nullable: true,
          maxLength: 500,
          pattern:
            '^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\.(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z'
        },
        depth: {
          type: 'integer',
          maximum: 32767,
          minimum: -32768
        },
        classification: {
          type: 'string',
          readOnly: true
        },
        email: {
          type: 'string',
          format: 'email',
          maxLength: 255
        },
        contact: {
          type: 'string'
        },
        address: {
          type: 'string'
        },
        fax: {
          type: 'string',
          maxLength: 50
        },
        request_note: {
          type: 'string'
        },
        number_of_requests: {
          type: 'integer',
          maximum: 2147483647,
          minimum: -2147483648
        },
        site_url: {
          type: 'string'
        },
        jurisdiction: {
          type: 'string',
          readOnly: true
        },
        request_note_html: {
          type: 'string',
          readOnly: true
        },
        geo: {
          type: 'string',
          readOnly: true
        },
        last_modified_at: {
          type: 'string'
        }
      },
      required: ['id', 'name', 'slug', 'site_url', 'last_modified_at'],
      readOnly: true
    },
    resolution: {
      enum: [
        'successful',
        'partially_successful',
        'not_held',
        'refused',
        'user_withdrew_costs',
        'user_withdrew'
      ],
      type: 'string'
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    reference: {
      type: 'string',
      maxLength: 255
    },
    user: {
      type: 'string',
      readOnly: true
    },
    project: {
      type: 'string',
      readOnly: true
    },
    campaign: {
      type: 'string',
      readOnly: true
    },
    tags: {
      type: 'string'
    }
  },
  required: ['description', 'status', 'slug', 'title', 'tags']
} as const

export const FoiRequestDetailSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      type: 'string',
      readOnly: true
    },
    is_foi: {
      type: 'boolean'
    },
    checked: {
      type: 'boolean'
    },
    refusal_reason: {
      type: 'string',
      maxLength: 1024
    },
    costs: {
      type: 'string',
      readOnly: true
    },
    public: {
      type: 'boolean'
    },
    law: {
      type: 'object',
      properties: {
        resource_uri: {
          type: 'string',
          readOnly: true
        },
        id: {
          type: 'integer',
          readOnly: true
        },
        name: {
          type: 'string',
          readOnly: true
        },
        slug: {
          type: 'string',
          readOnly: true
        },
        description: {
          type: 'string',
          readOnly: true
        },
        long_description: {
          type: 'string',
          readOnly: true
        },
        law_type: {
          type: 'string',
          maxLength: 255
        },
        created: {
          type: 'string',
          format: 'date',
          nullable: true
        },
        request_note: {
          type: 'string',
          readOnly: true
        },
        request_note_html: {
          type: 'string',
          readOnly: true
        },
        meta: {
          type: 'boolean'
        },
        site_url: {
          type: 'string',
          readOnly: true
        },
        jurisdiction: {
          type: 'string',
          readOnly: true
        },
        email_only: {
          type: 'boolean'
        },
        mediator: {
          type: 'string',
          readOnly: true
        },
        priority: {
          type: 'integer',
          maximum: 32767,
          minimum: -32768
        },
        url: {
          type: 'string',
          maxLength: 255
        },
        max_response_time: {
          type: 'integer',
          maximum: 2147483647,
          minimum: -2147483648,
          nullable: true
        },
        requires_signature: {
          type: 'boolean'
        },
        max_response_time_unit: {
          enum: ['day', 'working_day', 'month_de'],
          type: 'string'
        },
        letter_start: {
          type: 'string',
          readOnly: true
        },
        letter_end: {
          type: 'string',
          readOnly: true
        },
        last_modified_at: {
          type: 'string'
        },
        refusal_reasons: {
          type: 'string',
          readOnly: true
        },
        combined: {
          type: 'array',
          items: {
            type: 'string'
          },
          readOnly: true
        }
      },
      required: ['last_modified_at'],
      readOnly: true
    },
    description: {
      type: 'string'
    },
    redacted_description: {
      type: 'string',
      readOnly: true
    },
    summary: {
      type: 'string'
    },
    same_as_count: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    same_as: {
      type: 'string',
      readOnly: true
    },
    due_date: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    resolved_on: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    last_message: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    status: {
      enum: [
        'awaiting_user_confirmation',
        'publicbody_needed',
        'awaiting_publicbody_confirmation',
        'awaiting_response',
        'awaiting_classification',
        'asleep',
        'resolved'
      ],
      type: 'string'
    },
    public_body: {
      type: 'object',
      properties: {
        resource_uri: {
          type: 'string',
          readOnly: true
        },
        id: {
          type: 'integer'
        },
        name: {
          type: 'string',
          maxLength: 255
        },
        slug: {
          type: 'string',
          maxLength: 255,
          pattern: '^[-a-zA-Z0-9_]+$'
        },
        other_names: {
          type: 'string'
        },
        description: {
          type: 'string'
        },
        url: {
          type: 'string',
          format: 'uri',
          nullable: true,
          maxLength: 500,
          pattern:
            '^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\.(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z'
        },
        parent: {
          type: 'string',
          readOnly: true
        },
        root: {
          type: 'string',
          readOnly: true
        },
        depth: {
          type: 'integer',
          maximum: 32767,
          minimum: -32768
        },
        classification: {
          type: 'object',
          properties: {
            id: {
              type: 'integer',
              readOnly: true
            },
            name: {
              type: 'string',
              maxLength: 255
            },
            slug: {
              type: 'string',
              maxLength: 255,
              pattern: '^[-a-zA-Z0-9_]+$'
            },
            depth: {
              type: 'integer',
              maximum: 2147483647,
              minimum: 0
            }
          },
          required: ['name', 'slug', 'depth'],
          readOnly: true
        },
        categories: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: {
                type: 'integer',
                readOnly: true
              },
              name: {
                type: 'string',
                maxLength: 100
              },
              slug: {
                type: 'string',
                pattern: '^[-\\w]+\\z',
                maxLength: 100
              },
              is_topic: {
                type: 'boolean'
              },
              depth: {
                type: 'integer',
                maximum: 2147483647,
                minimum: 0
              }
            },
            required: ['name', 'slug', 'depth']
          },
          readOnly: true
        },
        email: {
          type: 'string',
          format: 'email',
          maxLength: 255
        },
        contact: {
          type: 'string'
        },
        address: {
          type: 'string'
        },
        fax: {
          type: 'string',
          maxLength: 50
        },
        request_note: {
          type: 'string'
        },
        number_of_requests: {
          type: 'integer',
          maximum: 2147483647,
          minimum: -2147483648
        },
        site_url: {
          type: 'string'
        },
        request_note_html: {
          type: 'string',
          readOnly: true
        },
        jurisdiction: {
          type: 'object',
          properties: {
            resource_uri: {
              type: 'string',
              readOnly: true
            },
            id: {
              type: 'integer',
              readOnly: true
            },
            name: {
              type: 'string',
              maxLength: 255
            },
            rank: {
              type: 'integer',
              maximum: 32767,
              minimum: -32768
            },
            description: {
              type: 'string'
            },
            slug: {
              type: 'string',
              maxLength: 255,
              pattern: '^[-a-zA-Z0-9_]+$'
            },
            site_url: {
              type: 'string'
            },
            region: {
              type: 'string',
              readOnly: true
            },
            last_modified_at: {
              type: 'string',
              format: 'date-time',
              readOnly: true
            }
          },
          required: ['name', 'slug', 'site_url'],
          readOnly: true
        },
        laws: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              resource_uri: {
                type: 'string',
                readOnly: true
              },
              id: {
                type: 'integer',
                readOnly: true
              },
              name: {
                type: 'string',
                readOnly: true
              },
              slug: {
                type: 'string',
                readOnly: true
              },
              description: {
                type: 'string',
                readOnly: true
              },
              long_description: {
                type: 'string',
                readOnly: true
              },
              law_type: {
                type: 'string',
                maxLength: 255
              },
              created: {
                type: 'string',
                format: 'date',
                nullable: true
              },
              request_note: {
                type: 'string',
                readOnly: true
              },
              request_note_html: {
                type: 'string',
                readOnly: true
              },
              meta: {
                type: 'boolean'
              },
              site_url: {
                type: 'string',
                readOnly: true
              },
              jurisdiction: {
                type: 'string',
                readOnly: true
              },
              email_only: {
                type: 'boolean'
              },
              mediator: {
                type: 'string',
                readOnly: true
              },
              priority: {
                type: 'integer',
                maximum: 32767,
                minimum: -32768
              },
              url: {
                type: 'string',
                maxLength: 255
              },
              max_response_time: {
                type: 'integer',
                maximum: 2147483647,
                minimum: -2147483648,
                nullable: true
              },
              requires_signature: {
                type: 'boolean'
              },
              max_response_time_unit: {
                enum: ['day', 'working_day', 'month_de'],
                type: 'string'
              },
              letter_start: {
                type: 'string',
                readOnly: true
              },
              letter_end: {
                type: 'string',
                readOnly: true
              },
              last_modified_at: {
                type: 'string'
              },
              refusal_reasons: {
                type: 'string',
                readOnly: true
              },
              combined: {
                type: 'array',
                items: {
                  type: 'string'
                },
                readOnly: true
              }
            },
            required: ['last_modified_at']
          },
          readOnly: true
        },
        regions: {
          type: 'array',
          items: {
            type: 'string'
          },
          readOnly: true
        },
        source_reference: {
          type: 'string',
          maxLength: 255
        },
        alternative_emails: {
          type: 'object',
          nullable: true
        },
        wikidata_item: {
          type: 'string',
          maxLength: 50
        },
        extra_data: {
          type: 'object'
        },
        geo: {
          type: 'string',
          readOnly: true
        }
      },
      required: ['id', 'name', 'slug', 'site_url'],
      readOnly: true
    },
    resolution: {
      enum: [
        'successful',
        'partially_successful',
        'not_held',
        'refused',
        'user_withdrew_costs',
        'user_withdrew'
      ],
      type: 'string'
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    reference: {
      type: 'string',
      maxLength: 255
    },
    user: {
      type: 'string',
      readOnly: true
    },
    project: {
      type: 'string',
      readOnly: true
    },
    campaign: {
      type: 'string',
      readOnly: true
    },
    tags: {
      type: 'string'
    },
    messages: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['description', 'status', 'slug', 'title', 'tags']
} as const

export const FoiMessageDraftSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    request: {
      type: 'string'
    },
    sent: {
      type: 'boolean'
    },
    is_response: {
      type: 'boolean'
    },
    is_postal: {
      type: 'string',
      readOnly: true
    },
    is_draft: {
      type: 'boolean',
      readOnly: true
    },
    kind: {
      enum: ['email', 'post', 'fax', 'upload', 'phone', 'visit', 'import'],
      type: 'string',
      default: 'post'
    },
    is_escalation: {
      type: 'boolean'
    },
    content_hidden: {
      type: 'boolean'
    },
    sender_public_body: {
      type: 'string',
      readOnly: true
    },
    recipient_public_body: {
      type: 'string',
      readOnly: true
    },
    status: {
      enum: [
        'awaiting_user_confirmation',
        'publicbody_needed',
        'awaiting_publicbody_confirmation',
        'awaiting_response',
        'awaiting_classification',
        'asleep',
        'resolved'
      ],
      type: 'string'
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    redacted: {
      type: 'boolean'
    },
    not_publishable: {
      type: 'boolean',
      readOnly: true
    },
    attachments: {
      type: 'string',
      readOnly: true
    },
    subject: {
      type: 'string',
      readOnly: true
    },
    content: {
      type: 'string',
      readOnly: true
    },
    redacted_subject: {
      type: 'string',
      readOnly: true
    },
    redacted_content: {
      type: 'string',
      readOnly: true
    },
    sender: {
      type: 'string',
      readOnly: true
    },
    status_name: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    }
  },
  required: ['request']
} as const

export const FoiMessageSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    request: {
      type: 'string'
    },
    sent: {
      type: 'boolean'
    },
    is_response: {
      type: 'boolean'
    },
    is_postal: {
      type: 'string',
      readOnly: true
    },
    is_draft: {
      type: 'boolean',
      readOnly: true
    },
    kind: {
      enum: ['email', 'post', 'fax', 'upload', 'phone', 'visit', 'import'],
      type: 'string',
      default: 'post'
    },
    is_escalation: {
      type: 'boolean'
    },
    content_hidden: {
      type: 'boolean'
    },
    sender_public_body: {
      type: 'string',
      readOnly: true
    },
    recipient_public_body: {
      type: 'string',
      readOnly: true
    },
    status: {
      enum: [
        'awaiting_user_confirmation',
        'publicbody_needed',
        'awaiting_publicbody_confirmation',
        'awaiting_response',
        'awaiting_classification',
        'asleep',
        'resolved'
      ],
      type: 'string'
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    redacted: {
      type: 'boolean'
    },
    not_publishable: {
      type: 'boolean',
      readOnly: true
    },
    attachments: {
      type: 'string',
      readOnly: true
    },
    subject: {
      type: 'string',
      readOnly: true
    },
    content: {
      type: 'string',
      readOnly: true
    },
    redacted_subject: {
      type: 'string',
      readOnly: true
    },
    redacted_content: {
      type: 'string',
      readOnly: true
    },
    sender: {
      type: 'string',
      readOnly: true
    },
    status_name: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    }
  },
  required: ['request']
} as const

export const FoiAttachmentSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    belongs_to: {
      type: 'string',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    filetype: {
      type: 'string',
      maxLength: 100
    },
    size: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    anchor_url: {
      type: 'string',
      readOnly: true
    },
    file_url: {
      type: 'string',
      readOnly: true
    },
    pending: {
      type: 'boolean'
    },
    is_converted: {
      type: 'boolean'
    },
    converted: {
      type: 'string',
      readOnly: true
    },
    approved: {
      type: 'boolean'
    },
    can_approve: {
      type: 'boolean'
    },
    redacted: {
      type: 'string',
      readOnly: true
    },
    is_redacted: {
      type: 'boolean'
    },
    can_redact: {
      type: 'string',
      readOnly: true
    },
    can_delete: {
      type: 'string',
      readOnly: true
    },
    is_pdf: {
      type: 'string',
      readOnly: true
    },
    is_image: {
      type: 'string',
      readOnly: true
    },
    is_irrelevant: {
      type: 'string',
      readOnly: true
    },
    document: {
      type: 'object',
      properties: {
        resource_uri: {
          type: 'string',
          readOnly: true
        },
        id: {
          type: 'integer',
          readOnly: true
        },
        site_url: {
          type: 'string',
          readOnly: true
        },
        title: {
          type: 'string',
          maxLength: 500
        },
        slug: {
          type: 'string',
          maxLength: 250,
          pattern: '^[-a-zA-Z0-9_]+$'
        },
        description: {
          type: 'string'
        },
        published_at: {
          type: 'string',
          format: 'date-time',
          nullable: true
        },
        num_pages: {
          type: 'integer',
          maximum: 2147483647,
          minimum: 0
        },
        public: {
          type: 'boolean'
        },
        listed: {
          type: 'boolean'
        },
        allow_annotation: {
          type: 'boolean'
        },
        pending: {
          type: 'boolean'
        },
        file_url: {
          type: 'string',
          readOnly: true
        },
        file_size: {
          type: 'integer',
          maximum: 9223372036854776000,
          minimum: -9223372036854776000,
          format: 'int64',
          nullable: true
        },
        cover_image: {
          type: 'string'
        },
        page_template: {
          type: 'string'
        },
        outline: {
          type: 'string'
        },
        properties: {
          type: 'object'
        },
        uid: {
          type: 'string',
          format: 'uuid',
          readOnly: true
        },
        data: {
          type: 'object'
        },
        pages_uri: {
          type: 'string',
          readOnly: true
        },
        original: {
          type: 'string',
          readOnly: true
        },
        foirequest: {
          type: 'string',
          readOnly: true
        },
        publicbody: {
          type: 'string',
          readOnly: true
        },
        last_modified_at: {
          type: 'string',
          readOnly: true
        }
      },
      required: ['cover_image', 'page_template']
    }
  },
  required: ['name', 'document']
} as const

export const FoiRequestFollowSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    request: {
      type: 'string',
      readOnly: true
    },
    request_url: {
      type: 'string',
      readOnly: true
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    follow_count: {
      type: 'integer',
      readOnly: true
    },
    follows: {
      type: 'boolean',
      readOnly: true
    },
    can_follow: {
      type: 'boolean',
      readOnly: true
    }
  }
} as const

export const GeoRegionSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    kind: {
      enum: [
        'country',
        'state',
        'admin_district',
        'district',
        'admin_cooperation',
        'municipality',
        'borough',
        'zipcode',
        'admin_court_jurisdiction'
      ],
      type: 'string'
    },
    kind_detail: {
      type: 'string',
      maxLength: 255
    },
    level: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    region_identifier: {
      type: 'string',
      maxLength: 255
    },
    global_identifier: {
      type: 'string',
      maxLength: 255
    },
    area: {
      type: 'number'
    },
    population: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    valid_on: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    part_of: {
      type: 'string',
      readOnly: true
    },
    centroid: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['name', 'slug', 'kind']
} as const

export const GeoRegionDetailSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    kind: {
      enum: [
        'country',
        'state',
        'admin_district',
        'district',
        'admin_cooperation',
        'municipality',
        'borough',
        'zipcode',
        'admin_court_jurisdiction'
      ],
      type: 'string'
    },
    kind_detail: {
      type: 'string',
      maxLength: 255
    },
    level: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    region_identifier: {
      type: 'string',
      maxLength: 255
    },
    global_identifier: {
      type: 'string',
      maxLength: 255
    },
    area: {
      type: 'number'
    },
    population: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    valid_on: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    part_of: {
      type: 'string',
      readOnly: true
    },
    centroid: {
      type: 'string',
      readOnly: true
    },
    geom: {
      type: 'string',
      readOnly: true
    },
    gov_seat: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['name', 'slug', 'kind']
} as const

export const PublicBodyListSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer'
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    other_names: {
      type: 'string'
    },
    description: {
      type: 'string'
    },
    url: {
      type: 'string',
      format: 'uri',
      nullable: true,
      maxLength: 500,
      pattern:
        '^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\.(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z'
    },
    parent: {
      type: 'string',
      readOnly: true
    },
    root: {
      type: 'string',
      readOnly: true
    },
    depth: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    classification: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          readOnly: true
        },
        name: {
          type: 'string',
          maxLength: 255
        },
        slug: {
          type: 'string',
          maxLength: 255,
          pattern: '^[-a-zA-Z0-9_]+$'
        },
        depth: {
          type: 'integer',
          maximum: 2147483647,
          minimum: 0
        }
      },
      required: ['name', 'slug', 'depth'],
      readOnly: true
    },
    categories: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'integer',
            readOnly: true
          },
          name: {
            type: 'string',
            maxLength: 100
          },
          slug: {
            type: 'string',
            pattern: '^[-\\w]+\\z',
            maxLength: 100
          },
          is_topic: {
            type: 'boolean'
          },
          depth: {
            type: 'integer',
            maximum: 2147483647,
            minimum: 0
          }
        },
        required: ['name', 'slug', 'depth']
      },
      readOnly: true
    },
    email: {
      type: 'string',
      format: 'email',
      maxLength: 255
    },
    contact: {
      type: 'string'
    },
    address: {
      type: 'string'
    },
    fax: {
      type: 'string',
      maxLength: 50
    },
    request_note: {
      type: 'string'
    },
    number_of_requests: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    site_url: {
      type: 'string'
    },
    request_note_html: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      type: 'object',
      properties: {
        resource_uri: {
          type: 'string',
          readOnly: true
        },
        id: {
          type: 'integer',
          readOnly: true
        },
        name: {
          type: 'string',
          maxLength: 255
        },
        rank: {
          type: 'integer',
          maximum: 32767,
          minimum: -32768
        },
        description: {
          type: 'string'
        },
        slug: {
          type: 'string',
          maxLength: 255,
          pattern: '^[-a-zA-Z0-9_]+$'
        },
        site_url: {
          type: 'string'
        },
        region: {
          type: 'string',
          readOnly: true
        },
        last_modified_at: {
          type: 'string',
          format: 'date-time',
          readOnly: true
        }
      },
      required: ['name', 'slug', 'site_url'],
      readOnly: true
    },
    laws: {
      type: 'array',
      items: {
        type: 'string'
      },
      readOnly: true
    },
    regions: {
      type: 'array',
      items: {
        type: 'string'
      },
      readOnly: true
    },
    source_reference: {
      type: 'string',
      maxLength: 255
    },
    alternative_emails: {
      type: 'object',
      nullable: true
    },
    wikidata_item: {
      type: 'string',
      maxLength: 50
    },
    extra_data: {
      type: 'object'
    },
    geo: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['id', 'name', 'slug', 'site_url']
} as const

export const PublicBodySchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer'
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    other_names: {
      type: 'string'
    },
    description: {
      type: 'string'
    },
    url: {
      type: 'string',
      format: 'uri',
      nullable: true,
      maxLength: 500,
      pattern:
        '^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\.(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z'
    },
    parent: {
      type: 'string',
      readOnly: true
    },
    root: {
      type: 'string',
      readOnly: true
    },
    depth: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    classification: {
      type: 'object',
      properties: {
        id: {
          type: 'integer',
          readOnly: true
        },
        name: {
          type: 'string',
          maxLength: 255
        },
        slug: {
          type: 'string',
          maxLength: 255,
          pattern: '^[-a-zA-Z0-9_]+$'
        },
        depth: {
          type: 'integer',
          maximum: 2147483647,
          minimum: 0
        }
      },
      required: ['name', 'slug', 'depth'],
      readOnly: true
    },
    categories: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'integer',
            readOnly: true
          },
          name: {
            type: 'string',
            maxLength: 100
          },
          slug: {
            type: 'string',
            pattern: '^[-\\w]+\\z',
            maxLength: 100
          },
          is_topic: {
            type: 'boolean'
          },
          depth: {
            type: 'integer',
            maximum: 2147483647,
            minimum: 0
          }
        },
        required: ['name', 'slug', 'depth']
      },
      readOnly: true
    },
    email: {
      type: 'string',
      format: 'email',
      maxLength: 255
    },
    contact: {
      type: 'string'
    },
    address: {
      type: 'string'
    },
    fax: {
      type: 'string',
      maxLength: 50
    },
    request_note: {
      type: 'string'
    },
    number_of_requests: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    site_url: {
      type: 'string'
    },
    request_note_html: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      type: 'object',
      properties: {
        resource_uri: {
          type: 'string',
          readOnly: true
        },
        id: {
          type: 'integer',
          readOnly: true
        },
        name: {
          type: 'string',
          maxLength: 255
        },
        rank: {
          type: 'integer',
          maximum: 32767,
          minimum: -32768
        },
        description: {
          type: 'string'
        },
        slug: {
          type: 'string',
          maxLength: 255,
          pattern: '^[-a-zA-Z0-9_]+$'
        },
        site_url: {
          type: 'string'
        },
        region: {
          type: 'string',
          readOnly: true
        },
        last_modified_at: {
          type: 'string',
          format: 'date-time',
          readOnly: true
        }
      },
      required: ['name', 'slug', 'site_url'],
      readOnly: true
    },
    laws: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          resource_uri: {
            type: 'string',
            readOnly: true
          },
          id: {
            type: 'integer',
            readOnly: true
          },
          name: {
            type: 'string',
            readOnly: true
          },
          slug: {
            type: 'string',
            readOnly: true
          },
          description: {
            type: 'string',
            readOnly: true
          },
          long_description: {
            type: 'string',
            readOnly: true
          },
          law_type: {
            type: 'string',
            maxLength: 255
          },
          created: {
            type: 'string',
            format: 'date',
            nullable: true
          },
          request_note: {
            type: 'string',
            readOnly: true
          },
          request_note_html: {
            type: 'string',
            readOnly: true
          },
          meta: {
            type: 'boolean'
          },
          site_url: {
            type: 'string',
            readOnly: true
          },
          jurisdiction: {
            type: 'string',
            readOnly: true
          },
          email_only: {
            type: 'boolean'
          },
          mediator: {
            type: 'string',
            readOnly: true
          },
          priority: {
            type: 'integer',
            maximum: 32767,
            minimum: -32768
          },
          url: {
            type: 'string',
            maxLength: 255
          },
          max_response_time: {
            type: 'integer',
            maximum: 2147483647,
            minimum: -2147483648,
            nullable: true
          },
          requires_signature: {
            type: 'boolean'
          },
          max_response_time_unit: {
            enum: ['day', 'working_day', 'month_de'],
            type: 'string'
          },
          letter_start: {
            type: 'string',
            readOnly: true
          },
          letter_end: {
            type: 'string',
            readOnly: true
          },
          last_modified_at: {
            type: 'string'
          },
          refusal_reasons: {
            type: 'string',
            readOnly: true
          },
          combined: {
            type: 'array',
            items: {
              type: 'string'
            },
            readOnly: true
          }
        },
        required: ['last_modified_at']
      },
      readOnly: true
    },
    regions: {
      type: 'array',
      items: {
        type: 'string'
      },
      readOnly: true
    },
    source_reference: {
      type: 'string',
      maxLength: 255
    },
    alternative_emails: {
      type: 'object',
      nullable: true
    },
    wikidata_item: {
      type: 'string',
      maxLength: 50
    },
    extra_data: {
      type: 'object'
    },
    geo: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['id', 'name', 'slug', 'site_url']
} as const

export const CategorySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 100
    },
    slug: {
      type: 'string',
      pattern: '^[-\\w]+\\z',
      maxLength: 100
    },
    is_topic: {
      type: 'boolean'
    },
    depth: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    parent: {
      type: 'string',
      readOnly: true
    },
    children: {
      type: 'array',
      items: {
        type: 'string'
      },
      readOnly: true
    }
  },
  required: ['name', 'slug', 'depth']
} as const

export const ClassificationSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    depth: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    parent: {
      type: 'string',
      readOnly: true
    },
    children: {
      type: 'array',
      items: {
        type: 'string'
      },
      readOnly: true
    }
  },
  required: ['name', 'slug', 'depth']
} as const

export const JurisdictionSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    rank: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    description: {
      type: 'string'
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    site_url: {
      type: 'string'
    },
    region: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    }
  },
  required: ['name', 'slug', 'site_url']
} as const

export const FoiLawSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      readOnly: true
    },
    slug: {
      type: 'string',
      readOnly: true
    },
    description: {
      type: 'string',
      readOnly: true
    },
    long_description: {
      type: 'string',
      readOnly: true
    },
    law_type: {
      type: 'string',
      maxLength: 255
    },
    created: {
      type: 'string',
      format: 'date',
      nullable: true
    },
    request_note: {
      type: 'string',
      readOnly: true
    },
    request_note_html: {
      type: 'string',
      readOnly: true
    },
    meta: {
      type: 'boolean'
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      type: 'string',
      readOnly: true
    },
    email_only: {
      type: 'boolean'
    },
    mediator: {
      type: 'string',
      readOnly: true
    },
    priority: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    url: {
      type: 'string',
      maxLength: 255
    },
    max_response_time: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    requires_signature: {
      type: 'boolean'
    },
    max_response_time_unit: {
      enum: ['day', 'working_day', 'month_de'],
      type: 'string'
    },
    letter_start: {
      type: 'string',
      readOnly: true
    },
    letter_end: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string'
    },
    refusal_reasons: {
      type: 'string',
      readOnly: true
    },
    combined: {
      type: 'array',
      items: {
        type: 'string'
      },
      readOnly: true
    }
  },
  required: ['last_modified_at']
} as const

export const DocumentSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 500
    },
    slug: {
      type: 'string',
      maxLength: 250,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    description: {
      type: 'string'
    },
    published_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    num_pages: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    public: {
      type: 'boolean'
    },
    listed: {
      type: 'boolean'
    },
    allow_annotation: {
      type: 'boolean'
    },
    pending: {
      type: 'boolean'
    },
    file_url: {
      type: 'string',
      readOnly: true
    },
    file_size: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64',
      nullable: true
    },
    cover_image: {
      type: 'string'
    },
    page_template: {
      type: 'string'
    },
    outline: {
      type: 'string'
    },
    properties: {
      type: 'object'
    },
    uid: {
      type: 'string',
      format: 'uuid',
      readOnly: true
    },
    data: {
      type: 'object'
    },
    pages_uri: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['cover_image', 'page_template']
} as const

export const DocumentDetailSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 500
    },
    slug: {
      type: 'string',
      maxLength: 250,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    description: {
      type: 'string'
    },
    published_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    num_pages: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    public: {
      type: 'boolean'
    },
    listed: {
      type: 'boolean'
    },
    allow_annotation: {
      type: 'boolean'
    },
    pending: {
      type: 'boolean'
    },
    file_url: {
      type: 'string',
      readOnly: true
    },
    file_size: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64',
      nullable: true
    },
    cover_image: {
      type: 'string'
    },
    page_template: {
      type: 'string'
    },
    outline: {
      type: 'string'
    },
    properties: {
      type: 'object'
    },
    uid: {
      type: 'string',
      format: 'uuid',
      readOnly: true
    },
    data: {
      type: 'object'
    },
    pages_uri: {
      type: 'string',
      readOnly: true
    },
    original: {
      type: 'string',
      readOnly: true
    },
    foirequest: {
      type: 'string',
      readOnly: true
    },
    publicbody: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      readOnly: true
    },
    pages: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['cover_image', 'page_template']
} as const

export const DocumentCollectionSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    description: {
      type: 'string'
    },
    public: {
      type: 'boolean'
    },
    listed: {
      type: 'boolean'
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    document_count: {
      type: 'string',
      readOnly: true
    },
    document_directory_count: {
      type: 'string',
      readOnly: true
    },
    uid: {
      type: 'string',
      format: 'uuid',
      readOnly: true
    },
    cover_image: {
      type: 'string'
    },
    directories: {
      type: 'string',
      readOnly: true
    },
    documents: {
      type: 'string',
      readOnly: true
    },
    documents_uri: {
      type: 'string',
      readOnly: true
    },
    pages_uri: {
      type: 'string',
      readOnly: true
    },
    settings: {
      type: 'object'
    },
    zip_download_url: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['cover_image']
} as const

export const PageSchema = {
  type: 'object',
  properties: {
    document: {
      type: 'string',
      readOnly: true
    },
    number: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      default: 1
    },
    content: {
      type: 'string'
    },
    width: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    height: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    image: {
      type: 'string'
    },
    query_highlight: {
      type: 'string'
    }
  },
  required: ['image', 'query_highlight']
} as const

export const PageAnnotationSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    description: {
      type: 'string'
    },
    top: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    left: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    width: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    height: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    can_delete: {
      type: 'boolean',
      readOnly: true
    },
    highlight: {
      type: 'string'
    },
    image: {
      type: 'string',
      format: 'binary'
    },
    document: {
      type: 'string',
      readOnly: true
    },
    number: {
      type: 'integer',
      readOnly: true
    }
  }
} as const

export const ProblemReportSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    message_id: {
      type: 'string',
      readOnly: true
    },
    kind: {
      enum: [
        'message_not_delivered',
        'attachment_broken',
        'redaction_needed',
        'foi_help_needed',
        'other',
        'not_foi',
        'not_nice',
        'info_outdated',
        'info_wrong',
        'bounce_publicbody',
        'mail_inauthentic'
      ],
      type: 'string'
    },
    kind_label: {
      type: 'string',
      readOnly: true
    },
    message_subject: {
      type: 'string',
      readOnly: true
    },
    message_url: {
      type: 'string',
      readOnly: true
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    auto_submitted: {
      type: 'boolean'
    },
    resolved: {
      type: 'boolean'
    },
    description: {
      type: 'string'
    },
    resolution: {
      type: 'string'
    },
    resolution_timestamp: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    claimed: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    related_publicbody_id: {
      type: 'string',
      readOnly: true
    },
    escalated: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    moderator_id: {
      type: 'string',
      readOnly: true
    },
    is_requester: {
      type: 'string',
      readOnly: true
    }
  },
  required: ['kind']
} as const

export const CampaignSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 50,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    url: {
      type: 'string',
      format: 'uri',
      maxLength: 200,
      pattern:
        '^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\.(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z'
    },
    description: {
      type: 'string'
    },
    start_date: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    active: {
      type: 'boolean'
    }
  },
  required: ['name', 'slug']
} as const

export const MakeRequestSchema = {
  type: 'object',
  properties: {
    publicbodies: {
      type: 'array',
      items: {
        type: 'integer'
      }
    },
    subject: {
      type: 'string',
      maxLength: 230
    },
    body: {
      type: 'string'
    },
    full_text: {
      type: 'boolean',
      default: false
    },
    public: {
      type: 'boolean',
      default: true
    },
    reference: {
      type: 'string',
      default: ''
    },
    tags: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  },
  required: ['publicbodies', 'subject', 'body']
} as const

export const FoiAttachmentTusSchema = {
  type: 'object',
  properties: {
    message: {
      type: 'string'
    },
    upload: {
      type: 'string'
    }
  },
  required: ['message', 'upload']
} as const

export const CreateFoiRequestFollowSchema = {
  type: 'object',
  properties: {
    request: {
      type: 'integer'
    }
  },
  required: ['request']
} as const

export const CreatePageAnnotationSchema = {
  type: 'object',
  properties: {
    document: {
      type: 'integer'
    },
    page_number: {
      type: 'integer'
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    description: {
      type: 'string',
      maxLength: 1024
    },
    top: {
      type: 'integer',
      nullable: true
    },
    left: {
      type: 'integer',
      nullable: true
    },
    width: {
      type: 'integer',
      nullable: true
    },
    height: {
      type: 'integer',
      nullable: true
    }
  },
  required: ['document', 'page_number', 'title', 'description']
} as const

export const UploadCreateSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    guid: {
      type: 'string',
      format: 'uuid'
    },
    state: {
      type: 'string',
      maxLength: 50
    },
    upload_offset: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_length: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_metadata: {
      type: 'string'
    },
    filename: {
      type: 'string',
      maxLength: 255
    },
    temporary_file_path: {
      type: 'string',
      nullable: true,
      maxLength: 4096
    },
    expires: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    token: {
      type: 'string',
      format: 'uuid',
      nullable: true
    },
    user: {
      type: 'integer',
      nullable: true
    }
  }
} as const

export const UpdateDocumentSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      maxLength: 500
    },
    description: {
      type: 'string'
    }
  }
} as const

export const UploadSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    guid: {
      type: 'string',
      format: 'uuid'
    },
    state: {
      type: 'string',
      maxLength: 50
    },
    upload_offset: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_length: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_metadata: {
      type: 'string'
    },
    filename: {
      type: 'string',
      maxLength: 255
    },
    temporary_file_path: {
      type: 'string',
      nullable: true,
      maxLength: 4096
    },
    expires: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    token: {
      type: 'string',
      format: 'uuid',
      nullable: true
    },
    user: {
      type: 'integer',
      nullable: true
    }
  },
  required: ['guid']
} as const
