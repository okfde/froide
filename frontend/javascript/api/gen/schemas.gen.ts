// This file is auto-generated by @hey-api/openapi-ts

export const BlankEnumSchema = {
  enum: ['']
} as const

export const CampaignSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 50,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    url: {
      type: 'string',
      format: 'uri',
      maxLength: 200
    },
    description: {
      type: 'string'
    },
    start_date: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    active: {
      type: 'boolean'
    }
  },
  required: ['id', 'name', 'resource_uri', 'slug']
} as const

export const CategorySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 100
    },
    slug: {
      type: 'string',
      pattern: '^[-\\w]+$',
      maxLength: 100
    },
    is_topic: {
      type: 'boolean',
      title: 'As topic'
    },
    depth: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    parent: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    children: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uri'
      },
      readOnly: true
    }
  },
  required: ['children', 'depth', 'id', 'name', 'parent', 'slug']
} as const

export const ClassificationSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    depth: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    parent: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    children: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uri'
      },
      readOnly: true
    }
  },
  required: ['children', 'depth', 'id', 'name', 'parent', 'slug']
} as const

export const CreateFoiRequestFollowSchema = {
  type: 'object',
  properties: {
    request: {
      type: 'integer'
    }
  },
  required: ['request']
} as const

export const CreatePageAnnotationSchema = {
  type: 'object',
  properties: {
    document: {
      type: 'integer'
    },
    page_number: {
      type: 'integer'
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    description: {
      type: 'string',
      maxLength: 1024
    },
    top: {
      type: 'integer',
      nullable: true
    },
    left: {
      type: 'integer',
      nullable: true
    },
    width: {
      type: 'integer',
      nullable: true
    },
    height: {
      type: 'integer',
      nullable: true
    }
  },
  required: ['description', 'document', 'page_number', 'title']
} as const

export const DocumentSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 500
    },
    slug: {
      type: 'string',
      maxLength: 250,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    description: {
      type: 'string'
    },
    published_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    num_pages: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    public: {
      type: 'boolean'
    },
    listed: {
      type: 'boolean'
    },
    allow_annotation: {
      type: 'boolean'
    },
    pending: {
      type: 'boolean'
    },
    file_url: {
      type: 'string',
      readOnly: true
    },
    file_size: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64',
      nullable: true
    },
    cover_image: {
      type: 'string'
    },
    page_template: {
      type: 'string'
    },
    outline: {
      type: 'string'
    },
    properties: {},
    uid: {
      type: 'string',
      format: 'uuid',
      readOnly: true
    },
    data: {},
    pages_uri: {
      type: 'string',
      readOnly: true
    },
    original: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    foirequest: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    publicbody: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'cover_image',
    'file_url',
    'foirequest',
    'id',
    'last_modified_at',
    'original',
    'page_template',
    'pages_uri',
    'publicbody',
    'resource_uri',
    'site_url',
    'uid'
  ]
} as const

export const DocumentCollectionSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    description: {
      type: 'string'
    },
    public: {
      type: 'boolean'
    },
    listed: {
      type: 'boolean'
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    document_count: {
      type: 'string',
      readOnly: true
    },
    document_directory_count: {
      type: 'string',
      readOnly: true
    },
    uid: {
      type: 'string',
      format: 'uuid',
      readOnly: true
    },
    cover_image: {
      type: 'string'
    },
    directories: {
      type: 'string',
      readOnly: true
    },
    documents: {
      type: 'string',
      readOnly: true
    },
    documents_uri: {
      type: 'string',
      readOnly: true
    },
    pages_uri: {
      type: 'string',
      readOnly: true
    },
    settings: {},
    zip_download_url: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'cover_image',
    'directories',
    'document_count',
    'document_directory_count',
    'documents',
    'documents_uri',
    'id',
    'pages_uri',
    'resource_uri',
    'site_url',
    'uid',
    'zip_download_url'
  ]
} as const

export const DocumentDetailSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 500
    },
    slug: {
      type: 'string',
      maxLength: 250,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    description: {
      type: 'string'
    },
    published_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    num_pages: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    public: {
      type: 'boolean'
    },
    listed: {
      type: 'boolean'
    },
    allow_annotation: {
      type: 'boolean'
    },
    pending: {
      type: 'boolean'
    },
    file_url: {
      type: 'string',
      readOnly: true
    },
    file_size: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64',
      nullable: true
    },
    cover_image: {
      type: 'string'
    },
    page_template: {
      type: 'string'
    },
    outline: {
      type: 'string'
    },
    properties: {},
    uid: {
      type: 'string',
      format: 'uuid',
      readOnly: true
    },
    data: {},
    pages_uri: {
      type: 'string',
      readOnly: true
    },
    original: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    foirequest: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    publicbody: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      readOnly: true
    },
    pages: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'cover_image',
    'file_url',
    'foirequest',
    'id',
    'last_modified_at',
    'original',
    'page_template',
    'pages',
    'pages_uri',
    'publicbody',
    'resource_uri',
    'site_url',
    'uid'
  ]
} as const

export const FoiAttachmentSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    belongs_to: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    filetype: {
      type: 'string',
      title: 'File type',
      maxLength: 100
    },
    size: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    anchor_url: {
      type: 'string',
      readOnly: true
    },
    file_url: {
      type: 'string',
      readOnly: true
    },
    pending: {
      type: 'boolean'
    },
    is_converted: {
      type: 'boolean'
    },
    converted: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    approved: {
      type: 'boolean'
    },
    can_approve: {
      type: 'boolean',
      title: 'User can approve'
    },
    redacted: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    is_redacted: {
      type: 'boolean'
    },
    can_redact: {
      type: 'string',
      readOnly: true
    },
    can_delete: {
      type: 'string',
      readOnly: true
    },
    is_pdf: {
      type: 'string',
      readOnly: true
    },
    is_image: {
      type: 'string',
      readOnly: true
    },
    is_irrelevant: {
      type: 'string',
      readOnly: true
    },
    document: {
      $ref: '#/components/schemas/Document'
    }
  },
  required: [
    'anchor_url',
    'belongs_to',
    'can_delete',
    'can_redact',
    'converted',
    'document',
    'file_url',
    'id',
    'is_image',
    'is_irrelevant',
    'is_pdf',
    'name',
    'redacted',
    'resource_uri',
    'site_url'
  ]
} as const

export const FoiAttachmentTusSchema = {
  type: 'object',
  properties: {
    message: {
      type: 'string',
      format: 'uri'
    },
    upload: {
      type: 'string',
      format: 'uri'
    }
  },
  required: ['message', 'upload']
} as const

export const FoiLawSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      readOnly: true
    },
    slug: {
      type: 'string',
      readOnly: true
    },
    description: {
      type: 'string',
      readOnly: true
    },
    long_description: {
      type: 'string',
      readOnly: true
    },
    law_type: {
      type: 'string',
      maxLength: 255
    },
    created: {
      type: 'string',
      format: 'date',
      nullable: true,
      title: 'Creation Date'
    },
    request_note: {
      type: 'string',
      readOnly: true
    },
    request_note_html: {
      type: 'string',
      readOnly: true
    },
    meta: {
      type: 'boolean',
      title: 'Meta Law'
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    email_only: {
      type: 'boolean',
      title: 'E-Mail only'
    },
    mediator: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    priority: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    url: {
      type: 'string',
      maxLength: 255
    },
    max_response_time: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true,
      title: 'Maximal Response Time'
    },
    requires_signature: {
      type: 'boolean'
    },
    max_response_time_unit: {
      title: 'Unit of Response Time',
      oneOf: [
        {
          $ref: '#/components/schemas/MaxResponseTimeUnitEnum'
        },
        {
          $ref: '#/components/schemas/BlankEnum'
        }
      ]
    },
    letter_start: {
      type: 'string',
      readOnly: true
    },
    letter_end: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string'
    },
    refusal_reasons: {
      type: 'string',
      readOnly: true
    },
    combined: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uri'
      },
      readOnly: true
    }
  },
  required: [
    'combined',
    'description',
    'id',
    'jurisdiction',
    'last_modified_at',
    'letter_end',
    'letter_start',
    'long_description',
    'mediator',
    'name',
    'refusal_reasons',
    'request_note',
    'request_note_html',
    'resource_uri',
    'site_url',
    'slug'
  ]
} as const

export const FoiMessageSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    request: {
      type: 'string',
      format: 'uri'
    },
    sent: {
      type: 'boolean',
      readOnly: true,
      title: 'Has message been sent?'
    },
    is_response: {
      type: 'boolean',
      title: 'Response?'
    },
    is_postal: {
      type: 'string',
      readOnly: true
    },
    is_draft: {
      type: 'boolean',
      readOnly: true,
      title: 'Is message a draft?'
    },
    kind: {
      allOf: [
        {
          $ref: '#/components/schemas/KindDccEnum'
        }
      ],
      default: 'post'
    },
    is_escalation: {
      type: 'boolean',
      title: 'Escalation?'
    },
    content_hidden: {
      type: 'boolean',
      title: 'Content hidden?'
    },
    sender_public_body: {
      type: 'string',
      format: 'uri',
      nullable: true
    },
    recipient_public_body: {
      type: 'string',
      format: 'uri',
      nullable: true
    },
    status: {
      oneOf: [
        {
          $ref: '#/components/schemas/StatusEnum'
        },
        {
          $ref: '#/components/schemas/BlankEnum'
        }
      ]
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    redacted: {
      type: 'boolean',
      title: 'Was Redacted?'
    },
    not_publishable: {
      type: 'boolean',
      readOnly: true
    },
    attachments: {
      type: 'string',
      readOnly: true
    },
    subject: {
      type: 'string',
      readOnly: true
    },
    content: {
      type: 'string',
      readOnly: true
    },
    redacted_subject: {
      type: 'string',
      readOnly: true
    },
    redacted_content: {
      type: 'string',
      readOnly: true
    },
    sender: {
      type: 'string',
      readOnly: true
    },
    status_name: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    }
  },
  required: [
    'attachments',
    'content',
    'id',
    'is_draft',
    'is_postal',
    'last_modified_at',
    'not_publishable',
    'redacted_content',
    'redacted_subject',
    'request',
    'resource_uri',
    'sender',
    'sent',
    'status_name',
    'subject',
    'url'
  ]
} as const

export const FoiMessageDraftSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    request: {
      type: 'string',
      format: 'uri'
    },
    sent: {
      type: 'boolean',
      readOnly: true,
      title: 'Has message been sent?'
    },
    is_response: {
      type: 'boolean',
      title: 'Response?'
    },
    is_postal: {
      type: 'string',
      readOnly: true
    },
    is_draft: {
      type: 'boolean',
      readOnly: true,
      title: 'Is message a draft?'
    },
    kind: {
      allOf: [
        {
          $ref: '#/components/schemas/KindDccEnum'
        }
      ],
      default: 'post'
    },
    is_escalation: {
      type: 'boolean',
      title: 'Escalation?'
    },
    content_hidden: {
      type: 'boolean',
      title: 'Content hidden?'
    },
    sender_public_body: {
      type: 'string',
      format: 'uri',
      nullable: true
    },
    recipient_public_body: {
      type: 'string',
      format: 'uri',
      nullable: true
    },
    status: {
      oneOf: [
        {
          $ref: '#/components/schemas/StatusEnum'
        },
        {
          $ref: '#/components/schemas/BlankEnum'
        }
      ]
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    redacted: {
      type: 'boolean',
      title: 'Was Redacted?'
    },
    not_publishable: {
      type: 'boolean',
      readOnly: true
    },
    attachments: {
      type: 'string',
      readOnly: true
    },
    subject: {
      type: 'string',
      readOnly: true
    },
    content: {
      type: 'string',
      readOnly: true
    },
    redacted_subject: {
      type: 'string',
      readOnly: true
    },
    redacted_content: {
      type: 'string',
      readOnly: true
    },
    sender: {
      type: 'string',
      readOnly: true
    },
    status_name: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    }
  },
  required: [
    'attachments',
    'content',
    'id',
    'is_draft',
    'is_postal',
    'last_modified_at',
    'not_publishable',
    'redacted_content',
    'redacted_subject',
    'request',
    'resource_uri',
    'sender',
    'sent',
    'status_name',
    'subject',
    'url'
  ]
} as const

export const FoiRequestDetailSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    is_foi: {
      type: 'boolean',
      title: 'Is FoI request'
    },
    checked: {
      type: 'boolean'
    },
    refusal_reason: {
      type: 'string',
      maxLength: 1024
    },
    costs: {
      type: 'string',
      readOnly: true
    },
    public: {
      type: 'boolean',
      title: 'Published?'
    },
    law: {
      allOf: [
        {
          $ref: '#/components/schemas/FoiLaw'
        }
      ],
      readOnly: true
    },
    description: {
      type: 'string'
    },
    redacted_description: {
      type: 'string',
      readOnly: true
    },
    summary: {
      type: 'string'
    },
    same_as_count: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      title: 'Identical request count'
    },
    same_as: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    due_date: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    resolved_on: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      title: 'Resolution date'
    },
    last_message: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      title: 'Date of last message'
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    status: {
      $ref: '#/components/schemas/StatusEnum'
    },
    public_body: {
      allOf: [
        {
          $ref: '#/components/schemas/PublicBody'
        }
      ],
      readOnly: true
    },
    resolution: {
      oneOf: [
        {
          $ref: '#/components/schemas/ResolutionEnum'
        },
        {
          $ref: '#/components/schemas/BlankEnum'
        }
      ]
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    reference: {
      type: 'string',
      maxLength: 255
    },
    user: {
      type: 'string',
      readOnly: true
    },
    project: {
      type: 'integer',
      readOnly: true
    },
    campaign: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    tags: {
      type: 'string'
    },
    messages: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'campaign',
    'costs',
    'description',
    'id',
    'jurisdiction',
    'last_modified_at',
    'law',
    'messages',
    'project',
    'public_body',
    'redacted_description',
    'resource_uri',
    'same_as',
    'slug',
    'status',
    'tags',
    'title',
    'url',
    'user'
  ]
} as const

export const FoiRequestFollowSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    request: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    request_url: {
      type: 'string',
      readOnly: true
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
      title: 'Timestamp of Following'
    },
    follow_count: {
      type: 'integer',
      readOnly: true
    },
    follows: {
      type: 'boolean',
      readOnly: true
    },
    can_follow: {
      type: 'boolean',
      readOnly: true
    }
  },
  required: [
    'can_follow',
    'follow_count',
    'follows',
    'request',
    'request_url',
    'resource_uri'
  ]
} as const

export const FoiRequestListSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    is_foi: {
      type: 'boolean',
      title: 'Is FoI request'
    },
    checked: {
      type: 'boolean'
    },
    refusal_reason: {
      type: 'string',
      maxLength: 1024
    },
    costs: {
      type: 'string',
      readOnly: true
    },
    public: {
      type: 'boolean',
      title: 'Published?'
    },
    law: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    description: {
      type: 'string'
    },
    redacted_description: {
      type: 'string',
      readOnly: true
    },
    summary: {
      type: 'string'
    },
    same_as_count: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      title: 'Identical request count'
    },
    same_as: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    due_date: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    resolved_on: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      title: 'Resolution date'
    },
    last_message: {
      type: 'string',
      format: 'date-time',
      nullable: true,
      title: 'Date of last message'
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    status: {
      $ref: '#/components/schemas/StatusEnum'
    },
    public_body: {
      allOf: [
        {
          $ref: '#/components/schemas/SimplePublicBody'
        }
      ],
      readOnly: true
    },
    resolution: {
      oneOf: [
        {
          $ref: '#/components/schemas/ResolutionEnum'
        },
        {
          $ref: '#/components/schemas/BlankEnum'
        }
      ]
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    reference: {
      type: 'string',
      maxLength: 255
    },
    user: {
      type: 'string',
      readOnly: true
    },
    project: {
      type: 'integer',
      readOnly: true
    },
    campaign: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    tags: {
      type: 'string'
    }
  },
  required: [
    'campaign',
    'costs',
    'description',
    'id',
    'jurisdiction',
    'last_modified_at',
    'law',
    'project',
    'public_body',
    'redacted_description',
    'resource_uri',
    'same_as',
    'slug',
    'status',
    'tags',
    'title',
    'url',
    'user'
  ]
} as const

export const GeoRegionSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    kind: {
      allOf: [
        {
          $ref: '#/components/schemas/KindCfdEnum'
        }
      ],
      title: 'Kind of Region'
    },
    kind_detail: {
      type: 'string',
      maxLength: 255
    },
    level: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    region_identifier: {
      type: 'string',
      maxLength: 255
    },
    global_identifier: {
      type: 'string',
      maxLength: 255
    },
    area: {
      type: 'number',
      format: 'double'
    },
    population: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    valid_on: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    part_of: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    centroid: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'centroid',
    'id',
    'kind',
    'name',
    'part_of',
    'resource_uri',
    'slug'
  ]
} as const

export const GeoRegionDetailSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    kind: {
      allOf: [
        {
          $ref: '#/components/schemas/KindCfdEnum'
        }
      ],
      title: 'Kind of Region'
    },
    kind_detail: {
      type: 'string',
      maxLength: 255
    },
    level: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    region_identifier: {
      type: 'string',
      maxLength: 255
    },
    global_identifier: {
      type: 'string',
      maxLength: 255
    },
    area: {
      type: 'number',
      format: 'double'
    },
    population: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    valid_on: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    part_of: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    centroid: {
      type: 'string',
      readOnly: true
    },
    geom: {
      type: 'string',
      readOnly: true
    },
    gov_seat: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'centroid',
    'geom',
    'gov_seat',
    'id',
    'kind',
    'name',
    'part_of',
    'resource_uri',
    'slug'
  ]
} as const

export const ImageAttachmentConverterSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      default: 'Letter'
    },
    images: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ImageAttachmentConverterItem'
      }
    },
    message: {
      type: 'string',
      format: 'uri'
    }
  },
  required: ['images', 'message']
} as const

export const ImageAttachmentConverterItemSchema = {
  type: 'object',
  properties: {
    attachment: {
      type: 'string',
      format: 'uri'
    },
    rotate: {
      type: 'integer',
      maximum: 360,
      minimum: 0,
      default: 0
    }
  },
  required: ['attachment']
} as const

export const JurisdictionSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    rank: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    description: {
      type: 'string'
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    site_url: {
      type: 'string'
    },
    region: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    }
  },
  required: [
    'id',
    'last_modified_at',
    'name',
    'region',
    'resource_uri',
    'site_url',
    'slug'
  ]
} as const

export const KindCfdEnumSchema = {
  enum: [
    'country',
    'state',
    'admin_district',
    'district',
    'admin_cooperation',
    'municipality',
    'borough',
    'zipcode',
    'admin_court_jurisdiction'
  ],
  type: 'string',
  description: `* \`country\` - country
* \`state\` - state
* \`admin_district\` - administrative district
* \`district\` - district
* \`admin_cooperation\` - administrative cooperation
* \`municipality\` - municipality
* \`borough\` - borough
* \`zipcode\` - zipcode
* \`admin_court_jurisdiction\` - administrative court jurisdiction`
} as const

export const KindDccEnumSchema = {
  enum: ['email', 'post', 'fax', 'upload', 'phone', 'visit', 'import'],
  type: 'string',
  description: `* \`email\` - email
* \`post\` - postal mail
* \`fax\` - fax
* \`upload\` - upload
* \`phone\` - phone call
* \`visit\` - visit in person
* \`import\` - automatically imported`
} as const

export const MakeRequestSchema = {
  type: 'object',
  properties: {
    publicbodies: {
      type: 'array',
      items: {
        type: 'integer'
      }
    },
    subject: {
      type: 'string',
      maxLength: 230
    },
    body: {
      type: 'string'
    },
    full_text: {
      type: 'boolean',
      default: false
    },
    public: {
      type: 'boolean',
      default: true
    },
    reference: {
      type: 'string',
      default: ''
    },
    tags: {
      type: 'array',
      items: {
        type: 'string',
        maxLength: 255
      }
    }
  },
  required: ['body', 'publicbodies', 'subject']
} as const

export const MaxResponseTimeUnitEnumSchema = {
  enum: ['day', 'working_day', 'month_de'],
  type: 'string',
  description: `* \`day\` - Day(s)
* \`working_day\` - Working Day(s)
* \`month_de\` - Month(s) (DE)`
} as const

export const PageSchema = {
  type: 'object',
  properties: {
    document: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    number: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      default: 1
    },
    content: {
      type: 'string'
    },
    width: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    height: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    image: {
      type: 'string'
    },
    query_highlight: {
      type: 'string'
    }
  },
  required: ['document', 'image', 'query_highlight']
} as const

export const PageAnnotationSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 255
    },
    description: {
      type: 'string'
    },
    top: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    left: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    width: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    height: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648,
      nullable: true
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    can_delete: {
      type: 'boolean',
      readOnly: true
    },
    highlight: {
      type: 'string'
    },
    image: {
      type: 'string',
      format: 'uri'
    },
    document: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    number: {
      type: 'integer',
      readOnly: true
    }
  },
  required: ['can_delete', 'document', 'id', 'number']
} as const

export const PaginatedCampaignListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Campaign'
      }
    }
  }
} as const

export const PaginatedCategoryListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Category'
      }
    }
  }
} as const

export const PaginatedClassificationListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Classification'
      }
    }
  }
} as const

export const PaginatedDocumentCollectionListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DocumentCollection'
      }
    }
  }
} as const

export const PaginatedDocumentListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Document'
      }
    }
  }
} as const

export const PaginatedFoiAttachmentListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FoiAttachment'
      }
    }
  }
} as const

export const PaginatedFoiLawListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FoiLaw'
      }
    }
  }
} as const

export const PaginatedFoiMessageDraftListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FoiMessageDraft'
      }
    }
  }
} as const

export const PaginatedFoiMessageListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FoiMessage'
      }
    }
  }
} as const

export const PaginatedFoiRequestFollowListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FoiRequestFollow'
      }
    }
  }
} as const

export const PaginatedFoiRequestListListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FoiRequestList'
      }
    }
  }
} as const

export const PaginatedGeoRegionListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GeoRegion'
      }
    }
  }
} as const

export const PaginatedJurisdictionListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Jurisdiction'
      }
    }
  }
} as const

export const PaginatedPageAnnotationListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PageAnnotation'
      }
    }
  }
} as const

export const PaginatedPageListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Page'
      }
    }
  }
} as const

export const PaginatedProblemReportListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProblemReport'
      }
    }
  }
} as const

export const PaginatedPublicBodyListListSchema = {
  type: 'object',
  required: ['count', 'results'],
  properties: {
    count: {
      type: 'integer',
      example: 123
    },
    next: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=400&limit=100'
    },
    previous: {
      type: 'string',
      nullable: true,
      format: 'uri',
      example: 'http://api.example.org/accounts/?offset=200&limit=100'
    },
    results: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PublicBodyList'
      }
    }
  }
} as const

export const PatchedDocumentSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    site_url: {
      type: 'string',
      readOnly: true
    },
    title: {
      type: 'string',
      maxLength: 500
    },
    slug: {
      type: 'string',
      maxLength: 250,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    description: {
      type: 'string'
    },
    published_at: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    num_pages: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    },
    public: {
      type: 'boolean'
    },
    listed: {
      type: 'boolean'
    },
    allow_annotation: {
      type: 'boolean'
    },
    pending: {
      type: 'boolean'
    },
    file_url: {
      type: 'string',
      readOnly: true
    },
    file_size: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64',
      nullable: true
    },
    cover_image: {
      type: 'string'
    },
    page_template: {
      type: 'string'
    },
    outline: {
      type: 'string'
    },
    properties: {},
    uid: {
      type: 'string',
      format: 'uuid',
      readOnly: true
    },
    data: {},
    pages_uri: {
      type: 'string',
      readOnly: true
    }
  }
} as const

export const PatchedFoiMessageDraftSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer',
      readOnly: true
    },
    url: {
      type: 'string',
      readOnly: true
    },
    request: {
      type: 'string',
      format: 'uri'
    },
    sent: {
      type: 'boolean',
      readOnly: true,
      title: 'Has message been sent?'
    },
    is_response: {
      type: 'boolean',
      title: 'Response?'
    },
    is_postal: {
      type: 'string',
      readOnly: true
    },
    is_draft: {
      type: 'boolean',
      readOnly: true,
      title: 'Is message a draft?'
    },
    kind: {
      allOf: [
        {
          $ref: '#/components/schemas/KindDccEnum'
        }
      ],
      default: 'post'
    },
    is_escalation: {
      type: 'boolean',
      title: 'Escalation?'
    },
    content_hidden: {
      type: 'boolean',
      title: 'Content hidden?'
    },
    sender_public_body: {
      type: 'string',
      format: 'uri',
      nullable: true
    },
    recipient_public_body: {
      type: 'string',
      format: 'uri',
      nullable: true
    },
    status: {
      oneOf: [
        {
          $ref: '#/components/schemas/StatusEnum'
        },
        {
          $ref: '#/components/schemas/BlankEnum'
        }
      ]
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    redacted: {
      type: 'boolean',
      title: 'Was Redacted?'
    },
    not_publishable: {
      type: 'boolean',
      readOnly: true
    },
    attachments: {
      type: 'string',
      readOnly: true
    },
    subject: {
      type: 'string',
      readOnly: true
    },
    content: {
      type: 'string',
      readOnly: true
    },
    redacted_subject: {
      type: 'string',
      readOnly: true
    },
    redacted_content: {
      type: 'string',
      readOnly: true
    },
    sender: {
      type: 'string',
      readOnly: true
    },
    status_name: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string',
      format: 'date-time',
      readOnly: true
    }
  }
} as const

export const PatchedUploadSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    guid: {
      type: 'string',
      format: 'uuid'
    },
    state: {
      type: 'string',
      maxLength: 50
    },
    upload_offset: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_length: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_metadata: {
      type: 'string'
    },
    filename: {
      type: 'string',
      maxLength: 255
    },
    temporary_file_path: {
      type: 'string',
      nullable: true,
      maxLength: 4096
    },
    expires: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    token: {
      type: 'string',
      format: 'uuid',
      nullable: true
    },
    user: {
      type: 'integer',
      nullable: true
    }
  }
} as const

export const PatchedUserPreferenceSchema = {
  type: 'object',
  properties: {
    value: {
      type: 'string'
    }
  }
} as const

export const ProblemReportSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    message_id: {
      type: 'integer',
      readOnly: true
    },
    kind: {
      $ref: '#/components/schemas/ProblemReportKindEnum'
    },
    kind_label: {
      type: 'string',
      readOnly: true
    },
    message_subject: {
      type: 'string',
      readOnly: true
    },
    message_url: {
      type: 'string',
      readOnly: true
    },
    timestamp: {
      type: 'string',
      format: 'date-time'
    },
    auto_submitted: {
      type: 'boolean'
    },
    resolved: {
      type: 'boolean'
    },
    description: {
      type: 'string'
    },
    resolution: {
      type: 'string'
    },
    resolution_timestamp: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    claimed: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    related_publicbody_id: {
      type: 'string',
      readOnly: true
    },
    escalated: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    moderator_id: {
      type: 'integer',
      nullable: true,
      readOnly: true
    },
    is_requester: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'id',
    'is_requester',
    'kind',
    'kind_label',
    'message_id',
    'message_subject',
    'message_url',
    'moderator_id',
    'related_publicbody_id'
  ]
} as const

export const ProblemReportKindEnumSchema = {
  enum: [
    'message_not_delivered',
    'attachment_broken',
    'redaction_needed',
    'foi_help_needed',
    'other',
    'not_foi',
    'not_nice',
    'info_outdated',
    'info_wrong',
    'bounce_publicbody',
    'mail_inauthentic'
  ],
  type: 'string',
  description: `* \`message_not_delivered\` - Your message was not delivered.
* \`attachment_broken\` - The attachments don't seem to work.
* \`redaction_needed\` - More redactions are needed.
* \`foi_help_needed\` - You need help to understand or reply to this message.
* \`other\` - Something else...
* \`not_foi\` - This is not a proper FOI request.
* \`not_nice\` - Content is against netiquette.
* \`info_outdated\` - Published information is outdated.
* \`info_wrong\` - Published information is wrong.
* \`bounce_publicbody\` - You received a bounce mail from the public body.
* \`mail_inauthentic\` - Received mail does not pass authenticity checks.`
} as const

export const PublicBodySchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer'
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    other_names: {
      type: 'string'
    },
    description: {
      type: 'string'
    },
    url: {
      type: 'string',
      format: 'uri',
      nullable: true,
      maxLength: 500
    },
    parent: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    root: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    depth: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    classification: {
      allOf: [
        {
          $ref: '#/components/schemas/SimpleClassification'
        }
      ],
      readOnly: true
    },
    categories: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/SimpleCategory'
      },
      readOnly: true
    },
    email: {
      type: 'string',
      format: 'email',
      maxLength: 255
    },
    contact: {
      type: 'string'
    },
    address: {
      type: 'string'
    },
    fax: {
      type: 'string',
      maxLength: 50
    },
    request_note: {
      type: 'string'
    },
    number_of_requests: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    site_url: {
      type: 'string'
    },
    request_note_html: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      allOf: [
        {
          $ref: '#/components/schemas/Jurisdiction'
        }
      ],
      readOnly: true
    },
    laws: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FoiLaw'
      },
      readOnly: true
    },
    regions: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uri'
      },
      readOnly: true
    },
    source_reference: {
      type: 'string',
      maxLength: 255
    },
    alternative_emails: {
      nullable: true
    },
    wikidata_item: {
      type: 'string',
      maxLength: 50
    },
    extra_data: {},
    geo: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'categories',
    'classification',
    'geo',
    'id',
    'jurisdiction',
    'laws',
    'name',
    'parent',
    'regions',
    'request_note_html',
    'resource_uri',
    'root',
    'site_url',
    'slug'
  ]
} as const

export const PublicBodyListSchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer'
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    other_names: {
      type: 'string'
    },
    description: {
      type: 'string'
    },
    url: {
      type: 'string',
      format: 'uri',
      nullable: true,
      maxLength: 500
    },
    parent: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    root: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    depth: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    classification: {
      allOf: [
        {
          $ref: '#/components/schemas/SimpleClassification'
        }
      ],
      readOnly: true
    },
    categories: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/SimpleCategory'
      },
      readOnly: true
    },
    email: {
      type: 'string',
      format: 'email',
      maxLength: 255
    },
    contact: {
      type: 'string'
    },
    address: {
      type: 'string'
    },
    fax: {
      type: 'string',
      maxLength: 50
    },
    request_note: {
      type: 'string'
    },
    number_of_requests: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    site_url: {
      type: 'string'
    },
    request_note_html: {
      type: 'string',
      readOnly: true
    },
    jurisdiction: {
      allOf: [
        {
          $ref: '#/components/schemas/Jurisdiction'
        }
      ],
      readOnly: true
    },
    laws: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uri'
      },
      readOnly: true
    },
    regions: {
      type: 'array',
      items: {
        type: 'string',
        format: 'uri'
      },
      readOnly: true
    },
    source_reference: {
      type: 'string',
      maxLength: 255
    },
    alternative_emails: {
      nullable: true
    },
    wikidata_item: {
      type: 'string',
      maxLength: 50
    },
    extra_data: {},
    geo: {
      type: 'string',
      readOnly: true
    }
  },
  required: [
    'categories',
    'classification',
    'geo',
    'id',
    'jurisdiction',
    'laws',
    'name',
    'parent',
    'regions',
    'request_note_html',
    'resource_uri',
    'root',
    'site_url',
    'slug'
  ]
} as const

export const ResolutionEnumSchema = {
  enum: [
    'successful',
    'partially_successful',
    'not_held',
    'refused',
    'user_withdrew_costs',
    'user_withdrew'
  ],
  type: 'string',
  description: `* \`successful\` - Request Successful
* \`partially_successful\` - Request partially successful
* \`not_held\` - Information not held
* \`refused\` - Request refused
* \`user_withdrew_costs\` - Request was withdrawn due to costs
* \`user_withdrew\` - Request was withdrawn`
} as const

export const SimpleCategorySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 100
    },
    slug: {
      type: 'string',
      pattern: '^[-\\w]+$',
      maxLength: 100
    },
    is_topic: {
      type: 'boolean',
      title: 'As topic'
    },
    depth: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    }
  },
  required: ['depth', 'id', 'name', 'slug']
} as const

export const SimpleClassificationSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    depth: {
      type: 'integer',
      maximum: 2147483647,
      minimum: 0
    }
  },
  required: ['depth', 'id', 'name', 'slug']
} as const

export const SimplePublicBodySchema = {
  type: 'object',
  properties: {
    resource_uri: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    id: {
      type: 'integer'
    },
    name: {
      type: 'string',
      maxLength: 255
    },
    slug: {
      type: 'string',
      maxLength: 255,
      pattern: '^[-a-zA-Z0-9_]+$'
    },
    other_names: {
      type: 'string'
    },
    description: {
      type: 'string'
    },
    url: {
      type: 'string',
      format: 'uri',
      nullable: true,
      maxLength: 500
    },
    depth: {
      type: 'integer',
      maximum: 32767,
      minimum: -32768
    },
    classification: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    email: {
      type: 'string',
      format: 'email',
      maxLength: 255
    },
    contact: {
      type: 'string'
    },
    address: {
      type: 'string'
    },
    fax: {
      type: 'string',
      maxLength: 50
    },
    request_note: {
      type: 'string'
    },
    number_of_requests: {
      type: 'integer',
      maximum: 2147483647,
      minimum: -2147483648
    },
    site_url: {
      type: 'string'
    },
    jurisdiction: {
      type: 'string',
      format: 'uri',
      readOnly: true
    },
    request_note_html: {
      type: 'string',
      readOnly: true
    },
    geo: {
      type: 'string',
      readOnly: true
    },
    last_modified_at: {
      type: 'string'
    }
  },
  required: [
    'classification',
    'geo',
    'id',
    'jurisdiction',
    'last_modified_at',
    'name',
    'request_note_html',
    'resource_uri',
    'site_url',
    'slug'
  ]
} as const

export const StatusEnumSchema = {
  enum: [
    'awaiting_user_confirmation',
    'publicbody_needed',
    'awaiting_publicbody_confirmation',
    'awaiting_response',
    'awaiting_classification',
    'asleep',
    'resolved'
  ],
  type: 'string',
  description: `* \`awaiting_user_confirmation\` - Awaiting user confirmation
* \`publicbody_needed\` - Public Body needed
* \`awaiting_publicbody_confirmation\` - Awaiting Public Body confirmation
* \`awaiting_response\` - Awaiting response
* \`awaiting_classification\` - Request awaits classification
* \`asleep\` - Request asleep
* \`resolved\` - Request resolved`
} as const

export const UpdateDocumentSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      maxLength: 500
    },
    description: {
      type: 'string'
    }
  }
} as const

export const UploadSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    guid: {
      type: 'string',
      format: 'uuid'
    },
    state: {
      type: 'string',
      maxLength: 50
    },
    upload_offset: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_length: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_metadata: {
      type: 'string'
    },
    filename: {
      type: 'string',
      maxLength: 255
    },
    temporary_file_path: {
      type: 'string',
      nullable: true,
      maxLength: 4096
    },
    expires: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    token: {
      type: 'string',
      format: 'uuid',
      nullable: true
    },
    user: {
      type: 'integer',
      nullable: true
    }
  },
  required: ['guid', 'id']
} as const

export const UploadCreateSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    guid: {
      type: 'string',
      format: 'uuid'
    },
    state: {
      type: 'string',
      maxLength: 50
    },
    upload_offset: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_length: {
      type: 'integer',
      maximum: 9223372036854776000,
      minimum: -9223372036854776000,
      format: 'int64'
    },
    upload_metadata: {
      type: 'string'
    },
    filename: {
      type: 'string',
      maxLength: 255
    },
    temporary_file_path: {
      type: 'string',
      nullable: true,
      maxLength: 4096
    },
    expires: {
      type: 'string',
      format: 'date-time',
      nullable: true
    },
    token: {
      type: 'string',
      format: 'uuid',
      nullable: true
    },
    user: {
      type: 'integer',
      nullable: true
    }
  },
  required: ['id']
} as const

export const UserSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
      readOnly: true
    },
    private: {
      type: 'boolean'
    }
  },
  required: ['id']
} as const

export const UserPreferenceSchema = {
  type: 'object',
  properties: {
    value: {
      type: 'string'
    }
  },
  required: ['value']
} as const
