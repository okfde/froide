# Generated by Django 4.0.7 on 2022-10-06 17:34

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import taggit.managers


class Migration(migrations.Migration):
    dependencies = [
        ("georegion", "0011_georegion_invalid_on"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("publicbody", "0039_publicbody_alternative_emails"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="foilaw",
            options={
                "ordering": ("-meta", "-priority"),
                "verbose_name": "Freedom of Information Law",
                "verbose_name_plural": "Freedom of Information Laws",
            },
        ),
        migrations.AlterField(
            model_name="category",
            name="slug",
            field=models.SlugField(
                allow_unicode=True, max_length=100, unique=True, verbose_name="slug"
            ),
        ),
        migrations.AlterField(
            model_name="publicbodytag",
            name="slug",
            field=models.SlugField(
                allow_unicode=True, max_length=100, unique=True, verbose_name="slug"
            ),
        ),
        migrations.CreateModel(
            name="CategorizedPublicBodyChangeProposal",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Categorized Public Body Change Proposal",
                "verbose_name_plural": "Categorized Public Body Change Proposals",
            },
        ),
        migrations.CreateModel(
            name="PublicBodyChangeProposal",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Created at"
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                (
                    "other_names",
                    models.TextField(
                        blank=True, default="", verbose_name="Other names"
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True, max_length=500, null=True, verbose_name="URL"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, default="", max_length=254, verbose_name="Email"
                    ),
                ),
                ("fax", models.CharField(blank=True, max_length=50)),
                ("contact", models.TextField(blank=True, verbose_name="Contact")),
                ("address", models.TextField(blank=True, verbose_name="Address")),
                (
                    "file_index",
                    models.URLField(
                        blank=True, max_length=1024, verbose_name="file index"
                    ),
                ),
                (
                    "org_chart",
                    models.URLField(
                        blank=True, max_length=1024, verbose_name="organisational chart"
                    ),
                ),
                (
                    "geo",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, geography=True, null=True, srid=4326
                    ),
                ),
                (
                    "categories",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="publicbody.CategorizedPublicBodyChangeProposal",
                        to="publicbody.Category",
                        verbose_name="categories",
                    ),
                ),
                (
                    "classification",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="publicbody.classification",
                    ),
                ),
                (
                    "jurisdiction",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="publicbody.jurisdiction",
                        verbose_name="Jurisdiction",
                    ),
                ),
                (
                    "publicbody",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="publicbody.publicbody",
                    ),
                ),
                (
                    "regions",
                    models.ManyToManyField(blank=True, to="georegion.georegion"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Proposed Public Body Change",
                "verbose_name_plural": "Proposed Public Body Changes",
                "ordering": ("-created_at",),
            },
        ),
        migrations.AddConstraint(
            model_name="publicbodychangeproposal",
            constraint=models.UniqueConstraint(
                fields=("publicbody", "user"), name="unique_publicbody_user_change"
            ),
        ),
        migrations.AddField(
            model_name="categorizedpublicbodychangeproposal",
            name="content_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="publicbody.publicbodychangeproposal",
            ),
        ),
        migrations.AddField(
            model_name="categorizedpublicbodychangeproposal",
            name="tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="categorized_publicbody_change_proposals",
                to="publicbody.category",
            ),
        ),
    ]
